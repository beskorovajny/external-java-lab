2023-06-15 13:04:48 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:11:40 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:12:40 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:12:43 DEBUG H2 DataSource created
2023-06-15 13:12:43 DEBUG EntityManagerFactory created
2023-06-15 13:12:47 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:12:48 DEBUG JpaTransactionManager created
2023-06-15 13:13:39 DEBUG User is not authenticated yet...
2023-06-15 13:13:39 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:13:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:13:40 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:13:40 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 13:13:41 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:13:41 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:13:41 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:13:41 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:13:41 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:14:05 DEBUG User is not authenticated yet...
2023-06-15 13:14:05 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:14:05 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:14:05 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:14:05 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-15 13:14:05 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-15 13:14:05 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-15 13:16:30 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:16:33 DEBUG H2 DataSource created
2023-06-15 13:16:34 DEBUG EntityManagerFactory created
2023-06-15 13:16:37 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:16:38 DEBUG JpaTransactionManager created
2023-06-15 13:16:51 DEBUG User is not authenticated yet...
2023-06-15 13:16:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:16:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:16:51 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:16:51 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 13:16:52 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:16:52 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:16:52 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:16:52 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:16:52 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:30:21 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:30:23 DEBUG H2 DataSource created
2023-06-15 13:30:24 DEBUG EntityManagerFactory created
2023-06-15 13:30:28 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:30:28 DEBUG JpaTransactionManager created
2023-06-15 13:30:43 DEBUG User is not authenticated yet...
2023-06-15 13:30:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:30:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:30:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:30:44 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 13:30:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:30:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:30:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:30:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:30:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:31:00 DEBUG User is not authenticated yet...
2023-06-15 13:31:00 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:31:00 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:31:00 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:31:00 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-15 13:31:00 DEBUG [UserService.findById()] User received from database: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])], for ID:[1]
2023-06-15 13:31:00 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 13:31:00 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-15 13:31:00 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 13:31:00 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-15 13:31:00 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-15 13:31:00 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-15 13:31:00 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN)]
2023-06-15 13:31:00 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-15 13:31:00 DEBUG [ReceiptJPARepository.save()] Receipt with id:[null] has been saved.
2023-06-15 13:31:00 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-15T10:31:00.710320100)]
2023-06-15 13:31:00 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-15T10:31:00.710320100)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-15T10:31:00.710320100, userDTO=null)]
2023-06-15 13:31:10 DEBUG User is not authenticated yet...
2023-06-15 13:31:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:31:10 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:31:10 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:31:10 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-15 13:31:10 DEBUG [UserService.findById()] User received from database: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])], for ID:[1]
2023-06-15 13:31:10 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 13:31:10 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-15 13:31:10 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 13:31:10 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-15 13:31:10 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-15 13:31:10 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-15 13:31:10 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN)]
2023-06-15 13:31:10 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-15 13:31:10 DEBUG [ReceiptJPARepository.save()] Receipt with id:[null] has been saved.
2023-06-15 13:31:10 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=8, price=510.0, createDate=2023-06-15T10:31:10.298220500)]
2023-06-15 13:31:10 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=8, price=510.0, createDate=2023-06-15T10:31:10.298220500)] converted to ReceiptDTO: [ReceiptDTO(id=8, price=510.0, createDate=2023-06-15T10:31:10.298220500, userDTO=null)]
2023-06-15 13:31:25 DEBUG User is not authenticated yet...
2023-06-15 13:31:25 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:31:25 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:31:25 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:31:25 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-15 13:31:25 DEBUG [UserService.findById()] User received from database: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])], for ID:[1]
2023-06-15 13:31:25 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 13:31:25 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-15 13:31:25 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 13:31:25 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-15 13:31:25 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-15 13:31:25 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-15 13:31:25 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN)]
2023-06-15 13:31:25 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-15 13:31:25 DEBUG [ReceiptJPARepository.save()] Receipt with id:[null] has been saved.
2023-06-15 13:31:25 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=9, price=510.0, createDate=2023-06-15T10:31:25.459443900)]
2023-06-15 13:31:25 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=9, price=510.0, createDate=2023-06-15T10:31:25.459443900)] converted to ReceiptDTO: [ReceiptDTO(id=9, price=510.0, createDate=2023-06-15T10:31:25.459443900, userDTO=null)]
2023-06-15 13:31:34 DEBUG User is not authenticated yet...
2023-06-15 13:31:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:31:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:31:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:31:34 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-15 13:31:34 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-15 13:31:34 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-15 13:32:46 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:32:48 DEBUG H2 DataSource created
2023-06-15 13:32:49 DEBUG EntityManagerFactory created
2023-06-15 13:32:52 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:32:53 DEBUG JpaTransactionManager created
2023-06-15 13:33:05 DEBUG User is not authenticated yet...
2023-06-15 13:33:05 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:33:05 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:33:05 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:33:05 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=garbuckel1@google.co.jp, password=123456789)}
2023-06-15 13:33:06 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:33:06 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:33:06 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 13:33:06 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:33:06 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:33:19 DEBUG User is not authenticated yet...
2023-06-15 13:33:19 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:33:19 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:33:19 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 13:33:19 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-15 13:33:19 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-15 13:33:19 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-15 13:36:24 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:36:26 DEBUG H2 DataSource created
2023-06-15 13:36:27 DEBUG EntityManagerFactory created
2023-06-15 13:36:30 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:36:30 DEBUG JpaTransactionManager created
2023-06-15 13:40:51 DEBUG User is not authenticated yet...
2023-06-15 13:40:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:40:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:40:51 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 13:40:51 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-15 13:40:51 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-15 13:40:51 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-15 13:42:19 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:42:21 DEBUG H2 DataSource created
2023-06-15 13:42:22 DEBUG EntityManagerFactory created
2023-06-15 13:42:25 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:42:26 DEBUG JpaTransactionManager created
2023-06-15 13:42:40 DEBUG User is not authenticated yet...
2023-06-15 13:42:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:42:41 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:42:41 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:42:41 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=garbuckel1@google.co.jp, password=123456789)}
2023-06-15 13:42:41 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:42:41 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:42:41 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 13:42:41 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:42:41 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:44:06 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:44:09 DEBUG H2 DataSource created
2023-06-15 13:44:09 DEBUG EntityManagerFactory created
2023-06-15 13:44:13 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:44:13 DEBUG JpaTransactionManager created
2023-06-15 13:44:33 DEBUG User is not authenticated yet...
2023-06-15 13:44:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:44:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:44:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:44:34 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=garbuckel1@google.co.jp, password=123456789)}
2023-06-15 13:44:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:44:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:44:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 13:44:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:44:35 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:44:55 DEBUG User is not authenticated yet...
2023-06-15 13:44:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 13:44:55 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 13:44:55 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 13:44:55 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=garbuckel1@google.co.jp, password=123456789)}
2023-06-15 13:44:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:44:55 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:44:55 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 13:44:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 13:44:55 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 13:46:05 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 13:46:08 DEBUG H2 DataSource created
2023-06-15 13:46:08 DEBUG EntityManagerFactory created
2023-06-15 13:46:11 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 13:46:12 DEBUG JpaTransactionManager created
2023-06-15 14:10:12 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:10:15 DEBUG H2 DataSource created
2023-06-15 14:10:16 DEBUG EntityManagerFactory created
2023-06-15 14:10:19 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:10:20 DEBUG JpaTransactionManager created
2023-06-15 14:10:33 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 14:10:34 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7YnFs3NVuYMSczInTqBa2.7XtrWhM4ONLvRvy3dPl56.8/JQPt5IS, userRole=CUSTOMER)}
2023-06-15 14:10:34 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-15 14:10:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:10:34 DEBUG [AuthenticationService.signUp()] Token: [eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODY4Mjc0MzQsImV4cCI6MTY4NjkxMzgzNH0.ccfsgcvBPVGIFfMWPG2UctLE8YP5IYYRLSt508kntIk] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7YnFs3NVuYMSczInTqBa2.7XtrWhM4ONLvRvy3dPl56.8/JQPt5IS, userRole=CUSTOMER)]
2023-06-15 14:10:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:10:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:10:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:10:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:10:51 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-15 14:10:57 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:10:57 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:10:57 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:10:57 DEBUG [GiftCertificateService.findByName()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]], for name:[m]
2023-06-15 14:10:57 DEBUG [GiftCertificateService.findByName()] Total records for name:[3]
2023-06-15 14:11:18 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-15 14:11:18 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-06-15 14:11:18 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-06-15 14:11:18 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=6, name=visual basic)]], for GiftCertificate.ID: [2]
2023-06-15 14:11:25 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:11:25 DEBUG [GiftCertificateService.findAllByParams()] Total records for params:[1]
2023-06-15 14:12:27 DEBUG User is not authenticated yet...
2023-06-15 14:12:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:12:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:12:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:12:46 DEBUG User is not authenticated yet...
2023-06-15 14:12:46 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:12:46 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:12:46 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:14:00 DEBUG User is not authenticated yet...
2023-06-15 14:14:00 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:14:00 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:14:00 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:16:42 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:16:45 DEBUG H2 DataSource created
2023-06-15 14:16:46 DEBUG EntityManagerFactory created
2023-06-15 14:16:50 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:16:50 DEBUG JpaTransactionManager created
2023-06-15 14:17:07 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 14:17:07 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$q9Hqh6.iuCv9DVFyPa9KaO6GtMFj2KYj4T763v6Dyze0pn/9xheN2, userRole=CUSTOMER)}
2023-06-15 14:17:07 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-15 14:17:07 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:17:08 DEBUG [AuthenticationService.signUp()] Token: [eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODY4Mjc4MjgsImV4cCI6MTY4NjkxNDIyOH0.55Qik5FntQCchWY0wKGf_jIP2m2J8pR3WZjxBg4kV_8] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$q9Hqh6.iuCv9DVFyPa9KaO6GtMFj2KYj4T763v6Dyze0pn/9xheN2, userRole=CUSTOMER)]
2023-06-15 14:17:26 DEBUG User is not authenticated yet...
2023-06-15 14:17:26 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:17:26 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$q9Hqh6.iuCv9DVFyPa9KaO6GtMFj2KYj4T763v6Dyze0pn/9xheN2, userRole=CUSTOMER)]]
2023-06-15 14:17:26 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$q9Hqh6.iuCv9DVFyPa9KaO6GtMFj2KYj4T763v6Dyze0pn/9xheN2, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:17:26 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-15 14:17:26 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-15 14:17:26 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-15 14:17:26 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-15 14:17:26 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-15 14:17:26 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-15T11:17:26.762532700, lastUpdateDate=2023-06-15T11:17:26.762532700)] has been saved.
2023-06-15 14:17:26 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-15 14:17:26 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-15T11:17:26.762532700, lastUpdateDate=2023-06-15T11:17:26.762532700)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-15T11:17:26.762532700, lastUpdateDate=2023-06-15T11:17:26.762532700, tags=[])]
2023-06-15 14:19:35 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:19:38 DEBUG H2 DataSource created
2023-06-15 14:19:39 DEBUG EntityManagerFactory created
2023-06-15 14:19:43 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:19:43 DEBUG JpaTransactionManager created
2023-06-15 14:20:13 DEBUG User is not authenticated yet...
2023-06-15 14:20:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:20:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:20:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:20:15 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=garbuckel1@google.co.jp, password=123456789)}
2023-06-15 14:20:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:20:15 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:20:15 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:20:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:20:15 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:20:35 DEBUG User is not authenticated yet...
2023-06-15 14:20:35 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:20:35 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:20:35 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:20:42 DEBUG User is not authenticated yet...
2023-06-15 14:20:42 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:20:42 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:20:42 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:20:42 DEBUG [GiftCertificateService.deleteById()] GiftCertificate for ID:[2] removed.
2023-06-15 14:20:42 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:20:49 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:20:49 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:20:49 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:20:49 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-15 14:27:28 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:27:30 DEBUG H2 DataSource created
2023-06-15 14:27:31 DEBUG EntityManagerFactory created
2023-06-15 14:27:35 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:27:35 DEBUG JpaTransactionManager created
2023-06-15 14:27:51 DEBUG User is not authenticated yet...
2023-06-15 14:27:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:27:52 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:27:52 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:27:52 DEBUG [GiftCertificateService.deleteById()] GiftCertificate for ID:[2] removed.
2023-06-15 14:27:52 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:28:13 DEBUG User is not authenticated yet...
2023-06-15 14:28:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:28:13 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:28:13 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:28:13 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=garbuckel1@google.co.jp, password=123456789)}
2023-06-15 14:28:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:28:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:28:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:28:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:28:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:28:32 DEBUG User is not authenticated yet...
2023-06-15 14:28:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:28:32 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:28:32 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=yroR72kqD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=Sw58Du, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=1Ws9WhLxtgHt, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=LiY7Iap3eagd, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=LjyDjTh5p, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=IVkVul, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=nI6oNjtld, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=EU8DoiHTyoa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=wbKQ7AFF1gBo, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=8Tn8UGcMZYY, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=CqTmv7U2w5, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=bqcCzvX7F, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=QJ2UYx, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=0g2KxDJXG, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserMappingService] User model: [User(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=LSXhp7GVjz6, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:28:32 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=null, userRole=CUSTOMER, receipts=[])]]
2023-06-15 14:28:45 DEBUG User is not authenticated yet...
2023-06-15 14:28:45 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:28:45 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:28:45 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:28:45 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-15 14:28:45 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-15 14:28:45 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-15 14:33:07 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:33:09 DEBUG H2 DataSource created
2023-06-15 14:33:09 DEBUG EntityManagerFactory created
2023-06-15 14:33:13 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:33:13 DEBUG JpaTransactionManager created
2023-06-15 14:33:20 DEBUG User is not authenticated yet...
2023-06-15 14:33:20 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:33:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:33:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:33:21 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=garbuckel1@google.co.jp, password=123456789)}
2023-06-15 14:33:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:33:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:33:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:33:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:33:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:33:49 DEBUG User is not authenticated yet...
2023-06-15 14:33:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:33:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:33:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:33:49 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 14:33:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:33:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:33:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:33:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:33:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:34:27 DEBUG User is not authenticated yet...
2023-06-15 14:34:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:34:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:34:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:35:26 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:35:31 DEBUG H2 DataSource created
2023-06-15 14:35:33 DEBUG EntityManagerFactory created
2023-06-15 14:35:39 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:35:39 DEBUG JpaTransactionManager created
2023-06-15 14:38:52 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:38:55 DEBUG H2 DataSource created
2023-06-15 14:38:55 DEBUG EntityManagerFactory created
2023-06-15 14:38:59 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:38:59 DEBUG JpaTransactionManager created
2023-06-15 14:40:06 DEBUG User is not authenticated yet...
2023-06-15 14:40:06 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:40:07 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:40:07 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:40:08 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 14:40:08 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:40:08 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:40:08 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:40:08 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:40:08 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:43:21 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:43:25 DEBUG H2 DataSource created
2023-06-15 14:43:27 DEBUG EntityManagerFactory created
2023-06-15 14:43:33 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:43:33 DEBUG JpaTransactionManager created
2023-06-15 14:43:57 DEBUG User is not authenticated yet...
2023-06-15 14:43:57 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:43:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:43:58 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:43:58 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 14:43:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:43:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:43:58 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:43:59 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:43:59 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:44:21 DEBUG User is not authenticated yet...
2023-06-15 14:44:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:44:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:44:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:44:27 DEBUG User is not authenticated yet...
2023-06-15 14:44:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:44:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:44:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:44:27 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:27 DEBUG [UserService.findById()] User received from database: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])], for ID:[10]
2023-06-15 14:44:32 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 14:44:33 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$NF1ZEo6lRu4qYS.vjFE1BeM3jJaWQvbXFOJf3xRsto9Z12qxszV6y, userRole=CUSTOMER)}
2023-06-15 14:44:33 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-15 14:44:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:44:33 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODY4Mjk0NzMsImV4cCI6MTY4NjkxNTg3M30.vXeynkYAnS2I08-gusdtaPwkqfDJpWeuTYopaNblYGM] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$NF1ZEo6lRu4qYS.vjFE1BeM3jJaWQvbXFOJf3xRsto9Z12qxszV6y, userRole=CUSTOMER)]
2023-06-15 14:44:53 DEBUG User is not authenticated yet...
2023-06-15 14:44:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:44:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$NF1ZEo6lRu4qYS.vjFE1BeM3jJaWQvbXFOJf3xRsto9Z12qxszV6y, userRole=CUSTOMER)]]
2023-06-15 14:44:53 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$NF1ZEo6lRu4qYS.vjFE1BeM3jJaWQvbXFOJf3xRsto9Z12qxszV6y, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=yroR72kqD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=Sw58Du, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=1Ws9WhLxtgHt, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=LiY7Iap3eagd, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=LjyDjTh5p, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=IVkVul, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=nI6oNjtld, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=EU8DoiHTyoa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=wbKQ7AFF1gBo, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=8Tn8UGcMZYY, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=CqTmv7U2w5, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=bqcCzvX7F, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=QJ2UYx, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=0g2KxDJXG, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserMappingService] User model: [User(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=LSXhp7GVjz6, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 14:44:53 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=null, userRole=CUSTOMER, receipts=[])]]
2023-06-15 14:45:51 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:45:55 DEBUG H2 DataSource created
2023-06-15 14:45:56 DEBUG EntityManagerFactory created
2023-06-15 14:46:02 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:46:02 DEBUG JpaTransactionManager created
2023-06-15 14:46:15 DEBUG User is not authenticated yet...
2023-06-15 14:46:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:46:21 DEBUG User is not authenticated yet...
2023-06-15 14:46:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:46:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:46:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:46:21 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 14:46:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:46:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:46:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:46:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:46:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:46:36 DEBUG User is not authenticated yet...
2023-06-15 14:46:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:46:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:46:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:46:44 DEBUG User is not authenticated yet...
2023-06-15 14:46:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:46:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:46:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:46:44 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 14:46:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:46:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:46:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:46:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:46:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:47:38 DEBUG User is not authenticated yet...
2023-06-15 14:47:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:47:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:47:38 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:48:26 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:48:29 DEBUG H2 DataSource created
2023-06-15 14:48:30 DEBUG EntityManagerFactory created
2023-06-15 14:48:33 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:48:34 DEBUG JpaTransactionManager created
2023-06-15 14:49:34 DEBUG User is not authenticated yet...
2023-06-15 14:49:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:49:35 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:49:35 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:49:42 DEBUG User is not authenticated yet...
2023-06-15 14:49:42 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:49:42 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:49:42 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:49:42 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 14:49:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:49:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:49:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:49:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:49:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:49:57 DEBUG User is not authenticated yet...
2023-06-15 14:49:57 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:49:57 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:49:57 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:50:05 DEBUG User is not authenticated yet...
2023-06-15 14:50:05 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:50:05 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:50:05 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:50:13 DEBUG User is not authenticated yet...
2023-06-15 14:50:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:50:13 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:50:13 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:50:18 DEBUG User is not authenticated yet...
2023-06-15 14:50:18 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:50:18 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:50:18 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:50:18 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-15 14:50:18 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-15 14:50:18 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-15 14:51:27 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:51:30 DEBUG H2 DataSource created
2023-06-15 14:51:30 DEBUG EntityManagerFactory created
2023-06-15 14:51:34 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:51:34 DEBUG JpaTransactionManager created
2023-06-15 14:51:43 DEBUG User is not authenticated yet...
2023-06-15 14:51:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:51:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:51:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:51:50 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 14:51:50 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)}
2023-06-15 14:51:50 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-15 14:51:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:51:50 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODY4Mjk5MTAsImV4cCI6MTY4NjkxNjMxMH0.wXHy4HzRXLLwk8ah-zs4CBCEU1IoObVSmEDdGjLI8hs] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)]
2023-06-15 14:52:01 DEBUG User is not authenticated yet...
2023-06-15 14:52:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [garbuckel1@google.co.jp}
2023-06-15 14:52:01 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)]]
2023-06-15 14:52:01 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] for eMail:[garbuckel1@google.co.jp} has been received.
2023-06-15 14:52:07 DEBUG User is not authenticated yet...
2023-06-15 14:52:07 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:52:07 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)]]
2023-06-15 14:52:07 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:52:28 DEBUG User is not authenticated yet...
2023-06-15 14:52:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:52:28 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)]]
2023-06-15 14:52:28 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:52:28 DEBUG Delete tag : Optional.empty
2023-06-15 14:52:34 DEBUG User is not authenticated yet...
2023-06-15 14:52:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:52:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)]]
2023-06-15 14:52:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$19eZkpQrg4JL2mGEynOTqevINPKKGUfYuMZhLEW1xi4diP/bfv/fO, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:52:34 DEBUG Delete tag : Optional[Tag(id=2, name=scala)]
2023-06-15 14:52:34 DEBUG [TagService.deleteById()] Tag for ID:[2] removed
2023-06-15 14:52:34 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-15 14:53:19 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:53:21 DEBUG H2 DataSource created
2023-06-15 14:53:22 DEBUG EntityManagerFactory created
2023-06-15 14:53:25 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:53:26 DEBUG JpaTransactionManager created
2023-06-15 14:53:42 DEBUG User is not authenticated yet...
2023-06-15 14:53:42 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:53:49 DEBUG User is not authenticated yet...
2023-06-15 14:53:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:54:01 DEBUG User is not authenticated yet...
2023-06-15 14:54:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:54:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:54:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:54:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:54:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:54:05 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-15 14:54:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:54:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:54:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:54:11 DEBUG [GiftCertificateService.findByName()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]], for name:[m]
2023-06-15 14:54:11 DEBUG [GiftCertificateService.findByName()] Total records for name:[3]
2023-06-15 14:54:25 DEBUG User is not authenticated yet...
2023-06-15 14:54:25 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 14:54:25 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 14:54:25 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 14:54:31 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 14:54:31 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)}
2023-06-15 14:54:31 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-15 14:54:31 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:54:31 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODY4MzAwNzEsImV4cCI6MTY4NjkxNjQ3MX0.lZrlOhmkVTGvFJZQt6ViqzbdebXzTF1L9Xf8PS0J1bA] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)]
2023-06-15 14:54:46 DEBUG User is not authenticated yet...
2023-06-15 14:54:46 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:54:46 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)]]
2023-06-15 14:54:46 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:54:52 DEBUG User is not authenticated yet...
2023-06-15 14:54:52 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:54:52 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)]]
2023-06-15 14:54:52 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:54:54 DEBUG User is not authenticated yet...
2023-06-15 14:54:54 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:54:54 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)]]
2023-06-15 14:54:54 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:55:09 DEBUG User is not authenticated yet...
2023-06-15 14:55:09 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 14:55:09 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)]]
2023-06-15 14:55:09 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$yDU/jCGxerI053e0avbJsOsmJxklw.Gr/yILzjrhue1vYmy.SGfjW, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-15 14:55:09 DEBUG [GiftCertificateService.update()] GiftCertificateDTO for update: [GiftCertificateDTO(id=1, name=Java, description=best choice, price=1488.0, duration=5, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=null)])]
2023-06-15 14:55:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:55:09 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-15 14:55:09 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-15 14:59:11 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 14:59:15 DEBUG H2 DataSource created
2023-06-15 14:59:15 DEBUG EntityManagerFactory created
2023-06-15 14:59:19 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 14:59:20 DEBUG JpaTransactionManager created
2023-06-15 14:59:31 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:59:31 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:59:31 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:59:31 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 14:59:31 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-15 15:00:30 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 15:00:30 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$c2hCUQasL6Nbcj7qeX6LF.Fgdz5WYV.mTAq8fveMorYwaLIVTkLmG, userRole=CUSTOMER)}
2023-06-15 15:00:30 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-15 15:00:30 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 15:00:30 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODY4MzA0MzAsImV4cCI6MTY4NjkxNjgzMH0.BExMVNqjSEKaUZWcyDUE3Dw15F7IrhFzBOfUs7UbxGk] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$c2hCUQasL6Nbcj7qeX6LF.Fgdz5WYV.mTAq8fveMorYwaLIVTkLmG, userRole=CUSTOMER)]
2023-06-15 15:00:34 DEBUG User is not authenticated yet...
2023-06-15 15:00:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:00:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:00:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:00:34 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 15:00:35 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:00:35 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:00:35 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:00:35 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:00:35 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:12:41 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 15:12:42 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$O2EseNxoHV3gpMpBFUpvHekzoyGr9X5l/5v4VxIH7TV4fIi6KQfLa, userRole=CUSTOMER)}
2023-06-15 15:12:42 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-15 15:12:42 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-15 15:12:42 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$c2hCUQasL6Nbcj7qeX6LF.Fgdz5WYV.mTAq8fveMorYwaLIVTkLmG, userRole=CUSTOMER)]]
2023-06-15 15:12:55 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 15:12:55 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)}
2023-06-15 15:12:55 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloach@mail.com]
2023-06-15 15:12:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:12:55 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvYWNoQG1haWwuY29tIiwiaWF0IjoxNjg2ODMxMTc1LCJleHAiOjE2ODY5MTc1NzV9.6AP8xcqbBXwhKAvOxXU1EQ-JYka_U0OM-GAky0iJSeQ] for user: [User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]
2023-06-15 15:13:08 DEBUG User is not authenticated yet...
2023-06-15 15:13:08 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:13:08 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:13:08 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:13:23 DEBUG User is not authenticated yet...
2023-06-15 15:13:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:13:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:13:23 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:13:31 DEBUG User is not authenticated yet...
2023-06-15 15:13:31 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:13:31 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:13:31 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:13:42 DEBUG User is not authenticated yet...
2023-06-15 15:13:42 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:13:42 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:13:42 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:13:50 DEBUG User is not authenticated yet...
2023-06-15 15:13:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:13:50 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:13:50 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:13:56 DEBUG User is not authenticated yet...
2023-06-15 15:13:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:13:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:13:56 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:14:05 DEBUG User is not authenticated yet...
2023-06-15 15:14:05 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:14:05 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:14:05 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:14:05 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-15 15:14:05 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-15 15:14:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 15:14:05 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-15 15:14:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-15 15:14:05 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-15 15:14:05 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-15 15:14:05 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-15 15:14:05 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-15 15:14:05 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-15 15:14:05 DEBUG [ReceiptJPARepository.save()] Receipt with id:[null] has been saved.
2023-06-15 15:14:05 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-15T12:14:05.606009400)]
2023-06-15 15:14:05 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-15T12:14:05.606009400)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-15T12:14:05.606009400, userDTO=null)]
2023-06-15 15:14:27 DEBUG User is not authenticated yet...
2023-06-15 15:14:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:14:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:14:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:14:27 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-15 15:14:27 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=2, price=255.0, createDate=2023-04-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]
2023-06-15 15:14:27 DEBUG [ReceiptService.findAll()] Receipts received from database: [[ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null), ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]]
2023-06-15 15:14:40 DEBUG User is not authenticated yet...
2023-06-15 15:14:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:14:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:14:40 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:14:40 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-15T12:14:05.606009)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-15T12:14:05.606009, userDTO=null)]
2023-06-15 15:14:40 DEBUG [ReceiptService.findById()] Receipt received from database: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-15T12:14:05.606009, userDTO=null)], for ID:[7]
2023-06-15 15:14:54 DEBUG User is not authenticated yet...
2023-06-15 15:14:54 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:14:54 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)]]
2023-06-15 15:14:54 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$PStK6ANTj2NR9JYozRM.rOX8rcrexqXM04PrXEmBR3fH2AFGeaki6, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:14:54 DEBUG Delete receipt : Optional[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)]
2023-06-15 15:14:54 DEBUG Receipt for removal Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)
2023-06-15 15:14:54 DEBUG [ReceiptService.deleteById()] Receipt for ID:[1] has been removed
2023-06-15 15:14:54 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-15 15:15:52 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-15 15:15:55 DEBUG H2 DataSource created
2023-06-15 15:15:55 DEBUG EntityManagerFactory created
2023-06-15 15:15:59 DEBUG Filter 'authTokenFilter' configured for use
2023-06-15 15:15:59 DEBUG JpaTransactionManager created
2023-06-15 15:16:10 DEBUG User is not authenticated yet...
2023-06-15 15:16:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:16:18 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-15 15:16:18 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)}
2023-06-15 15:16:18 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloach@mail.com]
2023-06-15 15:16:18 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:16:18 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvYWNoQG1haWwuY29tIiwiaWF0IjoxNjg2ODMxMzc4LCJleHAiOjE2ODY5MTc3Nzh9.7x6M9EsTxIR922WVCOJQ7jj5wd48mX2IT5lzDPegLyI] for user: [User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)]
2023-06-15 15:16:33 DEBUG User is not authenticated yet...
2023-06-15 15:16:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:16:33 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)]]
2023-06-15 15:16:33 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:16:39 DEBUG User is not authenticated yet...
2023-06-15 15:16:39 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:16:39 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)]]
2023-06-15 15:16:39 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:17:27 DEBUG User is not authenticated yet...
2023-06-15 15:17:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:17:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)]]
2023-06-15 15:17:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:18:12 DEBUG User is not authenticated yet...
2023-06-15 15:18:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:18:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:18:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:18:12 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-15 15:18:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:18:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:18:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:18:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:18:13 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:18:23 DEBUG User is not authenticated yet...
2023-06-15 15:18:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-15 15:18:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)]]
2023-06-15 15:18:23 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$t4nOQAe/lIdo8R/BE3EUT.6Ip8GK/Atops8IuLwFBntvd0uTxkVm., userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-15 15:18:28 DEBUG User is not authenticated yet...
2023-06-15 15:18:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:18:28 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:18:28 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:18:38 DEBUG User is not authenticated yet...
2023-06-15 15:18:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:18:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:18:38 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:20:25 DEBUG User is not authenticated yet...
2023-06-15 15:20:25 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:20:25 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:20:25 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:21:03 DEBUG User is not authenticated yet...
2023-06-15 15:21:03 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:21:03 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:21:03 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:21:17 DEBUG User is not authenticated yet...
2023-06-15 15:21:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:21:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:21:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:21:25 DEBUG User is not authenticated yet...
2023-06-15 15:21:25 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:21:25 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:21:25 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-15 15:21:33 DEBUG User is not authenticated yet...
2023-06-15 15:21:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-15 15:21:33 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-15 15:21:33 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 08:51:06 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-16 08:51:11 DEBUG H2 DataSource created
2023-06-16 08:51:13 DEBUG EntityManagerFactory created
2023-06-16 08:51:19 DEBUG Filter 'authTokenFilter' configured for use
2023-06-16 08:51:20 DEBUG JpaTransactionManager created
2023-06-16 08:52:01 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 08:52:01 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-16 08:52:08 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 08:52:08 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 08:52:08 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 08:52:08 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 08:52:08 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-16 08:52:18 DEBUG User is not authenticated yet...
2023-06-16 08:52:18 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 08:52:18 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 08:52:18 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 08:52:28 DEBUG User is not authenticated yet...
2023-06-16 08:52:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 08:52:33 DEBUG User is not authenticated yet...
2023-06-16 08:52:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 08:52:33 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 08:52:33 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 08:52:53 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-16 08:52:53 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)}
2023-06-16 08:52:53 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloach@mail.com]
2023-06-16 08:52:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 08:52:53 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvYWNoQG1haWwuY29tIiwiaWF0IjoxNjg2ODk0NzczLCJleHAiOjE2ODY5ODExNzN9.ppKe5lye8jtx0d3z61DABHSgTs36P9GYJHhJ_bnlCfk] for user: [User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)]
2023-06-16 08:53:12 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-16 08:53:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 08:53:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 08:53:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 08:53:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 08:53:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 08:53:32 DEBUG User is not authenticated yet...
2023-06-16 08:53:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 08:53:32 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 08:53:32 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 08:53:49 DEBUG User is not authenticated yet...
2023-06-16 08:53:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 08:53:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)]]
2023-06-16 08:53:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-16 08:53:59 DEBUG User is not authenticated yet...
2023-06-16 08:53:59 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 08:53:59 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)]]
2023-06-16 08:53:59 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-16 08:54:21 DEBUG User is not authenticated yet...
2023-06-16 08:54:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 08:54:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)]]
2023-06-16 08:54:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$OXZdo.2VPPc8wKr8OwkJ6.xREgcOTOqC84GG5kTg7LpGlEH4eLiTW, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-16 08:54:36 DEBUG User is not authenticated yet...
2023-06-16 08:54:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 08:54:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 08:54:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 08:54:42 DEBUG User is not authenticated yet...
2023-06-16 08:54:42 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 08:54:42 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 08:54:42 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 15:51:30 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-16 15:51:33 DEBUG H2 DataSource created
2023-06-16 15:51:34 DEBUG EntityManagerFactory created
2023-06-16 15:56:22 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-16 15:56:25 DEBUG H2 DataSource created
2023-06-16 15:56:26 DEBUG EntityManagerFactory created
2023-06-16 16:05:00 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-16 16:05:03 DEBUG H2 DataSource created
2023-06-16 16:05:04 DEBUG EntityManagerFactory created
2023-06-16 16:05:07 DEBUG Filter 'authTokenFilter' configured for use
2023-06-16 16:05:08 DEBUG JpaTransactionManager created
2023-06-16 16:05:34 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-16 16:05:34 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-06-16 16:05:34 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-06-16 16:05:34 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=6, name=visual basic)]], for GiftCertificate.ID: [2]
2023-06-16 16:05:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 16:05:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 16:05:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 16:05:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 16:05:40 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-16 16:05:49 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-16 16:05:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 16:05:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 16:05:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 16:05:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 16:05:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 16:05:54 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-16 16:05:54 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$l1gf1NgOhGXrmGNuLAxUyOzGXLuoN2FwYaegry7YwJDsRWR7ZxnGW, userRole=CUSTOMER)}
2023-06-16 16:05:54 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloach@mail.com]
2023-06-16 16:05:54 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 16:05:54 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvYWNoQG1haWwuY29tIiwiaWF0IjoxNjg2OTIwNzU0LCJleHAiOjE2ODcwMDcxNTR9.36fAcuiMNinerj7YlmwQkFZ6lHaURSk1x2o_cfJa3Lo] for user: [User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$l1gf1NgOhGXrmGNuLAxUyOzGXLuoN2FwYaegry7YwJDsRWR7ZxnGW, userRole=CUSTOMER)]
2023-06-16 16:06:14 DEBUG User is not authenticated yet...
2023-06-16 16:06:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 16:06:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$l1gf1NgOhGXrmGNuLAxUyOzGXLuoN2FwYaegry7YwJDsRWR7ZxnGW, userRole=CUSTOMER)]]
2023-06-16 16:06:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$l1gf1NgOhGXrmGNuLAxUyOzGXLuoN2FwYaegry7YwJDsRWR7ZxnGW, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-16 16:52:35 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-16 16:52:38 DEBUG H2 DataSource created
2023-06-16 16:52:39 DEBUG EntityManagerFactory created
2023-06-16 16:52:43 DEBUG Filter 'authTokenFilter' configured for use
2023-06-16 16:52:43 DEBUG JpaTransactionManager created
2023-06-16 17:12:34 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-16 17:12:38 DEBUG H2 DataSource created
2023-06-16 17:12:38 DEBUG EntityManagerFactory created
2023-06-16 17:12:43 DEBUG Filter 'authTokenFilter' configured for use
2023-06-16 17:12:43 DEBUG JpaTransactionManager created
2023-06-16 17:13:16 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-16 17:13:16 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$00ELvkUjSmqejEYgowirHO3yK596TSSTWRQdjYYzKnOo.7kp5eu2., userRole=CUSTOMER)}
2023-06-16 17:13:16 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloach@mail.com]
2023-06-16 17:13:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-16 17:13:18 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvYWNoQG1haWwuY29tIiwiaWF0IjoxNjg2OTI0Nzk3LCJleHAiOjE2ODcwMTExOTd9.m0krczUABuOHzjwh4yyZUFzsz78_NxgXORd98waYskA] for user: [User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$00ELvkUjSmqejEYgowirHO3yK596TSSTWRQdjYYzKnOo.7kp5eu2., userRole=CUSTOMER)]
2023-06-16 17:14:16 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-16 17:14:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 17:14:16 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 17:14:16 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-16 17:14:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-16 17:14:16 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-16 17:14:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 17:14:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 17:14:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 17:14:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-16 17:14:59 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-18 14:29:38 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-18 14:29:44 DEBUG H2 DataSource created
2023-06-18 14:29:45 DEBUG EntityManagerFactory created
2023-06-18 14:29:50 DEBUG Filter 'authTokenFilter' configured for use
2023-06-18 14:29:51 DEBUG JpaTransactionManager created
2023-06-18 14:40:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:33 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-18 14:40:46 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:46 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:46 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:46 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:40:46 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-18 14:41:45 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:41:45 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:41:45 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:41:45 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:41:45 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-18 14:42:00 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:42:00 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:42:00 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:42:00 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:42:00 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-18 14:42:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:42:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:42:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:42:40 DEBUG [GiftCertificateService.findByName()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]], for name:[m]
2023-06-18 14:42:40 DEBUG [GiftCertificateService.findByName()] Total records for name:[3]
2023-06-18 14:43:00 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-18 14:43:00 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kFSIpElYcpWfb9rtuFsfq.t3wMnsmOwk9Et08e112wyPJWFbfzZSa, userRole=CUSTOMER)}
2023-06-18 14:43:00 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloach@mail.com]
2023-06-18 14:43:00 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-18 14:43:00 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvYWNoQG1haWwuY29tIiwiaWF0IjoxNjg3MDg4NTgwLCJleHAiOjE2ODcxNzQ5ODB9.tCjZUttgOL3ANoIZNYdysN1z3PjDZWutfzuFmir3gd0] for user: [User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kFSIpElYcpWfb9rtuFsfq.t3wMnsmOwk9Et08e112wyPJWFbfzZSa, userRole=CUSTOMER)]
2023-06-18 14:43:29 DEBUG User is not authenticated yet...
2023-06-18 14:43:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-18 14:43:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kFSIpElYcpWfb9rtuFsfq.t3wMnsmOwk9Et08e112wyPJWFbfzZSa, userRole=CUSTOMER)]]
2023-06-18 14:43:29 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kFSIpElYcpWfb9rtuFsfq.t3wMnsmOwk9Et08e112wyPJWFbfzZSa, userRole=CUSTOMER)] for eMail:[jBloach@mail.com} has been received.
2023-06-18 14:47:36 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-18 14:47:36 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$K0y8jNR/sJVgSTgEtf4qj.oEkf2Ya6za2ktLkA3izVW36FK5hHI4O, userRole=CUSTOMER)}
2023-06-18 14:47:36 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloach@mail.com]
2023-06-18 14:47:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-18 14:47:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloach@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kFSIpElYcpWfb9rtuFsfq.t3wMnsmOwk9Et08e112wyPJWFbfzZSa, userRole=CUSTOMER)]]
2023-06-18 14:47:58 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-18 14:47:59 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$BsdSS0IGtH98kPfdD0x1CeugWNwG6vpGA0Rfzn66awDZ0UP5SgdCC, userRole=CUSTOMER)}
2023-06-18 14:47:59 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-18 14:47:59 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-18 14:47:59 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODcwODg4NzksImV4cCI6MTY4NzE3NTI3OX0.S8_PmbXGeNZSl24mGvgu0TEXhkilIMfhiCO-sb82_Uo] for user: [User(id=52, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$BsdSS0IGtH98kPfdD0x1CeugWNwG6vpGA0Rfzn66awDZ0UP5SgdCC, userRole=CUSTOMER)]
2023-06-18 14:48:12 DEBUG User is not authenticated yet...
2023-06-18 14:48:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-18 14:48:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$BsdSS0IGtH98kPfdD0x1CeugWNwG6vpGA0Rfzn66awDZ0UP5SgdCC, userRole=CUSTOMER)]]
2023-06-18 14:48:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$BsdSS0IGtH98kPfdD0x1CeugWNwG6vpGA0Rfzn66awDZ0UP5SgdCC, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-18 14:53:02 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-18 14:53:04 DEBUG H2 DataSource created
2023-06-18 14:53:05 DEBUG EntityManagerFactory created
2023-06-18 14:53:09 DEBUG Filter 'authTokenFilter' configured for use
2023-06-18 14:53:09 DEBUG JpaTransactionManager created
2023-06-18 14:53:18 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-18 14:53:18 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$DUqzul7eMGUe3Lh1aFXUkOB7ZFOGSHqaC.MMa5AhqR6imgKMeWcme, userRole=CUSTOMER)}
2023-06-18 14:53:18 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-18 14:53:18 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-18 14:53:19 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODcwODkxOTksImV4cCI6MTY4NzE3NTU5OX0.7fH6TFnSlpGW2ag3VKTeX135WhYd_OyWi5E20WmTMoM] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$DUqzul7eMGUe3Lh1aFXUkOB7ZFOGSHqaC.MMa5AhqR6imgKMeWcme, userRole=CUSTOMER)]
2023-06-18 14:53:38 DEBUG User is not authenticated yet...
2023-06-18 14:53:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-18 14:53:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$DUqzul7eMGUe3Lh1aFXUkOB7ZFOGSHqaC.MMa5AhqR6imgKMeWcme, userRole=CUSTOMER)]]
2023-06-18 14:53:38 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$DUqzul7eMGUe3Lh1aFXUkOB7ZFOGSHqaC.MMa5AhqR6imgKMeWcme, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-18 14:53:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:53:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:53:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:53:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:53:50 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-18 14:55:48 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-18 14:55:51 DEBUG H2 DataSource created
2023-06-18 14:55:52 DEBUG EntityManagerFactory created
2023-06-18 14:55:55 DEBUG Filter 'authTokenFilter' configured for use
2023-06-18 14:55:55 DEBUG JpaTransactionManager created
2023-06-18 14:56:07 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-18 14:56:07 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$mkU7wG8oAdkBIXqIMZVvee96A.sjNmqEaxY/.V.m3FYCWXfGJr/yW, userRole=CUSTOMER)}
2023-06-18 14:56:07 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-18 14:56:07 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-18 14:56:08 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODcwODkzNjgsImV4cCI6MTY4NzE3NTc2OH0.LQjmRxlfEb__xsD_4tu_VwuexMghiEmkV2ecQ9OTOLc] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$mkU7wG8oAdkBIXqIMZVvee96A.sjNmqEaxY/.V.m3FYCWXfGJr/yW, userRole=CUSTOMER)]
2023-06-18 14:56:12 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-18 14:56:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-18 14:56:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-18 14:56:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-18 14:56:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-18 14:56:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-18 14:58:13 DEBUG User is not authenticated yet...
2023-06-18 14:58:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-18 14:58:13 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$mkU7wG8oAdkBIXqIMZVvee96A.sjNmqEaxY/.V.m3FYCWXfGJr/yW, userRole=CUSTOMER)]]
2023-06-18 14:58:13 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$mkU7wG8oAdkBIXqIMZVvee96A.sjNmqEaxY/.V.m3FYCWXfGJr/yW, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-18 14:58:13 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-18 14:58:13 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-18 14:58:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:58:13 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-18 14:58:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-18 14:58:13 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-18 14:58:13 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-18 14:58:13 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-18 14:58:13 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-18 14:58:13 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-18 14:58:13 DEBUG [ReceiptJPARepository.save()] Receipt with id:[null] has been saved.
2023-06-18 14:58:13 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-18T11:58:13.108018700)]
2023-06-18 14:58:13 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-18T11:58:13.108018700)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-18T11:58:13.108018700, userDTO=null)]
2023-06-18 14:58:30 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-18 14:58:30 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-18 14:58:30 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-18 14:58:30 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-18 14:58:30 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-18 14:58:30 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-18 14:58:46 DEBUG User is not authenticated yet...
2023-06-18 14:58:46 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-18 14:58:46 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-18 14:58:46 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-18 14:58:46 DEBUG Delete tag : Optional[Tag(id=2, name=scala)]
2023-06-18 14:58:46 DEBUG [TagService.deleteById()] Tag for ID:[2] removed
2023-06-18 14:58:46 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-19 09:22:35 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-19 09:22:38 DEBUG H2 DataSource created
2023-06-19 09:22:39 DEBUG EntityManagerFactory created
2023-06-19 09:22:43 DEBUG Filter 'authTokenFilter' configured for use
2023-06-19 09:22:43 DEBUG JpaTransactionManager created
2023-06-19 09:22:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:22:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:22:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:22:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:22:54 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-19 09:23:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:23:09 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-19 09:23:27 DEBUG User is not authenticated yet...
2023-06-19 09:23:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloach@mail.com}
2023-06-19 09:23:34 DEBUG User is not authenticated yet...
2023-06-19 09:23:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:23:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:23:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:23:34 DEBUG Delete tag : Optional[Tag(id=2, name=scala)]
2023-06-19 09:23:34 DEBUG [TagService.deleteById()] Tag for ID:[2] removed
2023-06-19 09:23:34 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-19 09:24:20 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-19 09:24:20 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)}
2023-06-19 09:24:20 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-19 09:24:20 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:24:20 DEBUG [AuthenticationService.signUp()] Token: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODcxNTU4NjAsImV4cCI6MTY4NzI0MjI2MH0.qngbHbzbgQJU59aQ_Sxe5uypuMsgmnkyX3GTTOz0_bs] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]
2023-06-19 09:24:36 DEBUG User is not authenticated yet...
2023-06-19 09:24:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:24:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:24:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:24:42 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:24:42 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:24:42 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:24:42 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:24:42 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-19 09:25:22 DEBUG User is not authenticated yet...
2023-06-19 09:25:22 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:25:22 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:25:22 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:25:34 DEBUG User is not authenticated yet...
2023-06-19 09:25:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:25:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:25:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:25:46 DEBUG User is not authenticated yet...
2023-06-19 09:25:46 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:25:46 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:25:46 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:25:54 DEBUG User is not authenticated yet...
2023-06-19 09:25:54 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:25:54 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:25:54 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:25:54 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-19 09:25:54 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-19 09:25:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:25:54 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-19 09:25:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:25:54 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-19 09:25:54 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-19 09:25:54 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-19 09:25:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-19 09:25:54 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-19 09:25:54 DEBUG [ReceiptJPARepository.save()] Receipt with id:[null] has been saved.
2023-06-19 09:25:54 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-19T06:25:54.509343100)]
2023-06-19 09:25:54 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-19T06:25:54.509343100)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-19T06:25:54.509343100, userDTO=null)]
2023-06-19 09:26:06 DEBUG User is not authenticated yet...
2023-06-19 09:26:06 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:26:06 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:26:06 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:26:06 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-19 09:26:06 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=2, price=255.0, createDate=2023-04-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]
2023-06-19 09:26:06 DEBUG [ReceiptService.findAll()] Receipts received from database: [[ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null), ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]]
2023-06-19 09:26:29 DEBUG User is not authenticated yet...
2023-06-19 09:26:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:26:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:26:29 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:26:29 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-19T06:25:54.509343)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-19T06:25:54.509343, userDTO=null)]
2023-06-19 09:26:29 DEBUG [ReceiptService.findById()] Receipt received from database: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-19T06:25:54.509343, userDTO=null)], for ID:[7]
2023-06-19 09:28:40 DEBUG User is not authenticated yet...
2023-06-19 09:28:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:28:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:28:40 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:28:50 DEBUG User is not authenticated yet...
2023-06-19 09:28:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-19 09:28:50 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)]]
2023-06-19 09:28:50 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$uuYaSw7E5XT/I2tFhpbwL.lbLTmMaWaZiTXS0P6kVpLAl0FtmTgAu, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-19 09:28:56 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-19 09:28:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:28:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:28:56 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:28:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:28:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:29:08 DEBUG User is not authenticated yet...
2023-06-19 09:29:08 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:29:08 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:29:08 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:29:17 DEBUG User is not authenticated yet...
2023-06-19 09:29:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:29:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:29:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:29:17 DEBUG Delete receipt : Optional[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)]
2023-06-19 09:29:17 DEBUG Receipt for removal Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)
2023-06-19 09:29:17 DEBUG [ReceiptService.deleteById()] Receipt for ID:[1] has been removed
2023-06-19 09:29:17 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-19 09:29:27 DEBUG User is not authenticated yet...
2023-06-19 09:29:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:29:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:29:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:29:27 DEBUG Delete tag : Optional.empty
2023-06-19 09:29:34 DEBUG User is not authenticated yet...
2023-06-19 09:29:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:29:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:29:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:29:34 DEBUG Delete tag : Optional[Tag(id=3, name=c)]
2023-06-19 09:29:34 DEBUG [TagService.deleteById()] Tag for ID:[3] removed
2023-06-19 09:29:34 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-19 09:29:44 DEBUG User is not authenticated yet...
2023-06-19 09:29:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:29:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:29:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:29:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=new tag)] converted to Tag model: [Tag(id=null, name=new tag)]
2023-06-19 09:29:44 DEBUG [TagJPARepository.save()] Tag with id:[7] has been saved.
2023-06-19 09:29:44 DEBUG [TagMappingService] Tag model: [Tag(id=7, name=new tag)] converted to TagDTO: [TagDTO(id=7, name=new tag)]
2023-06-19 09:29:56 DEBUG User is not authenticated yet...
2023-06-19 09:29:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:29:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:29:56 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:30:11 DEBUG User is not authenticated yet...
2023-06-19 09:30:11 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:30:11 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:30:11 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:30:11 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-19 09:30:11 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-19 09:30:11 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-19 09:30:11 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-19 09:30:11 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-19 09:30:11 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-19T06:30:11.526091300, lastUpdateDate=2023-06-19T06:30:11.526091300)] has been saved.
2023-06-19 09:30:11 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-19 09:30:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-19T06:30:11.526091300, lastUpdateDate=2023-06-19T06:30:11.526091300)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-19T06:30:11.526091300, lastUpdateDate=2023-06-19T06:30:11.526091300, tags=[])]
2023-06-19 09:30:53 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-19 09:30:57 DEBUG H2 DataSource created
2023-06-19 09:30:58 DEBUG EntityManagerFactory created
2023-06-19 09:31:02 DEBUG Filter 'authTokenFilter' configured for use
2023-06-19 09:31:02 DEBUG JpaTransactionManager created
2023-06-19 09:31:13 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-19 09:31:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:31:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:31:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:31:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:31:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:31:32 DEBUG User is not authenticated yet...
2023-06-19 09:31:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:31:32 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:31:32 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:31:33 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=1, name=jvm, description=jvm based languages, price=500.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=2023-06-19T06:31:33.012185)] has been saved.
2023-06-19 09:31:33 DEBUG [GiftCertificateService.updatePrice()] Price has been updated.
2023-06-19 09:31:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=500.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=2023-06-19T06:31:33.012185)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=500.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=2023-06-19T06:31:33.012185, tags=[])]
2023-06-19 09:31:48 DEBUG User is not authenticated yet...
2023-06-19 09:31:48 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:31:48 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:31:48 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-19 09:31:48 DEBUG [GiftCertificateService.deleteById()] GiftCertificate for ID:[2] removed.
2023-06-19 09:31:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-19 09:31:57 DEBUG User is not authenticated yet...
2023-06-19 09:31:57 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-19 09:31:57 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-19 09:31:57 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 13:55:24 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-20 13:55:27 DEBUG H2 DataSource created
2023-06-20 13:55:28 DEBUG EntityManagerFactory created
2023-06-20 13:55:33 DEBUG Filter 'authTokenFilter' configured for use
2023-06-20 13:55:33 DEBUG JpaTransactionManager created
2023-06-20 13:55:58 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 13:55:58 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 13:55:58 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 13:55:58 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 13:55:58 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-20 13:56:15 DEBUG FIND_BY_TAGS [[java, kotlin]]
2023-06-20 13:56:15 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 13:56:15 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 13:56:15 DEBUG [GiftCertificateService.findByTags()] GiftCertificate received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]], for tags:[[java, kotlin]]
2023-06-20 13:56:15 DEBUG [GiftCertificateService.findByTags()] Total records for tags:[3]
2023-06-20 13:57:47 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-20 13:57:47 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FJSW9c2hXOhCztnVYXJvY.OKlsbIq40blJH0BdQO8uV6qB4y7EtDG, userRole=CUSTOMER)}
2023-06-20 13:57:47 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-20 13:57:47 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:08:34 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-20 14:08:36 DEBUG H2 DataSource created
2023-06-20 14:08:37 DEBUG EntityManagerFactory created
2023-06-20 14:08:42 DEBUG Filter 'authTokenFilter' configured for use
2023-06-20 14:08:42 DEBUG JpaTransactionManager created
2023-06-20 14:08:51 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-20 14:08:52 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)}
2023-06-20 14:08:52 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-20 14:08:52 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:08:52 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)]
2023-06-20 14:08:53 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODcyNTkzMzIsImV4cCI6MTY4NzM0NTczMn0.tT59p4eaDbjk2B8-b5e7ZgWRCNU1gpPlENIWt-hEKOI, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)] has been saved
2023-06-20 14:10:14 DEBUG User is not authenticated yet...
2023-06-20 14:10:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:10:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)]]
2023-06-20 14:10:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-20 14:10:22 DEBUG User is not authenticated yet...
2023-06-20 14:10:22 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:10:22 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)]]
2023-06-20 14:10:22 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-20 14:10:22 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-20 14:10:22 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-20 14:10:22 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 14:10:23 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-20 14:10:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-20 14:10:23 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-20 14:10:23 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-20 14:10:23 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-20 14:10:23 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-20 14:10:23 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-20 14:10:23 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-20T11:10:23.024895)]
2023-06-20 14:10:23 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-20T11:10:23.024895)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-20T11:10:23.024895, userDTO=null)]
2023-06-20 14:12:43 DEBUG User is not authenticated yet...
2023-06-20 14:12:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:12:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)]]
2023-06-20 14:12:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-20 14:12:52 DEBUG User is not authenticated yet...
2023-06-20 14:12:52 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:12:52 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)]]
2023-06-20 14:12:52 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-20 14:12:52 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:12:52 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Xoaq.immgPYoU8/k73UoWe3q36koSqvjfRDN6zTH2odDhSBJZebya, userRole=CUSTOMER)]]
2023-06-20 14:16:22 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-20 14:16:24 DEBUG H2 DataSource created
2023-06-20 14:16:25 DEBUG EntityManagerFactory created
2023-06-20 14:16:29 DEBUG Filter 'authTokenFilter' configured for use
2023-06-20 14:16:29 DEBUG JpaTransactionManager created
2023-06-20 14:17:31 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-20 14:17:34 DEBUG H2 DataSource created
2023-06-20 14:17:35 DEBUG EntityManagerFactory created
2023-06-20 14:17:38 DEBUG Filter 'authTokenFilter' configured for use
2023-06-20 14:17:39 DEBUG JpaTransactionManager created
2023-06-20 14:17:59 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-20 14:17:59 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:18:00 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:18:00 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:18:00 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:18:00 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:18:00 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3MjU5ODgwLCJleHAiOjE2ODczNDYyODB9.7lZEevfJCVCriqkcXjRE7YOtRMfbckS-kHd5pSDYREo, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-20 14:18:19 DEBUG User is not authenticated yet...
2023-06-20 14:18:19 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:18:23 DEBUG User is not authenticated yet...
2023-06-20 14:18:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:18:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:18:23 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:18:23 DEBUG Delete receipt : Optional[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)]
2023-06-20 14:18:23 DEBUG Receipt for removal Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)
2023-06-20 14:18:23 DEBUG [ReceiptService.deleteById()] Receipt for ID:[1] has been removed
2023-06-20 14:18:23 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-20 14:18:43 DEBUG User is not authenticated yet...
2023-06-20 14:18:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:18:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:18:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:18:58 DEBUG User is not authenticated yet...
2023-06-20 14:18:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:18:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:18:58 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:18:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:18:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:19:09 DEBUG User is not authenticated yet...
2023-06-20 14:19:09 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:19:09 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:19:09 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:19:12 DEBUG User is not authenticated yet...
2023-06-20 14:19:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:19:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:19:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:19:12 DEBUG Delete receipt : Optional.empty
2023-06-20 14:21:38 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-20 14:21:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:21:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:21:38 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:21:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:21:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:21:38 DEBUG [AuthenticationService.signIn()] Token: [Token(id=3, jwt=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3MjYwMDk4LCJleHAiOjE2ODczNDY0OTh9.-LZ7T3a9PicRY3TeQaoygL8xrTLcMzGmPTJ0fDaOO3k, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-20 14:21:50 DEBUG User is not authenticated yet...
2023-06-20 14:21:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-20 14:21:50 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-20 14:21:50 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-20 14:21:50 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-20 14:21:50 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-20 14:21:50 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-20 14:21:50 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-20 14:21:50 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-20 14:21:50 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-20T11:21:50.728945, lastUpdateDate=2023-06-20T11:21:50.728945)] has been saved.
2023-06-20 14:21:50 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-20 14:21:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-20T11:21:50.728945, lastUpdateDate=2023-06-20T11:21:50.728945)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-20T11:21:50.728945, lastUpdateDate=2023-06-20T11:21:50.728945, tags=[])]
2023-06-20 14:23:30 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-20 14:23:34 DEBUG MySQL DataSource with HikariCP created
2023-06-20 14:23:35 DEBUG Schema creation script executed
2023-06-20 14:23:37 DEBUG Schema initialization script executed
2023-06-20 14:23:38 DEBUG EntityManagerFactory created
2023-06-20 14:23:42 DEBUG Filter 'authTokenFilter' configured for use
2023-06-20 14:23:42 DEBUG JpaTransactionManager created
2023-06-20 14:23:49 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-20 14:23:50 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Y1BhNeMM67P5eHyMcIrjf.0Vx1zBgfJtKIR4/uodz7uckfYXV0xfu, userRole=CUSTOMER)}
2023-06-20 14:23:50 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-20 14:23:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:23:50 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Y1BhNeMM67P5eHyMcIrjf.0Vx1zBgfJtKIR4/uodz7uckfYXV0xfu, userRole=CUSTOMER)]
2023-06-20 14:23:51 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODcyNjAyMzAsImV4cCI6MTY4NzM0NjYzMH0.QqvxpR9YHkgIfPn2LT8vKqItZOQFWTUtZijrxqDJ30w, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$Y1BhNeMM67P5eHyMcIrjf.0Vx1zBgfJtKIR4/uodz7uckfYXV0xfu, userRole=CUSTOMER)] has been saved
2023-06-20 14:32:27 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-20 14:32:30 DEBUG H2 DataSource created
2023-06-20 14:32:31 DEBUG EntityManagerFactory created
2023-06-20 14:32:35 DEBUG Filter 'authTokenFilter' configured for use
2023-06-20 14:32:36 DEBUG JpaTransactionManager created
2023-06-20 14:32:45 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-20 14:32:45 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$v/t3Y/noMzkVK25POs9lZuSVi10gMoymmA8V0Bm2ulSyHb8qS5dfy, userRole=CUSTOMER)}
2023-06-20 14:32:45 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-20 14:32:45 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:32:46 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$v/t3Y/noMzkVK25POs9lZuSVi10gMoymmA8V0Bm2ulSyHb8qS5dfy, userRole=CUSTOMER)]
2023-06-20 14:32:46 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODcyNjA3NjYsImV4cCI6MTY4NzM0NzE2Nn0.sUFMBMSw1bEnzx_2ZaJJd2nXnx4CyVnhgk0NArlX5dA, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$v/t3Y/noMzkVK25POs9lZuSVi10gMoymmA8V0Bm2ulSyHb8qS5dfy, userRole=CUSTOMER)] has been saved
2023-06-20 14:34:17 DEBUG User is not authenticated yet...
2023-06-20 14:34:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:34:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$v/t3Y/noMzkVK25POs9lZuSVi10gMoymmA8V0Bm2ulSyHb8qS5dfy, userRole=CUSTOMER)]]
2023-06-20 14:34:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$v/t3Y/noMzkVK25POs9lZuSVi10gMoymmA8V0Bm2ulSyHb8qS5dfy, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-20 14:34:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-20 14:34:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$v/t3Y/noMzkVK25POs9lZuSVi10gMoymmA8V0Bm2ulSyHb8qS5dfy, userRole=CUSTOMER)]]
2023-06-21 12:44:15 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-21 12:44:22 DEBUG H2 DataSource created
2023-06-21 12:44:23 DEBUG EntityManagerFactory created
2023-06-21 12:44:29 DEBUG Filter 'authTokenFilter' configured for use
2023-06-21 12:44:30 DEBUG JpaTransactionManager created
2023-06-21 12:45:58 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-21 12:45:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:45:59 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:45:59 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:45:59 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:45:59 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:45:59 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3MzQwNzU5LCJleHAiOjE2ODc0MjcxNTl9.GxrxkODNgHw4EC0Ye-YgXUMFcM42cRs5iVL4FZI-6_c, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-21 12:46:32 DEBUG User is not authenticated yet...
2023-06-21 12:46:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:46:32 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:46:32 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:46:47 DEBUG User is not authenticated yet...
2023-06-21 12:46:47 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:46:47 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:46:47 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=yroR72kqD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=Sw58Du, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=1Ws9WhLxtgHt, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=LiY7Iap3eagd, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=LjyDjTh5p, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=IVkVul, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=nI6oNjtld, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=EU8DoiHTyoa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=wbKQ7AFF1gBo, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=8Tn8UGcMZYY, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=CqTmv7U2w5, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=bqcCzvX7F, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=QJ2UYx, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=0g2KxDJXG, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserMappingService] User model: [User(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=LSXhp7GVjz6, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:46:47 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=31, email=dderoosu@lycos.com, firstName=Darby, lastName=De Roos, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=32, email=sglendzerv@noaa.gov, firstName=Stanton, lastName=Glendzer, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=33, email=dshillumw@vkontakte.ru, firstName=Derick, lastName=Shillum, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=34, email=cdilworthx@g.co, firstName=Crosby, lastName=Dilworth, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=35, email=fdinnagey@dot.gov, firstName=Franky, lastName=Dinnage, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=36, email=cbrinsonz@arizona.edu, firstName=Conant, lastName=Brinson, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=37, email=ntabourin10@cmu.edu, firstName=Nathanil, lastName=Tabourin, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=38, email=spountney11@biglobe.ne.jp, firstName=Stern, lastName=Pountney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=39, email=nkingswoode12@sohu.com, firstName=Neal, lastName=Kingswoode, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=40, email=cwillerson13@homestead.com, firstName=Carolynn, lastName=Willerson, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=41, email=fbullard14@jigsy.com, firstName=Felipa, lastName=Bullard, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=42, email=dseefeldt15@cdbaby.com, firstName=Dewey, lastName=Seefeldt, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=43, email=jgaddesby16@reverbnation.com, firstName=Joly, lastName=Gaddesby, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=44, email=lbavester17@mediafire.com, firstName=Lorne, lastName=Bavester, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=45, email=tcrush18@springer.com, firstName=Tomaso, lastName=Crush, password=null, userRole=CUSTOMER, receipts=[])]]
2023-06-21 12:47:13 DEBUG User is not authenticated yet...
2023-06-21 12:47:13 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:47:13 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:47:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=jIkAAQwsP, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=VW8Q4sQS2EM1, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=Et0ygqb, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=O8Mey9b0S, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserMappingService] User model: [User(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=vGOEpECUp0, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:47:14 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]]
2023-06-21 12:48:35 DEBUG User is not authenticated yet...
2023-06-21 12:48:35 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:48:35 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:48:35 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:48:38 DEBUG User is not authenticated yet...
2023-06-21 12:48:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:48:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:48:38 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:48:40 DEBUG User is not authenticated yet...
2023-06-21 12:48:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:48:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:48:40 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:48:43 DEBUG User is not authenticated yet...
2023-06-21 12:48:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-21 12:48:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-21 12:48:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-21 12:48:43 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:48:43 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:48:43 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 12:48:43 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-21 13:18:46 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-21 13:18:52 DEBUG H2 DataSource created
2023-06-21 13:18:54 DEBUG EntityManagerFactory created
2023-06-21 13:19:03 DEBUG JpaTransactionManager created
2023-06-22 13:54:59 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-22 13:55:02 DEBUG H2 DataSource created
2023-06-22 13:55:03 DEBUG EntityManagerFactory created
2023-06-22 13:56:48 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-22 13:56:51 DEBUG H2 DataSource created
2023-06-22 13:56:52 DEBUG EntityManagerFactory created
2023-06-22 13:58:58 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-22 13:59:01 DEBUG H2 DataSource created
2023-06-22 13:59:03 DEBUG EntityManagerFactory created
2023-06-23 10:20:55 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 10:20:58 DEBUG H2 DataSource created
2023-06-23 10:20:59 DEBUG EntityManagerFactory created
2023-06-23 10:21:05 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 10:21:05 DEBUG JpaTransactionManager created
2023-06-23 10:21:22 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:22 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:22 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:22 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:22 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-23 10:21:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:28 DEBUG [GiftCertificateService.findByName()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]], for name:[m]
2023-06-23 10:21:28 DEBUG [GiftCertificateService.findByName()] Total records for name:[3]
2023-06-23 10:21:40 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-23 10:21:40 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-06-23 10:21:40 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-06-23 10:21:40 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=6, name=visual basic)]], for GiftCertificate.ID: [2]
2023-06-23 10:21:51 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-23 10:21:51 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-06-23 10:21:51 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-06-23 10:21:51 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=6, name=visual basic)]], for GiftCertificate.ID: [2]
2023-06-23 10:21:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:21:59 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-23 10:22:18 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:22:18 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:22:18 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-06-23 10:22:25 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:22:25 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:22:25 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-06-23 10:23:39 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-23 10:23:40 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)}
2023-06-23 10:23:40 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-23 10:23:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:23:40 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)]
2023-06-23 10:23:40 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODc1MDUwMjAsImV4cCI6MTY4NzU5MTQyMH0.BZ893LkAQNqLdISQxOyBtbc-oJFxJzFB2YXU2_NUljw, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)] has been saved
2023-06-23 10:23:53 DEBUG User is not authenticated yet...
2023-06-23 10:23:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:23:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)]]
2023-06-23 10:23:53 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:23:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:23:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)]]
2023-06-23 10:24:47 DEBUG User is not authenticated yet...
2023-06-23 10:24:47 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:24:47 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)]]
2023-06-23 10:24:47 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$W67QDxpZb1Xu4AnztaF.xe2OhFYdwOQLWjrx/ae13KImaOJQdFbnK, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:24:47 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-23 10:24:47 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-23 10:24:47 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-23 10:24:47 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-23 10:24:47 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-23 10:24:47 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:24:47.710160300, lastUpdateDate=2023-06-23T07:24:47.710160300)] has been saved.
2023-06-23 10:24:47 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-23 10:24:47 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:24:47.710160300, lastUpdateDate=2023-06-23T07:24:47.710160300)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:24:47.710160300, lastUpdateDate=2023-06-23T07:24:47.710160300, tags=[])]
2023-06-23 10:33:35 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 10:33:38 DEBUG H2 DataSource created
2023-06-23 10:33:39 DEBUG EntityManagerFactory created
2023-06-23 10:37:13 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 10:37:15 DEBUG H2 DataSource created
2023-06-23 10:37:16 DEBUG EntityManagerFactory created
2023-06-23 10:37:30 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 10:37:32 DEBUG H2 DataSource created
2023-06-23 10:37:33 DEBUG EntityManagerFactory created
2023-06-23 10:37:37 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 10:37:37 DEBUG JpaTransactionManager created
2023-06-23 10:44:36 DEBUG User is not authenticated yet...
2023-06-23 10:44:37 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:44:59 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-23 10:44:59 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)}
2023-06-23 10:44:59 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-23 10:44:59 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:44:59 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)]
2023-06-23 10:44:59 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODc1MDYyOTksImV4cCI6MTY4NzU5MjY5OX0.nS09L_1r5gK948t5rEsN3mNr85CtzfuOxxBOPJqRN6w, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)] has been saved
2023-06-23 10:45:18 DEBUG User is not authenticated yet...
2023-06-23 10:45:18 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:45:18 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)]]
2023-06-23 10:45:18 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:45:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:45:23 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-23 10:45:36 DEBUG User is not authenticated yet...
2023-06-23 10:45:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:45:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)]]
2023-06-23 10:45:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:45:52 DEBUG User is not authenticated yet...
2023-06-23 10:45:52 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:45:52 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)]]
2023-06-23 10:45:52 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:46:24 DEBUG User is not authenticated yet...
2023-06-23 10:46:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:46:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)]]
2023-06-23 10:46:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$szZlwHNngp/M0JW9zXAFLe1t9zHvFxW0gTBdrjfDPmkIW1xYTLTH6, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:47:21 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 10:47:24 DEBUG H2 DataSource created
2023-06-23 10:47:24 DEBUG EntityManagerFactory created
2023-06-23 10:47:28 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 10:47:28 DEBUG JpaTransactionManager created
2023-06-23 10:47:44 DEBUG User is not authenticated yet...
2023-06-23 10:47:45 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:51:22 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 10:51:25 DEBUG H2 DataSource created
2023-06-23 10:51:26 DEBUG EntityManagerFactory created
2023-06-23 10:51:30 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 10:51:30 DEBUG JpaTransactionManager created
2023-06-23 10:51:43 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-23 10:51:43 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)}
2023-06-23 10:51:43 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-23 10:51:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:51:44 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]
2023-06-23 10:51:44 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODc1MDY3MDQsImV4cCI6MTY4NzU5MzEwNH0.AXrD-QGZTWe0HzeQ0DGb33q3dEkaxipoYRvBB4MK4pM, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] has been saved
2023-06-23 10:52:00 DEBUG User is not authenticated yet...
2023-06-23 10:52:00 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:52:00 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:52:00 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:52:11 DEBUG User is not authenticated yet...
2023-06-23 10:52:11 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:52:11 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:52:11 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:52:11 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-23 10:52:11 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-23 10:52:11 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-23 10:52:25 DEBUG User is not authenticated yet...
2023-06-23 10:52:25 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:52:25 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:52:25 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=jIkAAQwsP, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=VW8Q4sQS2EM1, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=Et0ygqb, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=O8Mey9b0S, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserMappingService] User model: [User(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=vGOEpECUp0, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:25 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]]
2023-06-23 10:52:37 DEBUG User is not authenticated yet...
2023-06-23 10:52:37 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:52:37 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:52:37 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:52:37 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:52:37 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-23 10:52:37 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:52:37 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-23 10:52:37 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:52:37 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-23 10:52:37 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-23 10:52:37 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-23 10:52:37 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-23 10:52:37 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-23 10:52:38 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-23T07:52:37.968726400)]
2023-06-23 10:52:38 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-23T07:52:37.968726400)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-23T07:52:37.968726400, userDTO=null)]
2023-06-23 10:53:03 DEBUG User is not authenticated yet...
2023-06-23 10:53:03 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:53:03 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:53:03 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:53:03 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-23 10:53:03 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=2, price=255.0, createDate=2023-04-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]
2023-06-23 10:53:03 DEBUG [ReceiptService.findAll()] Receipts received from database: [[ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null), ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]]
2023-06-23 10:53:24 DEBUG User is not authenticated yet...
2023-06-23 10:53:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:53:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:53:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:53:37 DEBUG User is not authenticated yet...
2023-06-23 10:53:37 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:53:37 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:53:37 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:53:43 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 10:53:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:53:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:53:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:53:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:53:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:53:43 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTA2ODIzLCJleHAiOjE2ODc1OTMyMjN9.mooTpMvhBn7pOK5jEQ4d3g3tLazfFlHvN5r_kT3UMBw, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 10:54:04 DEBUG User is not authenticated yet...
2023-06-23 10:54:04 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:54:04 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:54:04 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:54:04 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:04 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-23 10:54:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:54:04 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-23 10:54:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:54:04 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-23 10:54:04 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-23 10:54:04 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-23 10:54:04 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-23 10:54:04 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-23 10:54:04 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=8, price=510.0, createDate=2023-06-23T07:54:04.521315400)]
2023-06-23 10:54:04 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=8, price=510.0, createDate=2023-06-23T07:54:04.521315400)] converted to ReceiptDTO: [ReceiptDTO(id=8, price=510.0, createDate=2023-06-23T07:54:04.521315400, userDTO=null)]
2023-06-23 10:54:17 DEBUG User is not authenticated yet...
2023-06-23 10:54:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:54:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:54:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:54:17 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-23T07:52:37.968726)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-23T07:52:37.968726, userDTO=null)]
2023-06-23 10:54:17 DEBUG [ReceiptService.findById()] Receipt received from database: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-23T07:52:37.968726, userDTO=null)], for ID:[7]
2023-06-23 10:54:27 DEBUG User is not authenticated yet...
2023-06-23 10:54:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:54:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:54:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:54:27 DEBUG Delete receipt : Optional[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)]
2023-06-23 10:54:27 DEBUG Receipt for removal Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)
2023-06-23 10:54:27 DEBUG [ReceiptService.deleteById()] Receipt for ID:[1] has been removed
2023-06-23 10:54:27 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-23 10:54:36 DEBUG User is not authenticated yet...
2023-06-23 10:54:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:54:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:54:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=jIkAAQwsP, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=VW8Q4sQS2EM1, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=Et0ygqb, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=O8Mey9b0S, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserMappingService] User model: [User(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=vGOEpECUp0, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 10:54:36 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]]
2023-06-23 10:54:44 DEBUG User is not authenticated yet...
2023-06-23 10:54:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:54:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:54:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:54:44 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-23 10:54:44 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-23 10:54:44 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-23 10:54:50 DEBUG User is not authenticated yet...
2023-06-23 10:54:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:54:50 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:54:50 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:54:50 DEBUG Delete tag : Optional[Tag(id=3, name=c)]
2023-06-23 10:54:50 DEBUG [TagService.deleteById()] Tag for ID:[3] removed
2023-06-23 10:54:50 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-23 10:54:58 DEBUG User is not authenticated yet...
2023-06-23 10:54:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:54:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:54:58 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:55:02 DEBUG User is not authenticated yet...
2023-06-23 10:55:02 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:55:02 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:55:02 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:55:03 DEBUG [GiftCertificateService.update()] GiftCertificateDTO for update: [GiftCertificateDTO(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=assembler)])]
2023-06-23 10:55:16 DEBUG User is not authenticated yet...
2023-06-23 10:55:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 10:55:16 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)]]
2023-06-23 10:55:16 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$jVfPcONCyaTtgJ/whggW1ukIY3B8mYXL/P5Jh9QN882jXu5aFCfge, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-06-23 10:55:21 DEBUG User is not authenticated yet...
2023-06-23 10:55:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:55:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:55:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:55:21 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-23 10:55:21 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-23 10:55:21 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-23 10:55:21 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-23 10:55:21 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-23 10:55:21 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.152699800, lastUpdateDate=2023-06-23T07:55:21.152699800)] has been saved.
2023-06-23 10:55:21 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-23 10:55:21 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.152699800, lastUpdateDate=2023-06-23T07:55:21.152699800)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.152699800, lastUpdateDate=2023-06-23T07:55:21.152699800, tags=[])]
2023-06-23 10:55:29 DEBUG User is not authenticated yet...
2023-06-23 10:55:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:55:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:55:29 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:55:29 DEBUG [GiftCertificateService.update()] GiftCertificateDTO for update: [GiftCertificateDTO(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=assembler)])]
2023-06-23 10:55:29 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:21.153)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:21.153, tags=[])]
2023-06-23 10:55:29 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:21.153, tags=[])], for ID:[5]
2023-06-23 10:55:29 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:21.153, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:21.153)]
2023-06-23 10:55:29 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=assembler)] converted to Tag model: [Tag(id=null, name=assembler)]
2023-06-23 10:55:29 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:29.319184800)] has been saved.
2023-06-23 10:55:29 DEBUG [GiftCertificateService.update()] GiftCertificate with ID:[5] updated.
2023-06-23 10:55:29 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:29.319184800)] converted to DTO: [GiftCertificateDTO(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=2023-06-23T07:55:21.153, lastUpdateDate=2023-06-23T07:55:29.319184800, tags=[])]
2023-06-23 10:55:37 DEBUG FIND_BY_TAGS [[java, kotlin]]
2023-06-23 10:55:37 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:55:37 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 10:55:37 DEBUG [GiftCertificateService.findByTags()] GiftCertificate received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]], for tags:[[java, kotlin]]
2023-06-23 10:55:37 DEBUG [GiftCertificateService.findByTags()] Total records for tags:[3]
2023-06-23 10:55:49 DEBUG User is not authenticated yet...
2023-06-23 10:55:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 10:55:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 10:55:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 10:55:49 DEBUG [GiftCertificateService.deleteById()] GiftCertificate for ID:[2] removed.
2023-06-23 10:55:49 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:03:19 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 11:03:22 DEBUG H2 DataSource created
2023-06-23 11:03:24 DEBUG EntityManagerFactory created
2023-06-23 11:03:29 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 11:03:29 DEBUG JpaTransactionManager created
2023-06-23 11:04:19 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-23 11:04:19 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$2ltFz9q9DjIjaPQegcMA9eK4qYt7PrJWMRW7lk68vDfH9DM.lUkma, userRole=CUSTOMER)}
2023-06-23 11:04:19 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-23 11:04:19 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 11:04:19 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$2ltFz9q9DjIjaPQegcMA9eK4qYt7PrJWMRW7lk68vDfH9DM.lUkma, userRole=CUSTOMER)]
2023-06-23 11:04:19 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODc1MDc0NTksImV4cCI6MTY4NzU5Mzg1OX0.7_wUZgW6uhk1ry3PVy3ZkLKuSSDuQVh3AC_Dp0stSmE, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$2ltFz9q9DjIjaPQegcMA9eK4qYt7PrJWMRW7lk68vDfH9DM.lUkma, userRole=CUSTOMER)] has been saved
2023-06-23 11:05:15 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:05:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:05:15 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:05:15 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:05:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:05:15 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:05:15 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTA3NTE1LCJleHAiOjE2ODc1OTM5MTV9.pKdBZWorajeYYB-0rcxYjlqKkNRSn6sTXeGgRJ-Lyq8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:05:29 DEBUG User is not authenticated yet...
2023-06-23 11:05:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:05:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:05:29 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:05:29 DEBUG [GiftCertificateService.update()] GiftCertificateDTO for update: [GiftCertificateDTO(id=1, name=Java, description=best choice, price=1488.0, duration=5, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=null)])]
2023-06-23 11:05:29 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:05:29 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-23 11:05:29 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-23 11:05:54 DEBUG FIND_BY_TAGS [[null, java, kotlin]]
2023-06-23 11:05:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:05:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:05:54 DEBUG [GiftCertificateService.findByTags()] GiftCertificate received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]], for tags:[[null, java, kotlin]]
2023-06-23 11:05:54 DEBUG [GiftCertificateService.findByTags()] Total records for tags:[3]
2023-06-23 11:06:18 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:06:18 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-23 11:06:25 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-23 11:06:25 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$.6k8rETSZwblsLMTtDzeCeyy5cUV9yUDUQrt0hQomY.aYP7QyRKm2, userRole=CUSTOMER)}
2023-06-23 11:06:25 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-06-23 11:06:25 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-06-23 11:06:25 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$2ltFz9q9DjIjaPQegcMA9eK4qYt7PrJWMRW7lk68vDfH9DM.lUkma, userRole=CUSTOMER)]]
2023-06-23 11:06:36 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-23 11:06:37 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)}
2023-06-23 11:06:37 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@maill.com]
2023-06-23 11:06:37 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:06:37 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)]
2023-06-23 11:06:37 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbGwuY29tIiwiaWF0IjoxNjg3NTA3NTk3LCJleHAiOjE2ODc1OTM5OTd9.EyowhAuDZVS8qp_ChnwYyLISc2xGB66mLkhHKC0EVNE, revoked=false, expired=false)] for user: [User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)] has been saved
2023-06-23 11:06:49 DEBUG User is not authenticated yet...
2023-06-23 11:06:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:06:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:06:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:06:54 DEBUG User is not authenticated yet...
2023-06-23 11:06:54 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:06:54 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)]]
2023-06-23 11:06:54 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:07:08 DEBUG User is not authenticated yet...
2023-06-23 11:07:08 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:07:08 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)]]
2023-06-23 11:07:08 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:07:08 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-23 11:07:08 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-23 11:07:08 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-23 11:07:17 DEBUG User is not authenticated yet...
2023-06-23 11:07:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:07:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)]]
2023-06-23 11:07:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:07:17 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:07:17 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:07:17 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:07:17 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:07:24 DEBUG User is not authenticated yet...
2023-06-23 11:07:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:07:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)]]
2023-06-23 11:07:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:07:24 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-23 11:07:24 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=2, price=255.0, createDate=2023-04-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]
2023-06-23 11:07:24 DEBUG [ReceiptService.findAll()] Receipts received from database: [[ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null), ReceiptDTO(id=2, price=255.0, createDate=2023-04-23T15:58:05.284, userDTO=null)]]
2023-06-23 11:07:46 DEBUG User is not authenticated yet...
2023-06-23 11:07:46 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:07:46 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)]]
2023-06-23 11:07:46 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:08:05 DEBUG User is not authenticated yet...
2023-06-23 11:08:05 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:08:05 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)]]
2023-06-23 11:08:05 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=52, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$r/tdHfXVDZDGqzxdNH9c.OMzHwQDfpR7V99AIJxiWE9I.0LofudRm, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:08:11 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:08:11 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:08:11 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:08:11 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:08:11 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:08:11 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:08:11 DEBUG [AuthenticationService.signIn()] Token: [Token(id=4, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTA3NjkxLCJleHAiOjE2ODc1OTQwOTF9.r2D49fta08lOcYE5X397GXO2nIDPKAJmrnJIxbmWPSU, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:08:23 DEBUG User is not authenticated yet...
2023-06-23 11:08:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:08:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:08:23 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=jIkAAQwsP, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=VW8Q4sQS2EM1, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=Et0ygqb, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=O8Mey9b0S, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserMappingService] User model: [User(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=vGOEpECUp0, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:23 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]]
2023-06-23 11:08:29 DEBUG User is not authenticated yet...
2023-06-23 11:08:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:08:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:08:29 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:08:29 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:08:29 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-23 11:08:29 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:08:29 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-23 11:08:29 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:08:29 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-23 11:08:29 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-23 11:08:29 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-23 11:08:29 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-23 11:08:29 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-23 11:08:29 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-23T08:08:29.945407500)]
2023-06-23 11:08:29 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-23T08:08:29.945407500)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-23T08:08:29.945407500, userDTO=null)]
2023-06-23 11:08:41 DEBUG User is not authenticated yet...
2023-06-23 11:08:41 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:08:41 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:08:41 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:08:41 DEBUG Delete receipt : Optional[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)]
2023-06-23 11:08:41 DEBUG Receipt for removal Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)
2023-06-23 11:08:41 DEBUG [ReceiptService.deleteById()] Receipt for ID:[1] has been removed
2023-06-23 11:08:41 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=210.0, createDate=2023-03-23T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=210.0, createDate=2023-03-23T15:58:05.284, userDTO=null)]
2023-06-23 11:08:53 DEBUG User is not authenticated yet...
2023-06-23 11:08:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:08:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:08:53 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:08:53 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=new tag)] converted to Tag model: [Tag(id=null, name=new tag)]
2023-06-23 11:08:53 DEBUG [TagJPARepository.save()] Tag with id:[7] has been saved.
2023-06-23 11:08:53 DEBUG [TagMappingService] Tag model: [Tag(id=7, name=new tag)] converted to TagDTO: [TagDTO(id=7, name=new tag)]
2023-06-23 11:09:02 DEBUG User is not authenticated yet...
2023-06-23 11:09:02 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:09:02 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:09:02 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:09:02 DEBUG Delete tag : Optional[Tag(id=3, name=c)]
2023-06-23 11:09:02 DEBUG [TagService.deleteById()] Tag for ID:[3] removed
2023-06-23 11:09:02 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-23 11:09:11 DEBUG User is not authenticated yet...
2023-06-23 11:09:11 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:09:11 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:09:11 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:09:15 DEBUG User is not authenticated yet...
2023-06-23 11:09:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:09:15 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:09:15 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:09:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-23 11:09:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-23 11:09:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-23 11:09:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-23 11:09:15 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-23 11:09:15 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.734542100, lastUpdateDate=2023-06-23T08:09:15.734542100)] has been saved.
2023-06-23 11:09:15 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-23 11:09:15 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.734542100, lastUpdateDate=2023-06-23T08:09:15.734542100)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.734542100, lastUpdateDate=2023-06-23T08:09:15.734542100, tags=[])]
2023-06-23 11:09:28 DEBUG User is not authenticated yet...
2023-06-23 11:09:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:09:28 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:09:28 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:09:28 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-23 11:09:28 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-23 11:09:37 DEBUG User is not authenticated yet...
2023-06-23 11:09:37 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:09:37 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:09:37 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:09:37 DEBUG [GiftCertificateService.deleteById()] GiftCertificate for ID:[2] removed.
2023-06-23 11:09:37 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:09:45 DEBUG User is not authenticated yet...
2023-06-23 11:09:45 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:09:45 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:09:45 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:09:45 DEBUG [GiftCertificateService.update()] GiftCertificateDTO for update: [GiftCertificateDTO(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=assembler)])]
2023-06-23 11:09:45 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:15.735)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:15.735, tags=[])]
2023-06-23 11:09:45 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:15.735, tags=[])], for ID:[5]
2023-06-23 11:09:45 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:15.735, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:15.735)]
2023-06-23 11:09:45 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=assembler)] converted to Tag model: [Tag(id=null, name=assembler)]
2023-06-23 11:09:45 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:45.128785300)] has been saved.
2023-06-23 11:09:45 DEBUG [GiftCertificateService.update()] GiftCertificate with ID:[5] updated.
2023-06-23 11:09:45 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:45.128785300)] converted to DTO: [GiftCertificateDTO(id=5, name=Big d, description=best choice, price=1488.0, duration=5, createDate=2023-06-23T08:09:15.735, lastUpdateDate=2023-06-23T08:09:45.128785300, tags=[])]
2023-06-23 11:10:01 DEBUG User is not authenticated yet...
2023-06-23 11:10:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:10:01 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:10:01 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:10:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:10:01 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:11:16 DEBUG User is not authenticated yet...
2023-06-23 11:11:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:11:16 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:11:16 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:11:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:11:16 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:12:40 DEBUG User is not authenticated yet...
2023-06-23 11:12:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:12:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:12:40 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:12:40 DEBUG Delete tag : Optional.empty
2023-06-23 11:12:55 DEBUG User is not authenticated yet...
2023-06-23 11:12:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:12:55 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:12:55 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:13:12 DEBUG User is not authenticated yet...
2023-06-23 11:13:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:13:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:13:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:13:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:13:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:17 DEBUG User is not authenticated yet...
2023-06-23 11:20:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:20:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:20:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:20:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:24 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:20:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:20:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:20:25 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:20:25 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:25 DEBUG [AuthenticationService.signIn()] Token: [Token(id=9, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTA4NDI1LCJleHAiOjE2ODc1OTQ4MjV9.WyS-bOPDw3Mumr0JMElGR8eTJfSVtHIEv9yCQpQw63E, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:20:37 DEBUG User is not authenticated yet...
2023-06-23 11:20:37 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:20:37 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:37 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:20:37 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:20:37 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:56 DEBUG User is not authenticated yet...
2023-06-23 11:20:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:20:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:20:56 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:21:04 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:21:04 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:21:04 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:21:04 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:21:04 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:21:04 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:21:04 DEBUG [AuthenticationService.signIn()] Token: [Token(id=11, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTA4NDY0LCJleHAiOjE2ODc1OTQ4NjR9.4yB-gFHRUMvdoYHErvQ0rQpFcJMg1Knd3imzbzvI3I8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:26:46 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 11:26:49 DEBUG H2 DataSource created
2023-06-23 11:26:49 DEBUG EntityManagerFactory created
2023-06-23 11:26:53 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 11:26:54 DEBUG JpaTransactionManager created
2023-06-23 11:27:02 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:27:02 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:27:03 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:27:03 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:27:03 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:27:03 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:30:45 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 11:30:47 DEBUG H2 DataSource created
2023-06-23 11:30:48 DEBUG EntityManagerFactory created
2023-06-23 11:30:52 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 11:30:53 DEBUG JpaTransactionManager created
2023-06-23 11:30:58 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:30:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:30:59 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:30:59 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:30:59 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:30:59 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:31:00 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJBdXRob3JpdGllcyI6W3siYXV0aG9yaXR5IjoiQURNSU4ifV0sImlhdCI6MTY4NzUwOTA2MCwiZXhwIjoxNjg3NTk1NDYwfQ.LMN_b4GC0__4we8ljiIY2PolCMBiN3CX-l0_H5z3cXg, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:33:29 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 11:33:32 DEBUG H2 DataSource created
2023-06-23 11:33:33 DEBUG EntityManagerFactory created
2023-06-23 11:33:38 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 11:33:39 DEBUG JpaTransactionManager created
2023-06-23 11:33:55 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:33:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:33:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:33:56 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:33:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:33:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:33:56 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTA5MjM2LCJleHAiOjE2ODc1OTU2MzZ9.9XfCdZrJHtP3aB5Dky84TTLm_SeP-AYvTSwaPyyHFE8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:47:29 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-23 11:47:31 DEBUG H2 DataSource created
2023-06-23 11:47:32 DEBUG EntityManagerFactory created
2023-06-23 11:47:36 DEBUG Filter 'authTokenFilter' configured for use
2023-06-23 11:47:36 DEBUG JpaTransactionManager created
2023-06-23 11:52:20 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:52:20 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:52:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:52:21 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:52:21 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:52:21 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:52:21 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTEwMzQxLCJleHAiOjE2ODc1OTY3NDF9.3jD5H0iAIG97iFb0LlKA8z4VAjyzm8wuScYSn1wEzvk, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:52:26 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.aca.uk, password=123456789)}
2023-06-23 11:52:26 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.aca.uk}
2023-06-23 11:52:33 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-23 11:52:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:52:33 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:52:33 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:52:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:52:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:52:34 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3NTEwMzU0LCJleHAiOjE2ODc1OTY3NTR9.qAyE55lSEbeTaCRAQDJGSPdfmoZ7bapHmplXuVsGx7o, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-23 11:52:42 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-23 11:52:43 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SqMsv/fCxRL5Eb5ydtBXae586tqIZe2uZkocIbV/TCa3dGoTmZftG, userRole=CUSTOMER)}
2023-06-23 11:52:43 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@maill.com]
2023-06-23 11:52:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:52:43 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SqMsv/fCxRL5Eb5ydtBXae586tqIZe2uZkocIbV/TCa3dGoTmZftG, userRole=CUSTOMER)]
2023-06-23 11:52:43 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbGwuY29tIiwiaWF0IjoxNjg3NTEwMzYzLCJleHAiOjE2ODc1OTY3NjN9.-Tb4CjkTnBqX9zbkHT2Omygm4N1zR5AslN8yCejQo2g, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SqMsv/fCxRL5Eb5ydtBXae586tqIZe2uZkocIbV/TCa3dGoTmZftG, userRole=CUSTOMER)] has been saved
2023-06-23 11:52:51 DEBUG User is not authenticated yet...
2023-06-23 11:52:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:52:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:52:51 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:52:51 DEBUG Delete tag : Optional[Tag(id=3, name=c)]
2023-06-23 11:52:51 DEBUG [TagService.deleteById()] Tag for ID:[3] removed
2023-06-23 11:52:51 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-23 11:52:58 DEBUG User is not authenticated yet...
2023-06-23 11:52:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:52:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:52:58 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:53:03 DEBUG User is not authenticated yet...
2023-06-23 11:53:03 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-23 11:53:03 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-23 11:53:03 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-23 11:53:03 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-23 11:53:03 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-23 11:53:03 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:53:03 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-23 11:53:03 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-23 11:53:03 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-23 11:53:03 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-23 11:53:03 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-23 11:53:03 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-23 11:53:03 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-23 11:53:03 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-23T08:53:03.124659800)]
2023-06-23 11:53:03 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-23T08:53:03.124659800)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-23T08:53:03.124659800, userDTO=null)]
2023-06-23 11:53:24 DEBUG User is not authenticated yet...
2023-06-23 11:53:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:53:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SqMsv/fCxRL5Eb5ydtBXae586tqIZe2uZkocIbV/TCa3dGoTmZftG, userRole=CUSTOMER)]]
2023-06-23 11:53:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SqMsv/fCxRL5Eb5ydtBXae586tqIZe2uZkocIbV/TCa3dGoTmZftG, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:53:32 DEBUG User is not authenticated yet...
2023-06-23 11:53:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-23 11:53:32 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SqMsv/fCxRL5Eb5ydtBXae586tqIZe2uZkocIbV/TCa3dGoTmZftG, userRole=CUSTOMER)]]
2023-06-23 11:53:32 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SqMsv/fCxRL5Eb5ydtBXae586tqIZe2uZkocIbV/TCa3dGoTmZftG, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-23 11:53:32 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-23 11:53:32 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-23 11:53:32 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-27 08:01:23 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 08:01:28 DEBUG MySQL DataSource with HikariCP created
2023-06-27 08:01:29 DEBUG Schema creation script executed
2023-06-27 08:01:32 DEBUG Schema initialization script executed
2023-06-27 08:01:32 DEBUG EntityManagerFactory created
2023-06-27 08:01:37 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 08:01:38 DEBUG JpaTransactionManager created
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-06-27 08:01:50 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032)] converted to DTO: [GiftCertificateDTO(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012)] converted to DTO: [GiftCertificateDTO(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315)] converted to DTO: [GiftCertificateDTO(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026)] converted to DTO: [GiftCertificateDTO(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009)] converted to DTO: [GiftCertificateDTO(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410)] converted to DTO: [GiftCertificateDTO(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559)] converted to DTO: [GiftCertificateDTO(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397)] converted to DTO: [GiftCertificateDTO(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153)] converted to DTO: [GiftCertificateDTO(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008)] converted to DTO: [GiftCertificateDTO(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116)] converted to DTO: [GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350)] converted to DTO: [GiftCertificateDTO(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020)] converted to DTO: [GiftCertificateDTO(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889)] converted to DTO: [GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247)] converted to DTO: [GiftCertificateDTO(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779)] converted to DTO: [GiftCertificateDTO(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782)] converted to DTO: [GiftCertificateDTO(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447)] converted to DTO: [GiftCertificateDTO(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105)] converted to DTO: [GiftCertificateDTO(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548)] converted to DTO: [GiftCertificateDTO(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548, tags=[])]
2023-06-27 08:02:04 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032, tags=[]), GiftCertificateDTO(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012, tags=[]), GiftCertificateDTO(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315, tags=[]), GiftCertificateDTO(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026, tags=[]), GiftCertificateDTO(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009, tags=[]), GiftCertificateDTO(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410, tags=[]), GiftCertificateDTO(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559, tags=[]), GiftCertificateDTO(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397, tags=[]), GiftCertificateDTO(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153, tags=[]), GiftCertificateDTO(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008, tags=[]), GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[]), GiftCertificateDTO(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350, tags=[]), GiftCertificateDTO(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020, tags=[]), GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[]), GiftCertificateDTO(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247, tags=[]), GiftCertificateDTO(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779, tags=[]), GiftCertificateDTO(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782, tags=[]), GiftCertificateDTO(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447, tags=[]), GiftCertificateDTO(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105, tags=[]), GiftCertificateDTO(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548, tags=[])]]
2023-06-27 08:16:57 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 08:17:01 DEBUG MySQL DataSource with HikariCP created
2023-06-27 08:17:02 DEBUG Schema creation script executed
2023-06-27 08:17:05 DEBUG Schema initialization script executed
2023-06-27 08:17:05 DEBUG EntityManagerFactory created
2023-06-27 08:17:09 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 08:17:09 DEBUG JpaTransactionManager created
2023-06-27 08:17:33 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 08:17:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 08:17:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 08:17:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 08:17:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 08:17:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 08:17:35 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODQzMDU0LCJleHAiOjE2ODc5Mjk0NTR9.DQqP2KQLVww70nOTTXTlkC21UtDAXlZLDh0jhzN_LTs, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 08:17:51 DEBUG User is not authenticated yet...
2023-06-27 08:17:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 08:17:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 08:17:51 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 08:17:51 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-06-27 08:17:51 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-06-27 08:17:51 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-06-27 08:18:09 DEBUG User is not authenticated yet...
2023-06-27 08:18:09 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 08:18:09 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 08:18:09 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 08:18:09 DEBUG Delete tag : Optional[Tag(id=3, name=Ahmed2013)]
2023-06-27 08:18:09 DEBUG [TagService.deleteById()] Tag for ID:[3] removed
2023-06-27 08:18:09 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=Ahmed2013)] converted to TagDTO: [TagDTO(id=3, name=Ahmed2013)]
2023-06-27 09:14:45 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-27 09:14:45 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)}
2023-06-27 09:14:45 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@maill.com]
2023-06-27 09:14:45 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 09:14:45 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)]
2023-06-27 09:14:45 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbGwuY29tIiwiaWF0IjoxNjg3ODQ2NDg1LCJleHAiOjE2ODc5MzI4ODV9.Hld1ftR_b8b72HFgrhT1twic7SSy5Xh873sJSbPkR0E, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)] has been saved
2023-06-27 09:15:07 DEBUG User is not authenticated yet...
2023-06-27 09:15:07 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 09:15:07 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)]]
2023-06-27 09:15:07 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-27 09:15:17 DEBUG User is not authenticated yet...
2023-06-27 09:15:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 09:15:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 09:15:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 09:15:17 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-06-27 09:15:17 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-06-27 09:15:17 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-06-27 09:15:23 DEBUG User is not authenticated yet...
2023-06-27 09:15:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 09:15:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)]]
2023-06-27 09:15:23 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-27 09:15:23 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-06-27 09:15:23 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-06-27 09:15:23 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-06-27 09:15:35 DEBUG User is not authenticated yet...
2023-06-27 09:15:35 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 09:15:35 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)]]
2023-06-27 09:15:35 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-27 09:15:44 DEBUG User is not authenticated yet...
2023-06-27 09:15:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 09:15:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)]]
2023-06-27 09:15:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FeshI2PGJKg51i3/i7m5Vub9zKtauKJiZKKQqOWEZr3qwSSaVhFKa, userRole=CUSTOMER)] for eMail:[jBloch@maill.com} has been received.
2023-06-27 09:15:44 DEBUG [UserMappingService] User model: [User(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=null, userRole=ADMIN, receipts=[])]
2023-06-27 09:15:44 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=null, userRole=ADMIN, receipts=[])], for ID:[2]
2023-06-27 09:15:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-06-27 09:15:44 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])], for ID:[1]
2023-06-27 09:15:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-06-27 09:15:44 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-06-27 09:15:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-06-27 09:15:44 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])], for ID:[5]
2023-06-27 09:15:44 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)]
2023-06-27 09:15:44 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)]
2023-06-27 09:15:44 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)]
2023-06-27 09:15:44 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=null, userRole=ADMIN)]
2023-06-27 09:15:44 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=2327.0, createDate=null, userDTO=UserDTO(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=null, userRole=ADMIN, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=2327.0, createDate=null)]
2023-06-27 09:15:44 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=1001, price=2327.0, createDate=2023-06-27T06:15:44.578494200)]
2023-06-27 09:15:44 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1001, price=2327.0, createDate=2023-06-27T06:15:44.578494200)] converted to ReceiptDTO: [ReceiptDTO(id=1001, price=2327.0, createDate=2023-06-27T06:15:44.578494200, userDTO=null)]
2023-06-27 12:25:15 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 12:25:19 DEBUG MySQL DataSource with HikariCP created
2023-06-27 12:25:20 DEBUG Schema creation script executed
2023-06-27 12:25:23 DEBUG Schema initialization script executed
2023-06-27 12:25:23 DEBUG EntityManagerFactory created
2023-06-27 12:25:27 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 12:25:27 DEBUG JpaTransactionManager created
2023-06-27 12:27:04 DEBUG User is not authenticated yet...
2023-06-27 12:27:05 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 12:27:11 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 12:27:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:27:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:27:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:27:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:27:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:27:12 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODU4MDMyLCJleHAiOjE2ODc5NDQ0MzJ9.WMKKgTgqqaIaShTRaTaqWrXU_RxERjLJHMXXBYvn8yk, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 12:27:39 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 12:27:39 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:27:39 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:27:39 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:27:39 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:27:39 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:27:39 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODU4MDU5LCJleHAiOjE2ODc5NDQ0NTl9.3ULfGIyA_9GQN7JAvxPVYG8rR70XAF7mbTIA9XHDvo8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 12:27:55 DEBUG User is not authenticated yet...
2023-06-27 12:27:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 12:28:10 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 12:28:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:28:10 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:28:10 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:28:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:28:10 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:28:10 DEBUG [AuthenticationService.signIn()] Token: [Token(id=3, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODU4MDkwLCJleHAiOjE2ODc5NDQ0OTB9.lUir-JO0bBJoMgR1IluvvnP6JLAOUwPrD0-sR_flNmo, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 12:28:22 DEBUG User is not authenticated yet...
2023-06-27 12:28:22 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:28:22 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:28:22 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:28:22 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-06-27 12:28:22 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-06-27 12:28:22 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-06-27 12:28:33 DEBUG User is not authenticated yet...
2023-06-27 12:28:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:28:33 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:28:33 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:28:48 DEBUG User is not authenticated yet...
2023-06-27 12:28:48 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:28:48 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:28:48 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:28:48 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:28:48 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:29:00 DEBUG User is not authenticated yet...
2023-06-27 12:29:00 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:29:00 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:29:00 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:29:00 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-06-27 12:29:00 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-06-27 12:29:00 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-06-27 12:29:15 DEBUG User is not authenticated yet...
2023-06-27 12:29:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:29:15 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:29:15 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:29:32 DEBUG User is not authenticated yet...
2023-06-27 12:29:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:29:32 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:29:32 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:29:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:29:32 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:29:46 DEBUG User is not authenticated yet...
2023-06-27 12:29:46 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:29:46 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:29:46 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:29:51 DEBUG User is not authenticated yet...
2023-06-27 12:29:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:29:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:29:51 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 12:29:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 12:29:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 12:54:36 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 12:54:39 DEBUG MySQL DataSource with HikariCP created
2023-06-27 12:54:41 DEBUG Schema creation script executed
2023-06-27 12:54:43 DEBUG Schema initialization script executed
2023-06-27 12:54:44 DEBUG EntityManagerFactory created
2023-06-27 12:54:48 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 12:54:49 DEBUG JpaTransactionManager created
2023-06-27 12:55:32 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=null)}
2023-06-27 12:55:32 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$fGuTwRq9tlSjwhI4XMWU7.iJWu7/B18qeucow7oaBwbRYPqIASUre, userRole=CUSTOMER)}
2023-06-27 12:55:32 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@maill.com]
2023-06-27 12:55:32 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 12:55:33 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$fGuTwRq9tlSjwhI4XMWU7.iJWu7/B18qeucow7oaBwbRYPqIASUre, userRole=CUSTOMER)]
2023-06-27 12:55:33 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbGwuY29tIiwiaWF0IjoxNjg3ODU5NzMzLCJleHAiOjE2ODc5NDYxMzN9.1ezcmYbPw-Jf7HwzI6hFbvhygK6DMvKlT7A9pHDTr1g, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@maill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$fGuTwRq9tlSjwhI4XMWU7.iJWu7/B18qeucow7oaBwbRYPqIASUre, userRole=CUSTOMER)] has been saved
2023-06-27 12:58:59 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 12:59:04 DEBUG MySQL DataSource with HikariCP created
2023-06-27 12:59:05 DEBUG Schema creation script executed
2023-06-27 12:59:08 DEBUG Schema initialization script executed
2023-06-27 12:59:08 DEBUG EntityManagerFactory created
2023-06-27 12:59:13 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 12:59:13 DEBUG JpaTransactionManager created
2023-06-27 13:02:25 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 13:02:28 DEBUG MySQL DataSource with HikariCP created
2023-06-27 13:02:30 DEBUG Schema creation script executed
2023-06-27 13:02:32 DEBUG Schema initialization script executed
2023-06-27 13:02:32 DEBUG EntityManagerFactory created
2023-06-27 13:02:36 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 13:02:36 DEBUG JpaTransactionManager created
2023-06-27 13:08:51 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 13:08:55 DEBUG MySQL DataSource with HikariCP created
2023-06-27 13:08:56 DEBUG Schema creation script executed
2023-06-27 13:08:58 DEBUG Schema initialization script executed
2023-06-27 13:08:58 DEBUG EntityManagerFactory created
2023-06-27 13:09:02 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 13:09:03 DEBUG JpaTransactionManager created
2023-06-27 13:12:22 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 13:12:25 DEBUG MySQL DataSource with HikariCP created
2023-06-27 13:12:26 DEBUG Schema creation script executed
2023-06-27 13:12:29 DEBUG Schema initialization script executed
2023-06-27 13:12:29 DEBUG EntityManagerFactory created
2023-06-27 13:12:33 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 13:12:33 DEBUG JpaTransactionManager created
2023-06-27 13:48:07 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 13:48:10 DEBUG MySQL DataSource with HikariCP created
2023-06-27 13:48:11 DEBUG Schema creation script executed
2023-06-27 13:48:14 DEBUG Schema initialization script executed
2023-06-27 13:48:14 DEBUG EntityManagerFactory created
2023-06-27 13:48:18 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 13:48:18 DEBUG JpaTransactionManager created
2023-06-27 13:48:28 DEBUG User is not authenticated yet...
2023-06-27 13:48:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 13:56:31 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 13:56:33 DEBUG H2 DataSource created
2023-06-27 13:56:34 DEBUG EntityManagerFactory created
2023-06-27 13:56:38 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 13:56:38 DEBUG JpaTransactionManager created
2023-06-27 13:57:02 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 13:57:04 DEBUG H2 DataSource created
2023-06-27 13:57:05 DEBUG EntityManagerFactory created
2023-06-27 13:57:09 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 13:57:09 DEBUG JpaTransactionManager created
2023-06-27 13:58:41 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-27 13:58:41 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$dovk7H3URo9toO9VxyShrOdxFK6RObJFJZqHsUiFG9gZ8.4VDKjaG, userRole=CUSTOMER)}
2023-06-27 13:58:41 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-06-27 13:58:41 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-27 13:58:42 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$dovk7H3URo9toO9VxyShrOdxFK6RObJFJZqHsUiFG9gZ8.4VDKjaG, userRole=CUSTOMER)]
2023-06-27 13:58:42 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4Nzg2MzUyMiwiZXhwIjoxNjg3OTQ5OTIyfQ.Ycoolp4XEBVIgwg51On-e8iqBFC1nUPseDkKKr-qQEA, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$dovk7H3URo9toO9VxyShrOdxFK6RObJFJZqHsUiFG9gZ8.4VDKjaG, userRole=CUSTOMER)] has been saved
2023-06-27 13:58:49 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 13:58:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 13:58:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 13:58:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 13:58:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 13:58:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 13:58:50 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODYzNTI5LCJleHAiOjE2ODc5NDk5Mjl9.VOISyHZHqlnec3encJVod7wSDpY5OuQ2EJ7KoR_l0uE, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 13:58:53 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 13:58:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 13:58:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 13:58:53 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 13:58:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 13:58:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 13:58:53 DEBUG [AuthenticationService.signIn()] Token: [Token(id=3, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODYzNTMzLCJleHAiOjE2ODc5NDk5MzN9.a1Adjs64xJC9FjBNUCfkte6uu55Ib8Ekf9Aoy6uU1qM, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 13:59:53 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=12345678)}
2023-06-27 13:59:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 13:59:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 13:59:53 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:00:01 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 14:00:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:00:01 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:00:01 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:00:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:00:01 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:00:01 DEBUG [AuthenticationService.signIn()] Token: [Token(id=4, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODYzNjAxLCJleHAiOjE2ODc5NTAwMDF9.jTA57z06Pa52SFLTyBjDHaiXknc1qKSKFLM7OH2Yl28, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 14:00:59 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 14:01:03 DEBUG H2 DataSource created
2023-06-27 14:01:03 DEBUG EntityManagerFactory created
2023-06-27 14:01:08 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 14:01:08 DEBUG JpaTransactionManager created
2023-06-27 14:01:29 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 14:01:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:01:30 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:01:30 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:01:30 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:01:30 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:01:30 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODYzNjkwLCJleHAiOjE2ODc5NTAwOTB9.vlixDUIcYDyHBLX0hz2y0kdWGYl7DiMKzxPqGqnEQPw, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 14:01:55 DEBUG User is not authenticated yet...
2023-06-27 14:01:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:01:55 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:01:55 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:02:17 DEBUG User is not authenticated yet...
2023-06-27 14:02:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:02:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:02:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:02:27 DEBUG User is not authenticated yet...
2023-06-27 14:02:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:02:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:02:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:02:27 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-27 14:02:27 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-27 14:02:27 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-27 14:02:27 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-27 14:02:27 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-27 14:02:27 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.648940900, lastUpdateDate=2023-06-27T11:02:27.648940900)] has been saved.
2023-06-27 14:02:27 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-27 14:02:27 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.648940900, lastUpdateDate=2023-06-27T11:02:27.648940900)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.648940900, lastUpdateDate=2023-06-27T11:02:27.648940900, tags=[])]
2023-06-27 14:02:34 DEBUG User is not authenticated yet...
2023-06-27 14:02:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:02:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:02:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:04:22 DEBUG User is not authenticated yet...
2023-06-27 14:04:22 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:04:22 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:04:22 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:04:23 DEBUG [GiftCertificateService.update()] GiftCertificateDTO for update: [GiftCertificateDTO(id=5, name=Big d, description=null, price=1488.0, duration=5, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=assembler)])]
2023-06-27 14:04:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:02:27.649)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:02:27.649, tags=[])]
2023-06-27 14:04:23 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:02:27.649, tags=[])], for ID:[5]
2023-06-27 14:04:23 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:02:27.649, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:02:27.649)]
2023-06-27 14:04:23 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=assembler)] converted to Tag model: [Tag(id=null, name=assembler)]
2023-06-27 14:04:23 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=5, name=Big d, description=specific, price=1488.0, duration=5, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:04:23.055488)] has been saved.
2023-06-27 14:04:23 DEBUG [GiftCertificateService.update()] GiftCertificate with ID:[5] updated.
2023-06-27 14:04:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Big d, description=specific, price=1488.0, duration=5, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:04:23.055488)] converted to DTO: [GiftCertificateDTO(id=5, name=Big d, description=specific, price=1488.0, duration=5, createDate=2023-06-27T11:02:27.649, lastUpdateDate=2023-06-27T11:04:23.055488, tags=[])]
2023-06-27 14:05:19 DEBUG User is not authenticated yet...
2023-06-27 14:05:19 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 14:05:28 DEBUG User is not authenticated yet...
2023-06-27 14:05:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:05:28 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:05:28 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:05:34 DEBUG User is not authenticated yet...
2023-06-27 14:05:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:05:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:05:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:05:34 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-27 14:05:34 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-27 14:07:37 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 14:07:40 DEBUG H2 DataSource created
2023-06-27 14:07:40 DEBUG EntityManagerFactory created
2023-06-27 14:07:44 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 14:07:45 DEBUG JpaTransactionManager created
2023-06-27 14:07:50 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 14:07:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:07:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:07:51 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:07:51 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:07:51 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:07:51 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODY0MDcxLCJleHAiOjE2ODc5NTA0NzF9.OdF30st10IcuctzGL-yeckVo1gBDNd11dmiwl4vKAn4, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 14:08:10 DEBUG User is not authenticated yet...
2023-06-27 14:08:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:08:10 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:08:10 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:08:16 DEBUG User is not authenticated yet...
2023-06-27 14:08:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:08:16 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:08:16 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:08:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-06-27 14:08:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-06-27 14:08:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-06-27 14:08:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-06-27 14:08:16 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-06-27 14:08:16 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097415600, lastUpdateDate=2023-06-27T11:08:16.097415600)] has been saved.
2023-06-27 14:08:16 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-06-27 14:08:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097415600, lastUpdateDate=2023-06-27T11:08:16.097415600)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097415600, lastUpdateDate=2023-06-27T11:08:16.097415600, tags=[])]
2023-06-27 14:11:01 DEBUG User is not authenticated yet...
2023-06-27 14:11:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:11:01 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:11:01 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:11:12 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 14:11:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:11:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:11:12 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:11:12 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:11:12 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:11:12 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODY0MjcyLCJleHAiOjE2ODc5NTA2NzJ9.BTPoPkUM2VEb3Pt8CEmEVl7pX05Ep2zvlwypJmS_oTE, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 14:11:24 DEBUG User is not authenticated yet...
2023-06-27 14:11:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:11:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:11:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:11:24 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-27 14:11:24 DEBUG [UserService.findById()] User received from database: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])], for ID:[2]
2023-06-27 14:11:24 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-27 14:11:24 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-27 14:11:24 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-27 14:11:24 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-27 14:11:24 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097, tags=[])]
2023-06-27 14:11:24 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097, tags=[])], for ID:[5]
2023-06-27 14:11:24 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-27 14:11:24 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097)]
2023-06-27 14:11:24 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-27 14:11:24 DEBUG [UserMappingService] UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER)]
2023-06-27 14:11:24 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=565.0, createDate=null, userDTO=UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=565.0, createDate=null)]
2023-06-27 14:11:24 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=565.0, createDate=2023-06-27T11:11:24.867583800)]
2023-06-27 14:11:24 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=565.0, createDate=2023-06-27T11:11:24.867583800)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=565.0, createDate=2023-06-27T11:11:24.867583800, userDTO=null)]
2023-06-27 14:11:41 DEBUG User is not authenticated yet...
2023-06-27 14:11:41 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:11:41 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:11:41 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:11:41 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-27 14:11:41 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-27 14:11:41 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097, tags=[])]
2023-06-27 14:11:41 DEBUG [GifCertificateService.findAllByReceipt()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-06-27T11:08:16.097, lastUpdateDate=2023-06-27T11:08:16.097, tags=[])]], for Receipt.ID: [7]
2023-06-27 14:11:41 DEBUG [GifCertificateService.findAllByReceipt()] Total records for receipt.ID:[3]
2023-06-27 14:35:21 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 14:35:24 DEBUG H2 DataSource created
2023-06-27 14:35:24 DEBUG EntityManagerFactory created
2023-06-27 14:35:28 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 14:35:29 DEBUG JpaTransactionManager created
2023-06-27 14:35:38 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-27 14:35:38 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)}
2023-06-27 14:35:38 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-06-27 14:35:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-27 14:35:39 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)]
2023-06-27 14:35:39 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4Nzg2NTczOSwiZXhwIjoxNjg3OTUyMTM5fQ.m-VzP4lmnuKk5UUEpVGauiSHu4SBxwocLaPtYepI1ac, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)] has been saved
2023-06-27 14:36:43 DEBUG User is not authenticated yet...
2023-06-27 14:36:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-27 14:36:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)]]
2023-06-27 14:36:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-06-27 14:36:43 DEBUG [UserMappingService] User model: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-27 14:37:02 DEBUG User is not authenticated yet...
2023-06-27 14:37:02 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-27 14:37:02 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)]]
2023-06-27 14:37:02 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-06-27 14:37:02 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-27 14:37:02 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)]]
2023-06-27 14:37:02 DEBUG [UserMappingService] User model: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-27 14:37:02 DEBUG [UserService.findByEmail()] User received from database: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])], for eMail:[jBloch@msaill.com]
2023-06-27 14:37:02 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-27 14:37:02 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-27 14:37:02 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-27 14:37:02 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-27 14:37:02 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-27 14:37:02 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-27 14:37:02 DEBUG [UserMappingService] UserDTO: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER)]
2023-06-27 14:37:02 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-27 14:37:02 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-27T11:37:02.437539100)]
2023-06-27 14:37:02 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-27T11:37:02.437539100)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-27T11:37:02.437539100, userDTO=null)]
2023-06-27 14:37:22 DEBUG User is not authenticated yet...
2023-06-27 14:37:22 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-27 14:37:22 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)]]
2023-06-27 14:37:22 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-06-27 14:37:22 DEBUG [UserMappingService] User model: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$V9nZYb6BwDUNey/wAuLdkuzlRe2B0YptwMh4cchEyj1R7eupmFuD2, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-27 14:37:22 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[7]
2023-06-27 14:44:58 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-27 14:45:02 DEBUG H2 DataSource created
2023-06-27 14:45:03 DEBUG EntityManagerFactory created
2023-06-27 14:45:07 DEBUG Filter 'authTokenFilter' configured for use
2023-06-27 14:45:07 DEBUG JpaTransactionManager created
2023-06-27 14:47:22 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-27 14:47:22 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:47:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:47:23 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:47:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:47:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:47:23 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg3ODY2NDQzLCJleHAiOjE2ODc5NTI4NDN9.Q0i0Ms4eYr3_ZTIatNrmxvT5VUUkgLCQX40PakQOZXk, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-27 14:47:33 DEBUG User is not authenticated yet...
2023-06-27 14:47:33 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@maill.com}
2023-06-27 14:47:36 DEBUG User is not authenticated yet...
2023-06-27 14:47:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:47:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:47:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-27 14:47:36 DEBUG Delete tag : Optional[Tag(id=3, name=c)]
2023-06-27 14:47:37 DEBUG [TagService.deleteById()] Tag for ID:[3] removed
2023-06-27 14:47:37 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-27 14:47:56 DEBUG User is not authenticated yet...
2023-06-27 14:47:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-27 14:47:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-27 14:47:56 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-29 12:17:32 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-06-29 12:17:42 DEBUG H2 DataSource created
2023-06-29 12:17:45 DEBUG EntityManagerFactory created
2023-06-29 12:17:59 DEBUG Filter 'authTokenFilter' configured for use
2023-06-29 12:18:01 DEBUG JpaTransactionManager created
2023-06-29 12:20:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-29 12:20:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-29 12:20:59 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-06-29 12:20:59 DEBUG [GiftCertificateService.findByName()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]], for name:[m]
2023-06-29 12:20:59 DEBUG [GiftCertificateService.findByName()] Total records for name:[3]
2023-06-29 12:21:24 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-06-29 12:21:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-29 12:21:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-29 12:21:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-29 12:21:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-29 12:21:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-29 12:21:24 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4MDMwNDg0LCJleHAiOjE2ODgxMTY4ODR9._Z4RkbONdhU7i9KLyWPDNhI3uASTAJ0riZp_1Kx5Ew8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-06-29 12:21:36 DEBUG User is not authenticated yet...
2023-06-29 12:21:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-29 12:21:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-29 12:21:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-29 12:21:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-29 12:21:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-29 12:21:36 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-06-29 12:21:36 DEBUG [UserService.findByEmail()] User received from database: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])], for eMail:[ebutchard0@ox.ac.uk]
2023-06-29 12:21:36 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-29 12:21:36 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-29 12:21:36 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-29 12:21:36 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-29 12:21:36 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-29 12:21:36 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-29 12:21:36 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN)]
2023-06-29 12:21:36 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-29 12:21:36 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=7, price=510.0, createDate=2023-06-29T09:21:36.133057400)]
2023-06-29 12:21:36 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=7, price=510.0, createDate=2023-06-29T09:21:36.133057400)] converted to ReceiptDTO: [ReceiptDTO(id=7, price=510.0, createDate=2023-06-29T09:21:36.133057400, userDTO=null)]
2023-06-29 12:21:48 DEBUG User is not authenticated yet...
2023-06-29 12:21:48 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-06-29 12:21:48 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-06-29 12:21:48 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-06-29 12:21:48 DEBUG Delete tag : Optional[Tag(id=3, name=c)]
2023-06-29 12:21:48 DEBUG [TagService.deleteById()] Tag for ID:[3] removed
2023-06-29 12:21:48 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-06-29 12:21:53 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-06-29 12:21:53 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)}
2023-06-29 12:21:53 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-06-29 12:21:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-29 12:21:53 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)]
2023-06-29 12:21:53 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4ODAzMDUxMywiZXhwIjoxNjg4MTE2OTEzfQ.JBsUFWJQ43IoICPIIa0t80MKnYawup32JLvG5_dmM1E, revoked=false, expired=false)] for user: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)] has been saved
2023-06-29 12:22:08 DEBUG User is not authenticated yet...
2023-06-29 12:22:08 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-29 12:22:08 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)]]
2023-06-29 12:22:08 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-06-29 12:22:18 DEBUG User is not authenticated yet...
2023-06-29 12:22:18 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-29 12:22:18 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)]]
2023-06-29 12:22:18 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-06-29 12:22:18 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-06-29 12:22:18 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-06-29 12:22:18 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala)]]
2023-06-29 12:23:03 DEBUG User is not authenticated yet...
2023-06-29 12:23:03 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-29 12:23:03 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)]]
2023-06-29 12:23:03 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-06-29 12:23:03 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-29 12:23:03 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)]]
2023-06-29 12:23:03 DEBUG [UserMappingService] User model: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-29 12:23:03 DEBUG [UserService.findByEmail()] User received from database: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])], for eMail:[jBloch@msaill.com]
2023-06-29 12:23:03 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-06-29 12:23:03 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])], for ID:[1]
2023-06-29 12:23:03 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-06-29 12:23:03 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])], for ID:[2]
2023-06-29 12:23:03 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)]
2023-06-29 12:23:03 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)]
2023-06-29 12:23:03 DEBUG [UserMappingService] UserDTO: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER)]
2023-06-29 12:23:03 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=510.0, createDate=null, userDTO=UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=510.0, createDate=null)]
2023-06-29 12:23:03 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=8, price=510.0, createDate=2023-06-29T09:23:03.401791800)]
2023-06-29 12:23:03 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=8, price=510.0, createDate=2023-06-29T09:23:03.401791800)] converted to ReceiptDTO: [ReceiptDTO(id=8, price=510.0, createDate=2023-06-29T09:23:03.401791800, userDTO=null)]
2023-06-29 12:23:26 DEBUG User is not authenticated yet...
2023-06-29 12:23:26 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-06-29 12:23:26 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)]]
2023-06-29 12:23:26 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-06-29 12:23:26 DEBUG [UserMappingService] User model: [User(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$GR.J9CUf8HXNCMsn0Ai2Fer4Z4FAI/s7.DtVS4IMCfJAPkAZ.xrF6, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-06-29 12:23:26 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=51, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[8]
2023-07-03 07:13:30 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-03 07:13:33 DEBUG MySQL DataSource with HikariCP created
2023-07-03 07:13:34 DEBUG Schema creation script executed
2023-07-03 07:13:36 DEBUG Schema initialization script executed
2023-07-03 07:13:36 DEBUG EntityManagerFactory created
2023-07-03 07:13:40 DEBUG Filter 'authTokenFilter' configured for use
2023-07-03 07:13:40 DEBUG JpaTransactionManager created
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-03 07:15:11 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-03 07:18:14 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-03 07:18:14 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kihFetHZ6NXwoFCMf8Jee.408rX6evjXs/TSbkLjdjJs8tjvlozau, userRole=CUSTOMER)}
2023-07-03 07:18:14 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-07-03 07:18:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 07:18:14 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kihFetHZ6NXwoFCMf8Jee.408rX6evjXs/TSbkLjdjJs8tjvlozau, userRole=CUSTOMER)]
2023-07-03 07:18:14 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4ODM1Nzg5NCwiZXhwIjoxNjg4NDQ0Mjk0fQ.CxSPHcy6-WjjjxF-WfpNWnR7gemKT3TYaGSeKeFGs88, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kihFetHZ6NXwoFCMf8Jee.408rX6evjXs/TSbkLjdjJs8tjvlozau, userRole=CUSTOMER)] has been saved
2023-07-03 07:18:30 DEBUG User is not authenticated yet...
2023-07-03 07:18:30 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 07:18:30 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kihFetHZ6NXwoFCMf8Jee.408rX6evjXs/TSbkLjdjJs8tjvlozau, userRole=CUSTOMER)]]
2023-07-03 07:18:30 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kihFetHZ6NXwoFCMf8Jee.408rX6evjXs/TSbkLjdjJs8tjvlozau, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 07:18:30 DEBUG [UserMappingService] User model: [User(id=256, email=ncdq3923@example.com, firstName=Candace, lastName=Frizzell, password=OqpyjuRwQdzU5Wt99jrY2Q==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=256, email=ncdq3923@example.com, firstName=Candace, lastName=Frizzell, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 07:18:30 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=256, email=ncdq3923@example.com, firstName=Candace, lastName=Frizzell, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[6]
2023-07-03 07:18:45 DEBUG User is not authenticated yet...
2023-07-03 07:18:45 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 07:18:45 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kihFetHZ6NXwoFCMf8Jee.408rX6evjXs/TSbkLjdjJs8tjvlozau, userRole=CUSTOMER)]]
2023-07-03 07:18:45 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kihFetHZ6NXwoFCMf8Jee.408rX6evjXs/TSbkLjdjJs8tjvlozau, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 07:59:36 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-03 07:59:40 DEBUG MySQL DataSource with HikariCP created
2023-07-03 07:59:41 DEBUG Schema creation script executed
2023-07-03 07:59:44 DEBUG Schema initialization script executed
2023-07-03 07:59:44 DEBUG EntityManagerFactory created
2023-07-03 07:59:50 DEBUG Filter 'authTokenFilter' configured for use
2023-07-03 07:59:51 DEBUG JpaTransactionManager created
2023-07-03 08:55:28 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-03 08:55:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 08:55:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 08:55:29 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 08:55:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 08:55:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 08:55:29 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4MzYzNzI5LCJleHAiOjE2ODg0NTAxMjl9.HANInMbQIKWyhg1_gOXjzm3tx1ksGkXSZlUqqmiZiQo, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-03 08:58:47 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-03 08:58:48 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SYOjhHwnodQw42CyEtf0VOh0I5a5V8.3lEO9f8mb7CcJm5z28JBca, userRole=CUSTOMER)}
2023-07-03 08:58:48 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-07-03 08:58:48 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 08:58:48 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SYOjhHwnodQw42CyEtf0VOh0I5a5V8.3lEO9f8mb7CcJm5z28JBca, userRole=CUSTOMER)]
2023-07-03 08:58:48 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4ODM2MzkyOCwiZXhwIjoxNjg4NDUwMzI4fQ.CEpZ6SxnxrOFdH4EH88Jwzq8CCaDveRM5hMrwWcL0Qc, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SYOjhHwnodQw42CyEtf0VOh0I5a5V8.3lEO9f8mb7CcJm5z28JBca, userRole=CUSTOMER)] has been saved
2023-07-03 08:58:55 DEBUG FIND_BY_TAGS [[java, kotlin]]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-03 08:59:13 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-03 08:59:24 DEBUG User is not authenticated yet...
2023-07-03 08:59:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 08:59:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SYOjhHwnodQw42CyEtf0VOh0I5a5V8.3lEO9f8mb7CcJm5z28JBca, userRole=CUSTOMER)]]
2023-07-03 08:59:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$SYOjhHwnodQw42CyEtf0VOh0I5a5V8.3lEO9f8mb7CcJm5z28JBca, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 08:59:24 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-03 08:59:24 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-03 08:59:24 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-07-03 08:59:46 DEBUG FIND_BY_TAGS [[Burleson579]]
2023-07-03 08:59:46 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-03 08:59:46 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 08:59:46 DEBUG [GiftCertificateService.findByTags()] GiftCertificate received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]], for tags:[[Burleson579]]
2023-07-03 08:59:46 DEBUG [GiftCertificateService.findByTags()] Total records for tags:[15]
2023-07-03 09:00:14 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-03 09:00:18 DEBUG MySQL DataSource with HikariCP created
2023-07-03 09:00:20 DEBUG Schema creation script executed
2023-07-03 09:00:22 DEBUG Schema initialization script executed
2023-07-03 09:00:22 DEBUG EntityManagerFactory created
2023-07-03 09:00:28 DEBUG Filter 'authTokenFilter' configured for use
2023-07-03 09:00:29 DEBUG JpaTransactionManager created
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-03 09:08:38 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-03 09:08:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 09:08:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116)] converted to DTO: [GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[])]
2023-07-03 09:08:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889)] converted to DTO: [GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[])]
2023-07-03 09:08:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624)] converted to DTO: [GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[])]
2023-07-03 09:08:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853)] converted to DTO: [GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[])]
2023-07-03 09:08:51 DEBUG [GiftCertificateService.findByName()] GiftCertificates received from database: [[GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[]), GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[]), GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[]), GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[])]], for name:[m]
2023-07-03 09:08:51 DEBUG [GiftCertificateService.findByName()] Total records for name:[1778]
2023-07-03 09:08:59 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-03 09:08:59 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-03 09:08:59 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]], for GiftCertificate.ID: [2]
2023-07-03 09:09:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 09:09:05 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-07-03 09:09:14 DEBUG FIND_BY_TAGS [[Burleson579]]
2023-07-03 09:09:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-03 09:09:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 09:09:14 DEBUG [GiftCertificateService.findByTags()] GiftCertificate received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]], for tags:[[Burleson579]]
2023-07-03 09:09:14 DEBUG [GiftCertificateService.findByTags()] Total records for tags:[15]
2023-07-03 09:10:19 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-03 09:10:19 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)}
2023-07-03 09:10:19 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-07-03 09:10:19 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:10:19 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]
2023-07-03 09:10:19 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4ODM2NDYxOSwiZXhwIjoxNjg4NDUxMDE5fQ.Ovp-ox6LmxE59bvFEUft0K5PgrFFDDo0UGlx8i_jVt8, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] has been saved
2023-07-03 09:10:40 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-03 09:10:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:10:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:10:40 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:10:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:10:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:10:40 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4MzY0NjQwLCJleHAiOjE2ODg0NTEwNDB9.iGWhLoBck7O8vNnDnDZeYMkmkQCLJwhuzr6Rw4qtiME, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-03 09:11:14 DEBUG User is not authenticated yet...
2023-07-03 09:11:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:11:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:11:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:11:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:11:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:11:14 DEBUG [UserMappingService] User model: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:14 DEBUG [UserService.findByEmail()] User received from database: [UserDTO(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])], for eMail:[jBloch@msaill.com]
2023-07-03 09:11:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-03 09:11:14 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])], for ID:[1]
2023-07-03 09:11:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 09:11:14 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-07-03 09:11:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-03 09:11:14 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])], for ID:[5]
2023-07-03 09:11:14 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)]
2023-07-03 09:11:14 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)]
2023-07-03 09:11:14 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)]
2023-07-03 09:11:14 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER)]
2023-07-03 09:11:14 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=2327.0, createDate=null, userDTO=UserDTO(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=2327.0, createDate=null)]
2023-07-03 09:11:14 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=1001, price=2327.0, createDate=2023-07-03T06:11:14.621257700)]
2023-07-03 09:11:14 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1001, price=2327.0, createDate=2023-07-03T06:11:14.621257700)] converted to ReceiptDTO: [ReceiptDTO(id=1001, price=2327.0, createDate=2023-07-03T06:11:14.621257700, userDTO=null)]
2023-07-03 09:11:40 DEBUG User is not authenticated yet...
2023-07-03 09:11:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:11:40 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:11:40 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:11:40 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-03 09:11:40 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-03 09:11:40 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-07-03 09:11:47 DEBUG User is not authenticated yet...
2023-07-03 09:11:47 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:11:47 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:11:47 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=null, userRole=ADMIN, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=3, email=Abney3@nowhere.com, firstName=Kenneth, lastName=Mccracken, password=xj2QEmF8Amqfo5/ZWIRpsw==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=3, email=Abney3@nowhere.com, firstName=Kenneth, lastName=Mccracken, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=4, email=CharissaJSchmid55@example.com, firstName=Carmelina, lastName=Swenson, password=getm1WSGC03NI/+xwNZwyQ==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=CharissaJSchmid55@example.com, firstName=Carmelina, lastName=Swenson, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=5, email=zhmjzjpe.wssz@nowhere.com, firstName=Pamila, lastName=Parish, password=iBdPCjE45wHLd9KM2KZtNw==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=5, email=zhmjzjpe.wssz@nowhere.com, firstName=Pamila, lastName=Parish, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=6, email=Velasquez2@nowhere.com, firstName=Allen, lastName=Yarbrough, password=5PyOtbko+RcPG9rwNUVdWQ==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=Velasquez2@nowhere.com, firstName=Allen, lastName=Yarbrough, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=7, email=Cushman@nowhere.com, firstName=Tobias, lastName=Littlejohn, password=hqoAZ4MHsERIFACe7u2+nw==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=Cushman@nowhere.com, firstName=Tobias, lastName=Littlejohn, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=8, email=Schneider@example.com, firstName=Adriana, lastName=Houston, password=G24XQCA4lUXvAndGGHNLzw==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=Schneider@example.com, firstName=Adriana, lastName=Houston, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=9, email=cqkx89@nowhere.com, firstName=Rachell, lastName=Chong, password=m0oAX8jxbIY37rop26o3dQ==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=cqkx89@nowhere.com, firstName=Rachell, lastName=Chong, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=10, email=King@example.com, firstName=Lorrine, lastName=Littleton, password=XxXQe0EGXeNjhHXe9MMeRg==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=King@example.com, firstName=Lorrine, lastName=Littleton, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=11, email=AmosTijerina48@example.com, firstName=Abel, lastName=Howard, password=BMDwbbSzl7Yd2KPo0cvpxQ==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=AmosTijerina48@example.com, firstName=Abel, lastName=Howard, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=12, email=Martino@example.com, firstName=Adam, lastName=Lively, password=29ONA5XIX+TjI7pBfFdqLg==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=12, email=Martino@example.com, firstName=Adam, lastName=Lively, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=13, email=Abbott@example.com, firstName=Weston, lastName=Howe, password=GLDFiAW6pa2LHGEdlhaBUA==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=13, email=Abbott@example.com, firstName=Weston, lastName=Howe, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=14, email=BradleyX.Short89@example.com, firstName=Freddie, lastName=Best, password=B62HCDOU5y78dAHJj1Nw3w==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=14, email=BradleyX.Short89@example.com, firstName=Freddie, lastName=Best, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserMappingService] User model: [User(id=15, email=ksvr43@example.com, firstName=Harry, lastName=Mccrary, password=S5KSTHUtiq4u18gEZw2qBQ==, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=15, email=ksvr43@example.com, firstName=Harry, lastName=Mccrary, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-03 09:11:47 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=2, email=ArndtY74@nowhere.com, firstName=Emilio, lastName=Houser, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=3, email=Abney3@nowhere.com, firstName=Kenneth, lastName=Mccracken, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=4, email=CharissaJSchmid55@example.com, firstName=Carmelina, lastName=Swenson, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=5, email=zhmjzjpe.wssz@nowhere.com, firstName=Pamila, lastName=Parish, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=6, email=Velasquez2@nowhere.com, firstName=Allen, lastName=Yarbrough, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=Cushman@nowhere.com, firstName=Tobias, lastName=Littlejohn, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=Schneider@example.com, firstName=Adriana, lastName=Houston, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=cqkx89@nowhere.com, firstName=Rachell, lastName=Chong, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=King@example.com, firstName=Lorrine, lastName=Littleton, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=11, email=AmosTijerina48@example.com, firstName=Abel, lastName=Howard, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=12, email=Martino@example.com, firstName=Adam, lastName=Lively, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=13, email=Abbott@example.com, firstName=Weston, lastName=Howe, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=14, email=BradleyX.Short89@example.com, firstName=Freddie, lastName=Best, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=15, email=ksvr43@example.com, firstName=Harry, lastName=Mccrary, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-03 09:11:58 DEBUG User is not authenticated yet...
2023-07-03 09:11:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:11:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:11:58 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:11:58 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093, userDTO=null)]
2023-07-03 09:11:58 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447)] converted to ReceiptDTO: [ReceiptDTO(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447, userDTO=null)]
2023-07-03 09:11:58 DEBUG [ReceiptService.findAll()] Receipts received from database: [[ReceiptDTO(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093, userDTO=null), ReceiptDTO(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447, userDTO=null)]]
2023-07-03 09:12:08 DEBUG User is not authenticated yet...
2023-07-03 09:12:08 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:12:08 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:12:08 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:12:14 DEBUG User is not authenticated yet...
2023-07-03 09:12:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:12:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:12:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:12:22 DEBUG User is not authenticated yet...
2023-07-03 09:12:22 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:12:22 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:12:22 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:12:31 DEBUG User is not authenticated yet...
2023-07-03 09:12:31 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 09:12:31 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)]]
2023-07-03 09:12:31 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$7oMToq8eQB.pNjVzR7RuceZd2heMWTYVyOtRLs4TsvKgtbSqHHW9O, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 09:12:50 DEBUG User is not authenticated yet...
2023-07-03 09:12:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:12:50 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:12:50 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:12:50 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=new tag)] converted to Tag model: [Tag(id=null, name=new tag)]
2023-07-03 09:12:50 DEBUG [TagJPARepository.save()] Tag with id:[1001] has been saved.
2023-07-03 09:12:50 DEBUG [TagMappingService] Tag model: [Tag(id=1001, name=new tag)] converted to TagDTO: [TagDTO(id=1001, name=new tag)]
2023-07-03 09:12:57 DEBUG User is not authenticated yet...
2023-07-03 09:12:57 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:12:57 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:12:57 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:12:57 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-07-03 09:12:57 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-07-03 09:12:57 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-07-03 09:12:57 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-07-03 09:12:57 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-07-03 09:12:57 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-03T06:12:57.287423900, lastUpdateDate=2023-07-03T06:12:57.287423900)] has been saved.
2023-07-03 09:12:57 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-07-03 09:12:57 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10001, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-03T06:12:57.287423900, lastUpdateDate=2023-07-03T06:12:57.287423900)] converted to DTO: [GiftCertificateDTO(id=10001, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-03T06:12:57.287423900, lastUpdateDate=2023-07-03T06:12:57.287423900, tags=[])]
2023-07-03 09:13:14 DEBUG User is not authenticated yet...
2023-07-03 09:13:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:13:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:13:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:13:14 DEBUG Delete tag : Optional[Tag(id=1001, name=new tag)]
2023-07-03 09:13:14 DEBUG [TagService.deleteById()] Tag for ID:[1001] removed
2023-07-03 09:13:14 DEBUG [TagMappingService] Tag model: [Tag(id=1001, name=new tag)] converted to TagDTO: [TagDTO(id=1001, name=new tag)]
2023-07-03 09:13:28 DEBUG User is not authenticated yet...
2023-07-03 09:13:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:13:28 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:13:28 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:14:00 DEBUG User is not authenticated yet...
2023-07-03 09:14:00 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:14:00 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:14:00 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:33:26 DEBUG User is not authenticated yet...
2023-07-03 09:33:26 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:33:26 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:33:26 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:33:38 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-03 09:33:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:33:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:33:38 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:33:38 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:33:38 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:33:38 DEBUG [AuthenticationService.signIn()] Token: [Token(id=3, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4MzY2MDE4LCJleHAiOjE2ODg0NTI0MTh9.uIBYoM_eKOWgJ7HejCiB8cgc3RPQPLVg2C7FGxhY2P8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-03 09:33:48 DEBUG User is not authenticated yet...
2023-07-03 09:33:48 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 09:33:48 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 09:33:48 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 09:33:48 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-07-03 09:33:48 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-07-03 12:45:59 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-03 12:46:03 DEBUG MySQL DataSource with HikariCP created
2023-07-03 12:46:04 DEBUG Schema creation script executed
2023-07-03 12:46:07 DEBUG Schema initialization script executed
2023-07-03 12:46:07 DEBUG EntityManagerFactory created
2023-07-03 12:46:13 DEBUG Filter 'authTokenFilter' configured for use
2023-07-03 12:46:13 DEBUG JpaTransactionManager created
2023-07-03 12:46:40 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-03 12:46:40 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$TF9/8bBr5jTBHdu2zVfUbOKkVRXAxIvRljF7LLABB09MrlwjHEOyK, userRole=CUSTOMER)}
2023-07-03 12:46:40 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-07-03 12:46:40 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 12:46:41 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$TF9/8bBr5jTBHdu2zVfUbOKkVRXAxIvRljF7LLABB09MrlwjHEOyK, userRole=CUSTOMER)]
2023-07-03 12:46:42 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4ODM3NzYwMSwiZXhwIjoxNjg4NDY0MDAxfQ.Q76Mn47n-W5rgrBBJsjI8TvPZ0rdFsORuV7_8SWvTow, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$TF9/8bBr5jTBHdu2zVfUbOKkVRXAxIvRljF7LLABB09MrlwjHEOyK, userRole=CUSTOMER)] has been saved
2023-07-03 12:46:57 DEBUG User is not authenticated yet...
2023-07-03 12:46:58 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 12:46:58 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$TF9/8bBr5jTBHdu2zVfUbOKkVRXAxIvRljF7LLABB09MrlwjHEOyK, userRole=CUSTOMER)]]
2023-07-03 12:46:58 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$TF9/8bBr5jTBHdu2zVfUbOKkVRXAxIvRljF7LLABB09MrlwjHEOyK, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 12:46:58 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-03 12:46:58 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-03 12:46:58 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-07-03 12:55:42 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-03 12:55:46 DEBUG MySQL DataSource with HikariCP created
2023-07-03 12:55:47 DEBUG Schema creation script executed
2023-07-03 12:55:50 DEBUG Schema initialization script executed
2023-07-03 12:55:50 DEBUG EntityManagerFactory created
2023-07-03 12:55:55 DEBUG Filter 'authTokenFilter' configured for use
2023-07-03 12:55:55 DEBUG JpaTransactionManager created
2023-07-03 13:05:00 DEBUG User is not authenticated yet...
2023-07-03 13:05:01 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-03 13:05:16 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-03 13:05:22 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-03 13:05:23 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)}
2023-07-03 13:05:23 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-07-03 13:05:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:05:23 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)]
2023-07-03 13:05:23 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4ODM3ODcyMywiZXhwIjoxNjg4NDY1MTIzfQ.igsB8NnYvM-CUyZzuOYyY_A-ScBIG_YjkRJOd_IycDU, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)] has been saved
2023-07-03 13:05:31 DEBUG User is not authenticated yet...
2023-07-03 13:05:31 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:05:31 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)]]
2023-07-03 13:05:31 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 13:05:39 DEBUG User is not authenticated yet...
2023-07-03 13:05:39 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:05:39 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)]]
2023-07-03 13:05:39 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 13:05:39 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-03 13:05:39 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-03 13:05:39 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-07-03 13:05:43 DEBUG User is not authenticated yet...
2023-07-03 13:05:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:05:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:05:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 13:05:47 DEBUG User is not authenticated yet...
2023-07-03 13:05:47 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:05:47 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)]]
2023-07-03 13:05:47 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$kcl//N.iGUBkId3MNVUvdexSktvB7Xnb4lgjQ/4CDaP4NauKoThea, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 13:08:52 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-03 13:08:57 DEBUG MySQL DataSource with HikariCP created
2023-07-03 13:08:58 DEBUG Schema creation script executed
2023-07-03 13:09:01 DEBUG Schema initialization script executed
2023-07-03 13:09:01 DEBUG EntityManagerFactory created
2023-07-03 13:09:07 DEBUG Filter 'authTokenFilter' configured for use
2023-07-03 13:09:07 DEBUG JpaTransactionManager created
2023-07-03 13:09:15 DEBUG User is not authenticated yet...
2023-07-03 13:09:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:09:23 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-03 13:09:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:09:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:09:23 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 13:09:23 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:09:23 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:09:24 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4Mzc4OTYzLCJleHAiOjE2ODg0NjUzNjN9.VBNDUYo2O0-d7UgbtvHsaGcWM_8aqIfoqwzhmTnUxD8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-03 13:09:36 DEBUG User is not authenticated yet...
2023-07-03 13:09:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:09:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:09:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 13:09:36 DEBUG Delete tag : Optional.empty
2023-07-03 13:09:43 DEBUG User is not authenticated yet...
2023-07-03 13:09:43 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:09:43 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:09:43 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 13:09:43 DEBUG Delete tag : Optional[Tag(id=100, name=Carylon1991)]
2023-07-03 13:09:43 DEBUG [TagService.deleteById()] Tag for ID:[100] removed
2023-07-03 13:09:43 DEBUG [TagMappingService] Tag model: [Tag(id=100, name=Carylon1991)] converted to TagDTO: [TagDTO(id=100, name=Carylon1991)]
2023-07-03 13:09:49 DEBUG User is not authenticated yet...
2023-07-03 13:09:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:09:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:09:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 13:09:53 DEBUG User is not authenticated yet...
2023-07-03 13:09:53 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:09:53 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:09:53 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 13:09:53 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=new tag)] converted to Tag model: [Tag(id=null, name=new tag)]
2023-07-03 13:09:53 DEBUG [TagJPARepository.save()] Tag with id:[1001] has been saved.
2023-07-03 13:09:53 DEBUG [TagMappingService] Tag model: [Tag(id=1001, name=new tag)] converted to TagDTO: [TagDTO(id=1001, name=new tag)]
2023-07-03 13:12:38 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-03 13:12:44 DEBUG MySQL DataSource with HikariCP created
2023-07-03 13:12:45 DEBUG Schema creation script executed
2023-07-03 13:12:48 DEBUG Schema initialization script executed
2023-07-03 13:12:48 DEBUG EntityManagerFactory created
2023-07-03 13:12:56 DEBUG Filter 'authTokenFilter' configured for use
2023-07-03 13:12:56 DEBUG JpaTransactionManager created
2023-07-03 13:13:08 DEBUG User is not authenticated yet...
2023-07-03 13:13:09 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-03 13:13:09 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-03 13:13:09 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-03 13:13:15 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-03 13:13:15 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)}
2023-07-03 13:13:15 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@msaill.com]
2023-07-03 13:13:15 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:13:16 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)]
2023-07-03 13:13:16 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbXNhaWxsLmNvbSIsImlhdCI6MTY4ODM3OTE5NiwiZXhwIjoxNjg4NDY1NTk2fQ.-v5l6px4kK7ZTDjiUBt2K7t9G6LqclctTqhWeBKiBF4, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)] has been saved
2023-07-03 13:13:29 DEBUG User is not authenticated yet...
2023-07-03 13:13:29 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:13:29 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)]]
2023-07-03 13:13:29 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 13:13:29 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-03 13:13:29 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-03 13:13:29 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-07-03 13:13:39 DEBUG User is not authenticated yet...
2023-07-03 13:13:39 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:13:39 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)]]
2023-07-03 13:13:39 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-03 13:13:55 DEBUG User is not authenticated yet...
2023-07-03 13:13:55 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-03 13:13:55 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)]]
2023-07-03 13:13:55 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@msaill.com, firstName=Joshua, lastName=Bloch, password=$2a$10$FPdQlSniStH0hfYGqXPOTu563LcoTZuckyHZKX4QiGfs3Xk/XavTy, userRole=CUSTOMER)] for eMail:[jBloch@msaill.com} has been received.
2023-07-05 16:22:24 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-05 16:22:28 DEBUG MySQL DataSource with HikariCP created
2023-07-05 16:22:29 DEBUG Schema creation script executed
2023-07-05 16:22:32 DEBUG Schema initialization script executed
2023-07-05 16:22:32 DEBUG EntityManagerFactory created
2023-07-05 16:22:36 DEBUG Filter 'authTokenFilter' configured for use
2023-07-05 16:22:36 DEBUG JpaTransactionManager created
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-05 16:24:33 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
[35;1m2023-07-05 21:42:58 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-05 21:48:40 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-05 22:04:46 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-05 22:04:50 DEBUG H2 DataSource created
2023-07-05 22:04:51 DEBUG EntityManagerFactory created
2023-07-05 22:04:55 DEBUG Filter 'authTokenFilter' configured for use
2023-07-05 22:04:56 DEBUG JpaTransactionManager created
2023-07-05 22:05:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-05 22:05:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-05 22:05:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-05 22:05:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-05 22:05:43 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-05 22:42:05 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-05 23:41:01 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-06 07:30:52 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-06 07:52:12 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-06 08:11:02 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-06 08:17:33 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:17:37 DEBUG H2 DataSource created
2023-07-06 08:17:38 DEBUG EntityManagerFactory created
2023-07-06 08:17:42 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 08:17:42 DEBUG JpaTransactionManager created
2023-07-06 08:18:15 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 08:18:15 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 08:18:15 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 08:18:15 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 08:18:15 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-06 08:41:25 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:41:26 DEBUG EntityManagerFactory created
2023-07-06 08:41:30 DEBUG JpaTransactionManager created
2023-07-06 08:41:33 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=microsoft_1, description=monopolist, price=256.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] has been saved.
2023-07-06 08:41:33 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:41:33 DEBUG EntityManagerFactory created
2023-07-06 08:41:34 DEBUG JpaTransactionManager created
2023-07-06 08:41:34 DEBUG Receipt for removal Receipt(id=5, price=50.0, createDate=2023-03-13T15:58:05.284)
2023-07-06 08:41:34 DEBUG Receipt for removal null
2023-07-06 08:41:35 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:41:35 DEBUG EntityManagerFactory created
2023-07-06 08:41:35 DEBUG JpaTransactionManager created
2023-07-06 08:41:36 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:41:36 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:41:36 DEBUG EntityManagerFactory created
2023-07-06 08:41:37 DEBUG JpaTransactionManager created
2023-07-06 08:41:45 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:41:46 DEBUG H2 DataSource created
2023-07-06 08:41:47 DEBUG EntityManagerFactory created
2023-07-06 08:41:50 DEBUG JpaTransactionManager created
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-06 08:41:52 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=5, name=kotlin), TagDTO(id=6, name=visual basic)]]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=6, name=visual basic)] converted to Tag model: [Tag(id=6, name=visual basic)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 08:41:52 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp)]]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 08:41:52 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=tagName)] converted to TagDTO: [TagDTO(id=1, name=tagName)]
2023-07-06 08:41:52 DEBUG [TagService.findById()] Tag received from database: [TagDTO(id=1, name=tagName)], for ID:[1]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=tagName)] converted to Tag model: [Tag(id=1, name=tagName)]
2023-07-06 08:41:52 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=some_name)] converted to TagDTO: [TagDTO(id=1, name=some_name)]
2023-07-06 08:41:52 DEBUG [TagService.findByName()] Tag received from database: [TagDTO(id=1, name=some_name)], for name:[some_name]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=some_name)] converted to Tag model: [Tag(id=1, name=some_name)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 08:41:52 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=test1)] converted to TagDTO: [TagDTO(id=1, name=test1)]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=test1)] converted to Tag model: [Tag(id=1, name=test1)]
2023-07-06 08:41:52 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 08:41:52 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=5, name=kotlin)]], for GiftCertificate.ID: [4]
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 08:41:52 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:41:52 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 08:41:53 DEBUG Delete tag : Optional[Tag(id=5, name=kotlin)]
2023-07-06 08:41:53 DEBUG [TagService.deleteById()] Tag for ID:[5] removed
2023-07-06 08:41:53 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 08:41:53 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 08:41:53 DEBUG Delete tag : Optional.empty
2023-07-06 08:41:53 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 08:41:53 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 08:41:53 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:41:53 DEBUG H2 DataSource created
2023-07-06 08:41:53 DEBUG EntityManagerFactory created
2023-07-06 08:41:54 DEBUG JpaTransactionManager created
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[5]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserService.findById()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for ID:[3]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN)]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER)]
2023-07-06 08:41:54 DEBUG [UserMappingService] UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER)]
2023-07-06 08:42:44 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 08:45:52 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:45:54 DEBUG EntityManagerFactory created
2023-07-06 08:45:57 DEBUG JpaTransactionManager created
2023-07-06 08:46:00 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=microsoft_1, description=monopolist, price=256.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] has been saved.
2023-07-06 08:46:00 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:46:01 DEBUG EntityManagerFactory created
2023-07-06 08:46:01 DEBUG JpaTransactionManager created
2023-07-06 08:46:02 DEBUG Receipt for removal Receipt(id=5, price=50.0, createDate=2023-03-13T15:58:05.284)
2023-07-06 08:46:02 DEBUG Receipt for removal null
2023-07-06 08:46:02 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:46:02 DEBUG EntityManagerFactory created
2023-07-06 08:46:02 DEBUG JpaTransactionManager created
2023-07-06 08:46:03 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:46:03 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:46:03 DEBUG EntityManagerFactory created
2023-07-06 08:46:04 DEBUG JpaTransactionManager created
2023-07-06 08:46:12 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:46:13 DEBUG H2 DataSource created
2023-07-06 08:46:14 DEBUG EntityManagerFactory created
2023-07-06 08:46:17 DEBUG JpaTransactionManager created
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-06 08:46:19 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=5, name=kotlin), TagDTO(id=6, name=visual basic)]]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=6, name=visual basic)] converted to Tag model: [Tag(id=6, name=visual basic)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 08:46:19 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp)]]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 08:46:19 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=tagName)] converted to TagDTO: [TagDTO(id=1, name=tagName)]
2023-07-06 08:46:19 DEBUG [TagService.findById()] Tag received from database: [TagDTO(id=1, name=tagName)], for ID:[1]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=tagName)] converted to Tag model: [Tag(id=1, name=tagName)]
2023-07-06 08:46:19 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:46:19 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=some_name)] converted to TagDTO: [TagDTO(id=1, name=some_name)]
2023-07-06 08:46:19 DEBUG [TagService.findByName()] Tag received from database: [TagDTO(id=1, name=some_name)], for name:[some_name]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=some_name)] converted to Tag model: [Tag(id=1, name=some_name)]
2023-07-06 08:46:19 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 08:46:20 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:46:20 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=test1)] converted to TagDTO: [TagDTO(id=1, name=test1)]
2023-07-06 08:46:20 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=test1)] converted to Tag model: [Tag(id=1, name=test1)]
2023-07-06 08:46:20 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 08:46:20 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=5, name=kotlin)]], for GiftCertificate.ID: [4]
2023-07-06 08:46:20 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 08:46:20 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 08:46:20 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 08:46:20 DEBUG Delete tag : Optional[Tag(id=5, name=kotlin)]
2023-07-06 08:46:20 DEBUG [TagService.deleteById()] Tag for ID:[5] removed
2023-07-06 08:46:20 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 08:46:20 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 08:46:20 DEBUG Delete tag : Optional.empty
2023-07-06 08:46:20 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 08:46:20 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 08:46:20 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 08:46:20 DEBUG H2 DataSource created
2023-07-06 08:46:20 DEBUG EntityManagerFactory created
2023-07-06 08:46:21 DEBUG JpaTransactionManager created
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[5]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserService.findById()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for ID:[3]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN)]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER)]
2023-07-06 08:46:21 DEBUG [UserMappingService] UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER)]
2023-07-06 08:47:04 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 09:00:27 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 09:04:08 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 09:05:49 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 09:08:24 DEBUG Running with Spring Boot v1.0, Spring v1.0
[35;1m2023-07-06 09:17:44 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-06 09:28:17 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 09:28:18 DEBUG EntityManagerFactory created
2023-07-06 09:28:21 DEBUG JpaTransactionManager created
2023-07-06 09:28:24 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=microsoft_1, description=monopolist, price=256.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] has been saved.
2023-07-06 09:28:25 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 09:28:25 DEBUG EntityManagerFactory created
2023-07-06 09:28:25 DEBUG JpaTransactionManager created
2023-07-06 09:28:26 DEBUG Receipt for removal Receipt(id=5, price=50.0, createDate=2023-03-13T15:58:05.284)
2023-07-06 09:28:26 DEBUG Receipt for removal null
2023-07-06 09:28:26 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 09:28:26 DEBUG EntityManagerFactory created
2023-07-06 09:28:27 DEBUG JpaTransactionManager created
2023-07-06 09:28:27 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 09:28:27 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 09:28:28 DEBUG EntityManagerFactory created
2023-07-06 09:28:28 DEBUG JpaTransactionManager created
2023-07-06 09:28:37 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 09:28:38 DEBUG H2 DataSource created
2023-07-06 09:28:38 DEBUG EntityManagerFactory created
2023-07-06 09:28:42 DEBUG JpaTransactionManager created
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-06 09:28:44 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=5, name=kotlin), TagDTO(id=6, name=visual basic)]]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=6, name=visual basic)] converted to Tag model: [Tag(id=6, name=visual basic)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 09:28:44 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp)]]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 09:28:44 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=tagName)] converted to TagDTO: [TagDTO(id=1, name=tagName)]
2023-07-06 09:28:44 DEBUG [TagService.findById()] Tag received from database: [TagDTO(id=1, name=tagName)], for ID:[1]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=tagName)] converted to Tag model: [Tag(id=1, name=tagName)]
2023-07-06 09:28:44 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=some_name)] converted to TagDTO: [TagDTO(id=1, name=some_name)]
2023-07-06 09:28:44 DEBUG [TagService.findByName()] Tag received from database: [TagDTO(id=1, name=some_name)], for name:[some_name]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=some_name)] converted to Tag model: [Tag(id=1, name=some_name)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 09:28:44 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=test1)] converted to TagDTO: [TagDTO(id=1, name=test1)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=test1)] converted to Tag model: [Tag(id=1, name=test1)]
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 09:28:44 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=5, name=kotlin)]], for GiftCertificate.ID: [4]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 09:28:44 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 09:28:44 DEBUG Delete tag : Optional[Tag(id=5, name=kotlin)]
2023-07-06 09:28:44 DEBUG [TagService.deleteById()] Tag for ID:[5] removed
2023-07-06 09:28:44 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 09:28:44 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 09:28:44 DEBUG Delete tag : Optional.empty
2023-07-06 09:28:45 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 09:28:45 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 09:28:45 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 09:28:45 DEBUG H2 DataSource created
2023-07-06 09:28:45 DEBUG EntityManagerFactory created
2023-07-06 09:28:46 DEBUG JpaTransactionManager created
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[5]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserService.findById()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for ID:[3]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN)]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER)]
2023-07-06 09:28:46 DEBUG [UserMappingService] UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER)]
2023-07-06 09:30:28 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 10:21:18 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 10:30:54 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 10:46:41 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 10:49:46 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 10:59:36 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 10:59:37 DEBUG EntityManagerFactory created
2023-07-06 10:59:41 DEBUG JpaTransactionManager created
2023-07-06 10:59:45 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=microsoft_1, description=monopolist, price=256.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] has been saved.
2023-07-06 10:59:45 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 10:59:45 DEBUG EntityManagerFactory created
2023-07-06 10:59:46 DEBUG JpaTransactionManager created
2023-07-06 10:59:46 DEBUG Receipt for removal Receipt(id=5, price=50.0, createDate=2023-03-13T15:58:05.284)
2023-07-06 10:59:46 DEBUG Receipt for removal null
2023-07-06 10:59:46 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 10:59:47 DEBUG EntityManagerFactory created
2023-07-06 10:59:47 DEBUG JpaTransactionManager created
2023-07-06 10:59:47 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 10:59:48 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 10:59:48 DEBUG EntityManagerFactory created
2023-07-06 10:59:48 DEBUG JpaTransactionManager created
2023-07-06 10:59:57 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 10:59:58 DEBUG H2 DataSource created
2023-07-06 10:59:58 DEBUG EntityManagerFactory created
2023-07-06 11:00:02 DEBUG JpaTransactionManager created
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-06 11:00:04 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=5, name=kotlin), TagDTO(id=6, name=visual basic)]]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=6, name=visual basic)] converted to Tag model: [Tag(id=6, name=visual basic)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 11:00:04 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp)]]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 11:00:04 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=tagName)] converted to TagDTO: [TagDTO(id=1, name=tagName)]
2023-07-06 11:00:04 DEBUG [TagService.findById()] Tag received from database: [TagDTO(id=1, name=tagName)], for ID:[1]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=tagName)] converted to Tag model: [Tag(id=1, name=tagName)]
2023-07-06 11:00:04 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=some_name)] converted to TagDTO: [TagDTO(id=1, name=some_name)]
2023-07-06 11:00:04 DEBUG [TagService.findByName()] Tag received from database: [TagDTO(id=1, name=some_name)], for name:[some_name]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=some_name)] converted to Tag model: [Tag(id=1, name=some_name)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 11:00:04 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=test1)] converted to TagDTO: [TagDTO(id=1, name=test1)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=test1)] converted to Tag model: [Tag(id=1, name=test1)]
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 11:00:04 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=5, name=kotlin)]], for GiftCertificate.ID: [4]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 11:00:04 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 11:00:04 DEBUG Delete tag : Optional[Tag(id=5, name=kotlin)]
2023-07-06 11:00:04 DEBUG [TagService.deleteById()] Tag for ID:[5] removed
2023-07-06 11:00:04 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 11:00:04 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 11:00:04 DEBUG Delete tag : Optional.empty
2023-07-06 11:00:05 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 11:00:05 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 11:00:05 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 11:00:05 DEBUG H2 DataSource created
2023-07-06 11:00:05 DEBUG EntityManagerFactory created
2023-07-06 11:00:05 DEBUG JpaTransactionManager created
2023-07-06 11:00:05 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:05 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[5]
2023-07-06 11:00:05 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:05 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:05 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:05 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:05 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:05 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:05 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 11:00:06 DEBUG [UserService.findById()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for ID:[3]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN)]
2023-07-06 11:00:06 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:06 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:06 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:06 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER)]
2023-07-06 11:00:06 DEBUG [UserMappingService] UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER)]
2023-07-06 11:01:17 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 11:22:35 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 11:37:18 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 11:54:21 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 12:17:20 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:17:26 DEBUG MySQL DataSource with HikariCP created
2023-07-06 12:17:28 DEBUG Schema creation script executed
2023-07-06 12:17:32 DEBUG Schema initialization script executed
2023-07-06 12:17:32 DEBUG EntityManagerFactory created
2023-07-06 12:17:37 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 12:17:37 DEBUG JpaTransactionManager created
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-06 12:19:23 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-06 12:20:43 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:20:44 DEBUG EntityManagerFactory created
2023-07-06 12:20:48 DEBUG JpaTransactionManager created
2023-07-06 12:20:52 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=microsoft_1, description=monopolist, price=256.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] has been saved.
2023-07-06 12:20:52 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:20:53 DEBUG EntityManagerFactory created
2023-07-06 12:20:54 DEBUG JpaTransactionManager created
2023-07-06 12:20:55 DEBUG Receipt for removal Receipt(id=5, price=50.0, createDate=2023-03-13T15:58:05.284)
2023-07-06 12:20:55 DEBUG Receipt for removal null
2023-07-06 12:20:55 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:20:55 DEBUG EntityManagerFactory created
2023-07-06 12:20:56 DEBUG JpaTransactionManager created
2023-07-06 12:20:56 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:20:57 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:20:57 DEBUG EntityManagerFactory created
2023-07-06 12:20:57 DEBUG JpaTransactionManager created
2023-07-06 12:21:06 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:21:07 DEBUG H2 DataSource created
2023-07-06 12:21:08 DEBUG EntityManagerFactory created
2023-07-06 12:21:11 DEBUG JpaTransactionManager created
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-06 12:21:13 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=5, name=kotlin), TagDTO(id=6, name=visual basic)]]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=6, name=visual basic)] converted to Tag model: [Tag(id=6, name=visual basic)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 12:21:13 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp)]]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 12:21:13 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=tagName)] converted to TagDTO: [TagDTO(id=1, name=tagName)]
2023-07-06 12:21:13 DEBUG [TagService.findById()] Tag received from database: [TagDTO(id=1, name=tagName)], for ID:[1]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=tagName)] converted to Tag model: [Tag(id=1, name=tagName)]
2023-07-06 12:21:13 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=some_name)] converted to TagDTO: [TagDTO(id=1, name=some_name)]
2023-07-06 12:21:13 DEBUG [TagService.findByName()] Tag received from database: [TagDTO(id=1, name=some_name)], for name:[some_name]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=some_name)] converted to Tag model: [Tag(id=1, name=some_name)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 12:21:13 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:21:13 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=test1)] converted to TagDTO: [TagDTO(id=1, name=test1)]
2023-07-06 12:21:13 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=test1)] converted to Tag model: [Tag(id=1, name=test1)]
2023-07-06 12:21:14 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 12:21:14 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=5, name=kotlin)]], for GiftCertificate.ID: [4]
2023-07-06 12:21:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 12:21:14 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:21:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 12:21:14 DEBUG Delete tag : Optional[Tag(id=5, name=kotlin)]
2023-07-06 12:21:14 DEBUG [TagService.deleteById()] Tag for ID:[5] removed
2023-07-06 12:21:14 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 12:21:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 12:21:14 DEBUG Delete tag : Optional.empty
2023-07-06 12:21:14 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 12:21:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 12:21:14 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:21:14 DEBUG H2 DataSource created
2023-07-06 12:21:14 DEBUG EntityManagerFactory created
2023-07-06 12:21:15 DEBUG JpaTransactionManager created
2023-07-06 12:21:15 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:15 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[5]
2023-07-06 12:21:15 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:15 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:15 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:15 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:15 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:15 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:15 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 12:21:15 DEBUG [UserMappingService] UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:15 DEBUG [UserMappingService] UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:15 DEBUG [UserMappingService] UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:15 DEBUG [UserMappingService] UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:15 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:15 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 12:21:15 DEBUG [UserService.findById()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for ID:[3]
2023-07-06 12:21:15 DEBUG [UserMappingService] UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN)]
2023-07-06 12:21:16 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:16 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:16 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:16 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:21:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER)]
2023-07-06 12:21:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER)]
2023-07-06 12:23:05 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 12:31:16 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 12:50:36 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:50:39 DEBUG MySQL DataSource with HikariCP created
2023-07-06 12:50:40 DEBUG Schema creation script executed
2023-07-06 12:50:43 DEBUG Schema initialization script executed
2023-07-06 12:50:43 DEBUG EntityManagerFactory created
2023-07-06 12:50:48 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 12:50:48 DEBUG JpaTransactionManager created
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-06 12:51:53 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-06 12:52:14 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032)] converted to DTO: [GiftCertificateDTO(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012)] converted to DTO: [GiftCertificateDTO(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315)] converted to DTO: [GiftCertificateDTO(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026)] converted to DTO: [GiftCertificateDTO(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009)] converted to DTO: [GiftCertificateDTO(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410)] converted to DTO: [GiftCertificateDTO(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559)] converted to DTO: [GiftCertificateDTO(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397)] converted to DTO: [GiftCertificateDTO(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153)] converted to DTO: [GiftCertificateDTO(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008)] converted to DTO: [GiftCertificateDTO(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116)] converted to DTO: [GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350)] converted to DTO: [GiftCertificateDTO(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020)] converted to DTO: [GiftCertificateDTO(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889)] converted to DTO: [GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247)] converted to DTO: [GiftCertificateDTO(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779)] converted to DTO: [GiftCertificateDTO(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782)] converted to DTO: [GiftCertificateDTO(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447)] converted to DTO: [GiftCertificateDTO(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105)] converted to DTO: [GiftCertificateDTO(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548)] converted to DTO: [GiftCertificateDTO(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548, tags=[])]
2023-07-06 12:52:40 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032, tags=[]), GiftCertificateDTO(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012, tags=[]), GiftCertificateDTO(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315, tags=[]), GiftCertificateDTO(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026, tags=[]), GiftCertificateDTO(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009, tags=[]), GiftCertificateDTO(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410, tags=[]), GiftCertificateDTO(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559, tags=[]), GiftCertificateDTO(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397, tags=[]), GiftCertificateDTO(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153, tags=[]), GiftCertificateDTO(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008, tags=[]), GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[]), GiftCertificateDTO(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350, tags=[]), GiftCertificateDTO(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020, tags=[]), GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[]), GiftCertificateDTO(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247, tags=[]), GiftCertificateDTO(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779, tags=[]), GiftCertificateDTO(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782, tags=[]), GiftCertificateDTO(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447, tags=[]), GiftCertificateDTO(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105, tags=[]), GiftCertificateDTO(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548, tags=[])]]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799)] converted to DTO: [GiftCertificateDTO(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157)] converted to DTO: [GiftCertificateDTO(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909)] converted to DTO: [GiftCertificateDTO(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948)] converted to DTO: [GiftCertificateDTO(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574)] converted to DTO: [GiftCertificateDTO(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064)] converted to DTO: [GiftCertificateDTO(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829)] converted to DTO: [GiftCertificateDTO(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044)] converted to DTO: [GiftCertificateDTO(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681)] converted to DTO: [GiftCertificateDTO(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647)] converted to DTO: [GiftCertificateDTO(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978)] converted to DTO: [GiftCertificateDTO(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624)] converted to DTO: [GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840)] converted to DTO: [GiftCertificateDTO(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065)] converted to DTO: [GiftCertificateDTO(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990)] converted to DTO: [GiftCertificateDTO(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327)] converted to DTO: [GiftCertificateDTO(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914)] converted to DTO: [GiftCertificateDTO(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219)] converted to DTO: [GiftCertificateDTO(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853)] converted to DTO: [GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639)] converted to DTO: [GiftCertificateDTO(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639, tags=[])]
2023-07-06 12:52:48 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799, tags=[]), GiftCertificateDTO(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157, tags=[]), GiftCertificateDTO(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909, tags=[]), GiftCertificateDTO(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948, tags=[]), GiftCertificateDTO(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574, tags=[]), GiftCertificateDTO(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064, tags=[]), GiftCertificateDTO(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829, tags=[]), GiftCertificateDTO(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044, tags=[]), GiftCertificateDTO(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681, tags=[]), GiftCertificateDTO(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647, tags=[]), GiftCertificateDTO(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978, tags=[]), GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[]), GiftCertificateDTO(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840, tags=[]), GiftCertificateDTO(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065, tags=[]), GiftCertificateDTO(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990, tags=[]), GiftCertificateDTO(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327, tags=[]), GiftCertificateDTO(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914, tags=[]), GiftCertificateDTO(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219, tags=[]), GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[]), GiftCertificateDTO(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639, tags=[])]]
2023-07-06 12:54:55 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:54:59 DEBUG MySQL DataSource with HikariCP created
2023-07-06 12:55:00 DEBUG Schema creation script executed
2023-07-06 12:55:03 DEBUG Schema initialization script executed
2023-07-06 12:55:03 DEBUG EntityManagerFactory created
2023-07-06 12:55:09 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 12:55:09 DEBUG JpaTransactionManager created
2023-07-06 12:55:36 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:55:39 DEBUG H2 DataSource created
2023-07-06 12:55:39 DEBUG EntityManagerFactory created
2023-07-06 12:55:43 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 12:55:44 DEBUG JpaTransactionManager created
2023-07-06 12:57:29 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:57:36 DEBUG EntityManagerFactory created
2023-07-06 12:57:41 DEBUG JpaTransactionManager created
2023-07-06 12:57:56 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=microsoft_1, description=monopolist, price=256.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] has been saved.
2023-07-06 12:57:57 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:57:57 DEBUG EntityManagerFactory created
2023-07-06 12:57:58 DEBUG JpaTransactionManager created
2023-07-06 12:57:58 DEBUG Receipt for removal Receipt(id=5, price=50.0, createDate=2023-03-13T15:58:05.284)
2023-07-06 12:57:58 DEBUG Receipt for removal null
2023-07-06 12:57:59 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:57:59 DEBUG EntityManagerFactory created
2023-07-06 12:57:59 DEBUG JpaTransactionManager created
2023-07-06 12:58:00 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:58:00 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:58:00 DEBUG EntityManagerFactory created
2023-07-06 12:58:01 DEBUG JpaTransactionManager created
2023-07-06 12:58:58 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:59:02 DEBUG H2 DataSource created
2023-07-06 12:59:04 DEBUG EntityManagerFactory created
2023-07-06 12:59:13 DEBUG JpaTransactionManager created
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-06 12:59:15 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=5, name=kotlin), TagDTO(id=6, name=visual basic)]]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=6, name=visual basic)] converted to Tag model: [Tag(id=6, name=visual basic)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 12:59:15 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp)]]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 12:59:15 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=tagName)] converted to TagDTO: [TagDTO(id=1, name=tagName)]
2023-07-06 12:59:15 DEBUG [TagService.findById()] Tag received from database: [TagDTO(id=1, name=tagName)], for ID:[1]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=tagName)] converted to Tag model: [Tag(id=1, name=tagName)]
2023-07-06 12:59:15 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=some_name)] converted to TagDTO: [TagDTO(id=1, name=some_name)]
2023-07-06 12:59:15 DEBUG [TagService.findByName()] Tag received from database: [TagDTO(id=1, name=some_name)], for name:[some_name]
2023-07-06 12:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=some_name)] converted to Tag model: [Tag(id=1, name=some_name)]
2023-07-06 12:59:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 12:59:16 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:59:16 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=test1)] converted to TagDTO: [TagDTO(id=1, name=test1)]
2023-07-06 12:59:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=test1)] converted to Tag model: [Tag(id=1, name=test1)]
2023-07-06 12:59:16 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 12:59:16 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=5, name=kotlin)]], for GiftCertificate.ID: [4]
2023-07-06 12:59:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 12:59:16 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 12:59:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 12:59:16 DEBUG Delete tag : Optional[Tag(id=5, name=kotlin)]
2023-07-06 12:59:16 DEBUG [TagService.deleteById()] Tag for ID:[5] removed
2023-07-06 12:59:16 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 12:59:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 12:59:16 DEBUG Delete tag : Optional.empty
2023-07-06 12:59:16 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 12:59:16 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 12:59:16 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 12:59:16 DEBUG H2 DataSource created
2023-07-06 12:59:16 DEBUG EntityManagerFactory created
2023-07-06 12:59:17 DEBUG JpaTransactionManager created
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[5]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserService.findById()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for ID:[3]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN)]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER)]
2023-07-06 12:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER)]
2023-07-06 13:22:27 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 13:22:30 DEBUG H2 DataSource created
2023-07-06 13:22:30 DEBUG EntityManagerFactory created
2023-07-06 13:22:34 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 13:22:35 DEBUG JpaTransactionManager created
2023-07-06 13:28:04 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 13:44:53 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 13:58:03 DEBUG Running with Spring Boot v1.0, Spring v1.0
2023-07-06 14:00:07 DEBUG Running with Spring Boot v1.0, Spring v1.0
[35;1m2023-07-06 14:05:35 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-06 14:14:05 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-06 14:14:07 DEBUG H2 DataSource created
2023-07-06 14:14:07 DEBUG EntityManagerFactory created
[35;1m2023-07-06 14:18:18 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-06 14:18:20 DEBUG H2 DataSource created
2023-07-06 14:18:20 DEBUG EntityManagerFactory created
[35;1m2023-07-06 14:22:06 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-06 14:22:08 DEBUG H2 DataSource created
2023-07-06 14:22:09 DEBUG EntityManagerFactory created
2023-07-06 15:58:35 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 15:58:38 DEBUG EntityManagerFactory created
2023-07-06 15:58:43 DEBUG JpaTransactionManager created
2023-07-06 15:58:47 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=microsoft_1, description=monopolist, price=256.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] has been saved.
2023-07-06 15:58:49 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 15:58:49 DEBUG EntityManagerFactory created
2023-07-06 15:58:50 DEBUG JpaTransactionManager created
2023-07-06 15:58:51 DEBUG Receipt for removal Receipt(id=5, price=50.0, createDate=2023-03-13T15:58:05.284)
2023-07-06 15:58:51 DEBUG Receipt for removal null
2023-07-06 15:58:51 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 15:58:52 DEBUG EntityManagerFactory created
2023-07-06 15:58:53 DEBUG JpaTransactionManager created
2023-07-06 15:58:54 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 15:58:55 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 15:58:55 DEBUG EntityManagerFactory created
2023-07-06 15:58:56 DEBUG JpaTransactionManager created
2023-07-06 15:59:05 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 15:59:08 DEBUG H2 DataSource created
2023-07-06 15:59:08 DEBUG EntityManagerFactory created
2023-07-06 15:59:12 DEBUG JpaTransactionManager created
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-06 15:59:14 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=5, name=kotlin), TagDTO(id=6, name=visual basic)]]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=6, name=visual basic)] converted to Tag model: [Tag(id=6, name=visual basic)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=java)] converted to TagDTO: [TagDTO(id=1, name=java)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=scala)] converted to TagDTO: [TagDTO(id=2, name=scala)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 15:59:14 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=java), TagDTO(id=2, name=scala), TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp)]]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=java)] converted to Tag model: [Tag(id=1, name=java)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=2, name=scala)] converted to Tag model: [Tag(id=2, name=scala)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=3, name=c)] converted to Tag model: [Tag(id=3, name=c)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 15:59:14 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=tagName)] converted to TagDTO: [TagDTO(id=1, name=tagName)]
2023-07-06 15:59:14 DEBUG [TagService.findById()] Tag received from database: [TagDTO(id=1, name=tagName)], for ID:[1]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=tagName)] converted to Tag model: [Tag(id=1, name=tagName)]
2023-07-06 15:59:14 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=some_name)] converted to TagDTO: [TagDTO(id=1, name=some_name)]
2023-07-06 15:59:14 DEBUG [TagService.findByName()] Tag received from database: [TagDTO(id=1, name=some_name)], for name:[some_name]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=some_name)] converted to Tag model: [Tag(id=1, name=some_name)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 15:59:14 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=test1)] converted to TagDTO: [TagDTO(id=1, name=test1)]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=1, name=test1)] converted to Tag model: [Tag(id=1, name=test1)]
2023-07-06 15:59:14 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 15:59:14 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=5, name=kotlin)]], for GiftCertificate.ID: [4]
2023-07-06 15:59:14 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 15:59:15 DEBUG [TagJPARepository.save()] Tag with id:[1] has been saved.
2023-07-06 15:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=test1)] converted to Tag model: [Tag(id=null, name=test1)]
2023-07-06 15:59:15 DEBUG Delete tag : Optional[Tag(id=5, name=kotlin)]
2023-07-06 15:59:15 DEBUG [TagService.deleteById()] Tag for ID:[5] removed
2023-07-06 15:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=5, name=kotlin)] converted to TagDTO: [TagDTO(id=5, name=kotlin)]
2023-07-06 15:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=5, name=kotlin)] converted to Tag model: [Tag(id=5, name=kotlin)]
2023-07-06 15:59:15 DEBUG Delete tag : Optional.empty
2023-07-06 15:59:15 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-06 15:59:15 DEBUG [TagMappingService] TagDTO:[TagDTO(id=4, name=c-sharp)] converted to Tag model: [Tag(id=4, name=c-sharp)]
2023-07-06 15:59:15 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 15:59:15 DEBUG H2 DataSource created
2023-07-06 15:59:15 DEBUG EntityManagerFactory created
2023-07-06 15:59:16 DEBUG JpaTransactionManager created
2023-07-06 15:59:16 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:16 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])], for Receipt.ID:[5]
2023-07-06 15:59:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:16 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:16 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:16 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:16 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:16 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:16 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 15:59:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:16 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:17 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 15:59:17 DEBUG [UserService.findById()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for ID:[3]
2023-07-06 15:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN)]
2023-07-06 15:59:17 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:17 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:17 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:17 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 15:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER)]
2023-07-06 15:59:17 DEBUG [UserMappingService] UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER)]
2023-07-06 16:02:30 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 16:02:37 DEBUG H2 DataSource created
2023-07-06 16:02:38 DEBUG EntityManagerFactory created
2023-07-06 16:02:47 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 16:02:48 DEBUG JpaTransactionManager created
2023-07-06 16:04:47 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 16:04:50 DEBUG H2 DataSource created
2023-07-06 16:04:51 DEBUG EntityManagerFactory created
2023-07-06 16:04:55 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 16:04:56 DEBUG JpaTransactionManager created
2023-07-06 16:10:05 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 16:10:08 DEBUG H2 DataSource created
2023-07-06 16:10:09 DEBUG EntityManagerFactory created
2023-07-06 16:10:13 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 16:10:14 DEBUG JpaTransactionManager created
2023-07-06 16:10:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:10:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:10:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:10:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:10:28 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-06 16:11:19 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-06 16:11:19 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-06 16:11:19 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-06 16:11:19 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-06 16:11:20 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-06 16:11:20 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-06 16:11:20 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4NjQ5MDgwLCJleHAiOjE2ODg3MzU0ODB9.n64c86MCAU5uwdKd0_LYgDFhR4SnKR9-Tyg91lZGDQE, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-06 16:11:34 DEBUG User is not authenticated yet...
2023-07-06 16:11:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-06 16:11:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-06 16:11:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=4SEgIXZKaXOZ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=jIkAAQwsP, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=3Dx9KZp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=BiZIzGokPq, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=w9qdwSvFb2So, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=pu1iNg, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=di7uJL4Fhuwa, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=xYNvdz7CFvE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=VW8Q4sQS2EM1, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=Et0ygqb, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=O8Mey9b0S, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserMappingService] User model: [User(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=vGOEpECUp0, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:11:34 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=2, email=garbuckel1@google.co.jp, firstName=Georgina, lastName=Arbuckel, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[]), UserDTO(id=4, email=btooher3@wikispaces.com, firstName=Bent, lastName=Tooher, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=5, email=mbilney4@ucoz.com, firstName=Martelle, lastName=Bilney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=6, email=vhalbord5@washingtonpost.com, firstName=Vale, lastName=Halbord, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=7, email=ttodhunter6@macromedia.com, firstName=Theodoric, lastName=Todhunter, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=8, email=lianiello7@tripod.com, firstName=Lenci, lastName=Ianiello, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=9, email=apinwill8@census.gov, firstName=Algernon, lastName=Pinwill, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=10, email=bmyrick9@wp.com, firstName=Beck, lastName=Myrick, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=11, email=gvaggesa@upenn.edu, firstName=Giselbert, lastName=Vagges, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=12, email=eperrisb@freewebs.com, firstName=Elinore, lastName=Perris, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=13, email=rkullerc@toplist.cz, firstName=Ruthe, lastName=Kuller, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=14, email=rflatmand@multiply.com, firstName=Ronica, lastName=Flatman, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=15, email=kbayforde@chronoengine.com, firstName=King, lastName=Bayford, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 16:12:02 DEBUG User is not authenticated yet...
2023-07-06 16:12:02 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-06 16:12:02 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-06 16:12:02 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=16, email=mandrichukf@ifeng.com, firstName=Mayor, lastName=Andrichuk, password=cUdDP5sjYxd, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=16, email=mandrichukf@ifeng.com, firstName=Mayor, lastName=Andrichuk, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=17, email=rwoodhallg@buzzfeed.com, firstName=Reggie, lastName=Woodhall, password=eMbvwIIY, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=17, email=rwoodhallg@buzzfeed.com, firstName=Reggie, lastName=Woodhall, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=18, email=kandrich@mysql.com, firstName=Kathrine, lastName=Andric, password=azhiUUalBxp, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=18, email=kandrich@mysql.com, firstName=Kathrine, lastName=Andric, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=19, email=gelmesi@cyberchimps.com, firstName=Gusella, lastName=Elmes, password=iEnOwg9U, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=19, email=gelmesi@cyberchimps.com, firstName=Gusella, lastName=Elmes, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=20, email=lswetlandj@stanford.edu, firstName=Latashia, lastName=Swetland, password=T0xFikyE, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=20, email=lswetlandj@stanford.edu, firstName=Latashia, lastName=Swetland, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=21, email=ahorneyk@imageshack.us, firstName=Adriana, lastName=Horney, password=pq3h5ufhdp9, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=21, email=ahorneyk@imageshack.us, firstName=Adriana, lastName=Horney, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=22, email=rgrzegorczykl@xinhuanet.com, firstName=Roderick, lastName=Grzegorczyk, password=vRv4og, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=22, email=rgrzegorczykl@xinhuanet.com, firstName=Roderick, lastName=Grzegorczyk, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=23, email=drenzom@google.ca, firstName=Darlene, lastName=Renzo, password=0UP0T8mjJHU, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=23, email=drenzom@google.ca, firstName=Darlene, lastName=Renzo, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=24, email=eromainesn@cdbaby.com, firstName=Ebba, lastName=Romaines, password=Yz8vpLeDn, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=24, email=eromainesn@cdbaby.com, firstName=Ebba, lastName=Romaines, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=25, email=ssaddlero@sun.com, firstName=Shani, lastName=Saddler, password=RWL0Na, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=25, email=ssaddlero@sun.com, firstName=Shani, lastName=Saddler, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=26, email=svasilkovp@china.com.cn, firstName=Sutherlan, lastName=Vasilkov, password=hsUXlWd7gqJ, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=26, email=svasilkovp@china.com.cn, firstName=Sutherlan, lastName=Vasilkov, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=27, email=dslowcockq@nymag.com, firstName=Devan, lastName=Slowcock, password=m74nzYn, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=27, email=dslowcockq@nymag.com, firstName=Devan, lastName=Slowcock, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=28, email=evanderbekenr@dropbox.com, firstName=Eloisa, lastName=Van der Beken, password=tdr6k23J, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=28, email=evanderbekenr@dropbox.com, firstName=Eloisa, lastName=Van der Beken, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=29, email=lourrys@elegantthemes.com, firstName=Lev, lastName=Ourry, password=dUuNQOM5, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=29, email=lourrys@elegantthemes.com, firstName=Lev, lastName=Ourry, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserMappingService] User model: [User(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=jI3oGR0vKvD, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-06 16:12:02 DEBUG [UserService.findAll()] Users received from database: [[UserDTO(id=16, email=mandrichukf@ifeng.com, firstName=Mayor, lastName=Andrichuk, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=17, email=rwoodhallg@buzzfeed.com, firstName=Reggie, lastName=Woodhall, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=18, email=kandrich@mysql.com, firstName=Kathrine, lastName=Andric, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=19, email=gelmesi@cyberchimps.com, firstName=Gusella, lastName=Elmes, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=20, email=lswetlandj@stanford.edu, firstName=Latashia, lastName=Swetland, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=21, email=ahorneyk@imageshack.us, firstName=Adriana, lastName=Horney, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=22, email=rgrzegorczykl@xinhuanet.com, firstName=Roderick, lastName=Grzegorczyk, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=23, email=drenzom@google.ca, firstName=Darlene, lastName=Renzo, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=24, email=eromainesn@cdbaby.com, firstName=Ebba, lastName=Romaines, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=25, email=ssaddlero@sun.com, firstName=Shani, lastName=Saddler, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=26, email=svasilkovp@china.com.cn, firstName=Sutherlan, lastName=Vasilkov, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=27, email=dslowcockq@nymag.com, firstName=Devan, lastName=Slowcock, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=28, email=evanderbekenr@dropbox.com, firstName=Eloisa, lastName=Van der Beken, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=29, email=lourrys@elegantthemes.com, firstName=Lev, lastName=Ourry, password=null, userRole=CUSTOMER, receipts=[]), UserDTO(id=30, email=mstaniont@cloudflare.com, firstName=Maybelle, lastName=Stanion, password=null, userRole=CUSTOMER, receipts=[])]]
2023-07-06 16:14:10 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 16:18:33 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 16:18:58 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 16:19:01 DEBUG H2 DataSource created
2023-07-06 16:19:01 DEBUG EntityManagerFactory created
2023-07-06 16:19:05 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 16:19:06 DEBUG JpaTransactionManager created
2023-07-06 16:19:09 DEBUG User is not authenticated yet...
2023-07-06 16:19:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-06 16:19:10 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-06 16:19:10 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-06 16:19:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:19:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:19:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:19:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:19:16 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-06 16:19:59 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-06 16:20:02 DEBUG H2 DataSource created
2023-07-06 16:20:03 DEBUG EntityManagerFactory created
2023-07-06 16:20:15 DEBUG Filter 'authTokenFilter' configured for use
2023-07-06 16:20:15 DEBUG JpaTransactionManager created
2023-07-06 16:21:17 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:21:17 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:21:17 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:21:17 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-06 16:21:17 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 08:52:30 DEBUG Running with Spring Boot v3.1.0, Spring v6.0.9
2023-07-07 08:52:36 DEBUG H2 DataSource created
2023-07-07 08:52:37 DEBUG EntityManagerFactory created
2023-07-07 08:52:48 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 08:52:49 DEBUG JpaTransactionManager created
2023-07-07 08:54:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 08:54:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 08:54:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 08:54:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 08:54:09 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 08:54:34 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-07 08:54:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 08:54:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 08:54:34 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 08:54:34 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 08:54:34 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 08:54:35 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4NzA5Mjc0LCJleHAiOjE2ODg3OTU2NzR9.oe0zctRj-X87-SibhDW6_l_0SLUHZfJNQq_6T51Iggg, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-07 08:54:49 DEBUG User is not authenticated yet...
2023-07-07 08:54:49 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 08:54:49 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 08:54:49 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 08:54:49 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-07-07 08:54:49 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-07-07 08:54:49 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-07-07 08:54:49 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-07-07 08:54:49 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-07-07 08:54:49 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-07T05:54:49.863058500, lastUpdateDate=2023-07-07T05:54:49.863058500)] has been saved.
2023-07-07 08:54:49 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-07-07 08:54:49 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-07T05:54:49.863058500, lastUpdateDate=2023-07-07T05:54:49.863058500)] converted to DTO: [GiftCertificateDTO(id=5, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-07T05:54:49.863058500, lastUpdateDate=2023-07-07T05:54:49.863058500, tags=[])]
[35;1m2023-07-07 08:57:47 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 08:57:50 DEBUG H2 DataSource created
2023-07-07 08:57:50 DEBUG EntityManagerFactory created
[35;1m2023-07-07 09:38:14 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 09:38:17 DEBUG H2 DataSource created
2023-07-07 09:38:18 DEBUG EntityManagerFactory created
2023-07-07 10:37:47 DEBUG EntityManagerFactory created
2023-07-07 10:37:53 DEBUG EntityManagerFactory created
2023-07-07 10:37:54 DEBUG EntityManagerFactory created
2023-07-07 10:37:56 DEBUG EntityManagerFactory created
2023-07-07 10:37:58 DEBUG EntityManagerFactory created
2023-07-07 10:38:00 DEBUG EntityManagerFactory created
2023-07-07 10:38:02 DEBUG EntityManagerFactory created
2023-07-07 10:38:03 DEBUG EntityManagerFactory created
2023-07-07 10:38:04 DEBUG EntityManagerFactory created
2023-07-07 10:38:05 DEBUG EntityManagerFactory created
2023-07-07 10:39:53 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 10:39:57 DEBUG H2 DataSource created
2023-07-07 10:39:57 DEBUG EntityManagerFactory created
2023-07-07 10:40:01 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 10:40:01 DEBUG JpaTransactionManager created
2023-07-07 10:40:47 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 10:40:47 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 10:40:47 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 10:40:47 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 10:40:47 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 11:12:02 DEBUG EntityManagerFactory created
2023-07-07 11:12:10 DEBUG EntityManagerFactory created
2023-07-07 11:12:12 DEBUG EntityManagerFactory created
2023-07-07 11:12:14 DEBUG EntityManagerFactory created
2023-07-07 11:12:16 DEBUG EntityManagerFactory created
2023-07-07 11:12:17 DEBUG EntityManagerFactory created
2023-07-07 11:12:18 DEBUG EntityManagerFactory created
2023-07-07 11:12:19 DEBUG EntityManagerFactory created
2023-07-07 11:12:21 DEBUG EntityManagerFactory created
2023-07-07 11:12:22 DEBUG EntityManagerFactory created
2023-07-07 11:44:40 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 11:44:43 DEBUG H2 DataSource created
2023-07-07 11:44:43 DEBUG EntityManagerFactory created
2023-07-07 11:44:47 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 11:44:47 DEBUG JpaTransactionManager created
2023-07-07 11:46:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:46:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:46:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:46:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:46:09 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 11:50:29 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 11:50:32 DEBUG H2 DataSource created
2023-07-07 11:50:33 DEBUG EntityManagerFactory created
2023-07-07 11:50:36 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 11:50:36 DEBUG JpaTransactionManager created
2023-07-07 11:50:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:50:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:50:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:50:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:50:53 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 11:54:02 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 11:54:05 DEBUG H2 DataSource created
2023-07-07 11:54:05 DEBUG EntityManagerFactory created
2023-07-07 11:54:09 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 11:54:09 DEBUG JpaTransactionManager created
2023-07-07 11:54:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:54:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:54:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:54:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 11:54:13 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 12:16:16 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 12:16:19 DEBUG H2 DataSource created
2023-07-07 12:16:20 DEBUG EntityManagerFactory created
2023-07-07 12:16:23 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 12:16:24 DEBUG JpaTransactionManager created
2023-07-07 12:18:19 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 12:18:22 DEBUG H2 DataSource created
2023-07-07 12:18:23 DEBUG EntityManagerFactory created
2023-07-07 12:18:26 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 12:18:26 DEBUG JpaTransactionManager created
2023-07-07 12:20:10 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-07 12:20:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:20:11 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:20:11 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 12:20:11 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:20:11 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:20:11 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4NzIxNjExLCJleHAiOjE2ODg4MDgwMTF9.1G1Q1tzRBcNaONbSz4XPZ7miTe5v2YZi3-obOgmyOi8, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-07 12:20:27 DEBUG User is not authenticated yet...
2023-07-07 12:20:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:20:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:20:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 12:26:55 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 12:26:58 DEBUG H2 DataSource created
2023-07-07 12:26:59 DEBUG EntityManagerFactory created
2023-07-07 12:27:03 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 12:27:03 DEBUG JpaTransactionManager created
2023-07-07 12:28:44 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-07 12:28:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:28:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:28:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 12:28:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:28:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:28:45 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg4NzIyMTI1LCJleHAiOjE2ODg4MDg1MjV9.ekRmmpf0SVniAHJEysVG3wIIDNFJSXC3I9BY0oTF24M, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-07 12:28:56 DEBUG User is not authenticated yet...
2023-07-07 12:28:56 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:28:56 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:28:56 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 12:28:56 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-07 12:28:56 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for Receipt.ID:[6]
2023-07-07 12:29:17 DEBUG User is not authenticated yet...
2023-07-07 12:29:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:29:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:29:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 12:29:17 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=4, price=128.0, createDate=2023-05-01T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=4, price=128.0, createDate=2023-05-01T15:58:05.284, userDTO=null)]
2023-07-07 12:29:17 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=6, price=111.0, createDate=2023-03-22T15:58:05.284)] converted to ReceiptDTO: [ReceiptDTO(id=6, price=111.0, createDate=2023-03-22T15:58:05.284, userDTO=null)]
2023-07-07 12:29:17 DEBUG [ReceiptService.findAllByUser()] Receipts received from database: [[ReceiptDTO(id=4, price=128.0, createDate=2023-05-01T15:58:05.284, userDTO=null), ReceiptDTO(id=6, price=111.0, createDate=2023-03-22T15:58:05.284, userDTO=null)]], for User.ID: [3]
2023-07-07 12:29:39 DEBUG User is not authenticated yet...
2023-07-07 12:29:39 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 12:29:39 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 12:29:39 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 12:29:39 DEBUG [UserMappingService] User model: [User(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=Iddpw3, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])]
2023-07-07 12:29:39 DEBUG [UserService.findByReceipt()] User received from database: [UserDTO(id=3, email=lblatchford2@rambler.ru, firstName=Liesa, lastName=Blatchford, password=null, userRole=ADMIN, receipts=[])], for Receipt.ID:[6]
2023-07-07 13:04:41 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:09:59 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:12:44 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:13:43 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:13:45 DEBUG H2 DataSource created
2023-07-07 13:13:46 DEBUG EntityManagerFactory created
2023-07-07 13:13:49 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 13:13:50 DEBUG JpaTransactionManager created
2023-07-07 13:14:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:05 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:14:32 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:32 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:32 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:14:55 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:55 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:14:55 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:15:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:15:14 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:15:14 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:15:36 DEBUG User is not authenticated yet...
2023-07-07 13:15:36 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-07 13:15:36 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-07 13:15:36 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-07 13:15:36 DEBUG [TagMappingService] Tag model: [Tag(id=3, name=c)] converted to TagDTO: [TagDTO(id=3, name=c)]
2023-07-07 13:15:36 DEBUG [TagMappingService] Tag model: [Tag(id=4, name=c-sharp)] converted to TagDTO: [TagDTO(id=4, name=c-sharp)]
2023-07-07 13:15:36 DEBUG [TagMappingService] Tag model: [Tag(id=6, name=visual basic)] converted to TagDTO: [TagDTO(id=6, name=visual basic)]
2023-07-07 13:15:36 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=3, name=c), TagDTO(id=4, name=c-sharp), TagDTO(id=6, name=visual basic)]], for GiftCertificate.ID: [2]
2023-07-07 13:15:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:15:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:15:53 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[]), GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:16:07 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:16:07 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:16:19 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:16:19 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:16:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:16:33 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:18:27 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:18:31 DEBUG H2 DataSource created
2023-07-07 13:18:32 DEBUG EntityManagerFactory created
2023-07-07 13:18:36 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 13:18:36 DEBUG JpaTransactionManager created
2023-07-07 13:19:28 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:19:32 DEBUG H2 DataSource created
2023-07-07 13:19:32 DEBUG EntityManagerFactory created
2023-07-07 13:19:36 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 13:19:36 DEBUG JpaTransactionManager created
2023-07-07 13:20:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:20:05 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:20:26 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:20:26 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:20:48 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:20:48 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:22:05 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:22:08 DEBUG H2 DataSource created
2023-07-07 13:22:09 DEBUG EntityManagerFactory created
2023-07-07 13:22:12 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 13:22:12 DEBUG JpaTransactionManager created
2023-07-07 13:22:27 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:22:27 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:22:41 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:22:41 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:22:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:22:51 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:27:48 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:28:57 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:30:30 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:31:30 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:31:53 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:34:21 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:37:19 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:39:18 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:40:01 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 13:40:03 DEBUG H2 DataSource created
2023-07-07 13:40:04 DEBUG EntityManagerFactory created
2023-07-07 13:40:07 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 13:40:08 DEBUG JpaTransactionManager created
2023-07-07 13:40:17 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:40:17 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:40:26 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:40:26 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:40:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:40:33 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:40:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:40:43 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:40:53 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:40:53 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:41:00 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:41:00 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=2, name=microsoft, description=monopoly, price=255.0, duration=2, createDate=2023-03-23T15:59:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:41:07 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 13:41:07 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 13:45:13 DEBUG EntityManagerFactory created
2023-07-07 13:45:20 DEBUG EntityManagerFactory created
2023-07-07 13:45:23 DEBUG EntityManagerFactory created
2023-07-07 13:45:25 DEBUG EntityManagerFactory created
2023-07-07 13:45:26 DEBUG EntityManagerFactory created
2023-07-07 13:45:27 DEBUG EntityManagerFactory created
2023-07-07 13:45:28 DEBUG EntityManagerFactory created
2023-07-07 13:45:29 DEBUG EntityManagerFactory created
2023-07-07 13:45:30 DEBUG EntityManagerFactory created
2023-07-07 13:46:17 DEBUG EntityManagerFactory created
2023-07-07 13:46:26 DEBUG JpaTransactionManager created
2023-07-07 13:46:29 DEBUG EntityManagerFactory created
2023-07-07 13:46:30 DEBUG JpaTransactionManager created
2023-07-07 13:46:31 DEBUG EntityManagerFactory created
2023-07-07 13:46:31 DEBUG JpaTransactionManager created
2023-07-07 13:46:33 DEBUG EntityManagerFactory created
2023-07-07 13:46:33 DEBUG JpaTransactionManager created
2023-07-07 13:46:34 DEBUG EntityManagerFactory created
2023-07-07 13:46:34 DEBUG JpaTransactionManager created
2023-07-07 13:46:35 DEBUG EntityManagerFactory created
2023-07-07 13:46:35 DEBUG JpaTransactionManager created
2023-07-07 13:46:36 DEBUG EntityManagerFactory created
2023-07-07 13:46:37 DEBUG JpaTransactionManager created
2023-07-07 13:46:38 DEBUG EntityManagerFactory created
2023-07-07 13:46:39 DEBUG JpaTransactionManager created
2023-07-07 13:46:39 DEBUG EntityManagerFactory created
2023-07-07 13:46:39 DEBUG JpaTransactionManager created
2023-07-07 13:46:40 DEBUG EntityManagerFactory created
2023-07-07 13:46:41 DEBUG JpaTransactionManager created
2023-07-07 13:49:47 DEBUG EntityManagerFactory created
2023-07-07 13:49:51 DEBUG JpaTransactionManager created
2023-07-07 13:49:52 DEBUG EntityManagerFactory created
2023-07-07 13:49:53 DEBUG JpaTransactionManager created
2023-07-07 13:49:53 DEBUG EntityManagerFactory created
2023-07-07 13:49:54 DEBUG JpaTransactionManager created
2023-07-07 13:49:55 DEBUG EntityManagerFactory created
2023-07-07 13:49:56 DEBUG JpaTransactionManager created
2023-07-07 13:49:56 DEBUG EntityManagerFactory created
2023-07-07 13:49:57 DEBUG JpaTransactionManager created
2023-07-07 13:49:58 DEBUG EntityManagerFactory created
2023-07-07 13:49:58 DEBUG JpaTransactionManager created
2023-07-07 13:49:59 DEBUG EntityManagerFactory created
2023-07-07 13:49:59 DEBUG JpaTransactionManager created
2023-07-07 13:50:00 DEBUG EntityManagerFactory created
2023-07-07 13:50:00 DEBUG JpaTransactionManager created
2023-07-07 13:50:01 DEBUG EntityManagerFactory created
2023-07-07 13:50:01 DEBUG JpaTransactionManager created
2023-07-07 13:50:02 DEBUG EntityManagerFactory created
2023-07-07 13:50:02 DEBUG JpaTransactionManager created
2023-07-07 13:54:56 DEBUG EntityManagerFactory created
2023-07-07 13:55:02 DEBUG JpaTransactionManager created
2023-07-07 13:55:03 DEBUG EntityManagerFactory created
2023-07-07 13:55:04 DEBUG JpaTransactionManager created
2023-07-07 13:55:05 DEBUG EntityManagerFactory created
2023-07-07 13:55:05 DEBUG JpaTransactionManager created
2023-07-07 13:55:06 DEBUG EntityManagerFactory created
2023-07-07 13:55:07 DEBUG JpaTransactionManager created
2023-07-07 13:55:08 DEBUG EntityManagerFactory created
2023-07-07 13:55:08 DEBUG JpaTransactionManager created
2023-07-07 13:55:09 DEBUG EntityManagerFactory created
2023-07-07 13:55:09 DEBUG JpaTransactionManager created
2023-07-07 13:55:10 DEBUG EntityManagerFactory created
2023-07-07 13:55:10 DEBUG JpaTransactionManager created
2023-07-07 13:55:11 DEBUG EntityManagerFactory created
2023-07-07 13:55:11 DEBUG JpaTransactionManager created
2023-07-07 13:55:11 DEBUG EntityManagerFactory created
2023-07-07 13:55:12 DEBUG JpaTransactionManager created
2023-07-07 13:55:12 DEBUG EntityManagerFactory created
2023-07-07 13:55:13 DEBUG JpaTransactionManager created
2023-07-07 13:56:16 DEBUG EntityManagerFactory created
2023-07-07 13:56:21 DEBUG EntityManagerFactory created
2023-07-07 13:56:22 DEBUG EntityManagerFactory created
2023-07-07 13:56:23 DEBUG EntityManagerFactory created
2023-07-07 13:56:24 DEBUG EntityManagerFactory created
2023-07-07 13:56:25 DEBUG EntityManagerFactory created
2023-07-07 13:56:26 DEBUG EntityManagerFactory created
2023-07-07 13:56:27 DEBUG EntityManagerFactory created
2023-07-07 13:56:27 DEBUG EntityManagerFactory created
2023-07-07 13:56:28 DEBUG EntityManagerFactory created
2023-07-07 14:03:07 DEBUG EntityManagerFactory created
2023-07-07 14:03:12 DEBUG EntityManagerFactory created
2023-07-07 14:03:13 DEBUG EntityManagerFactory created
2023-07-07 14:03:14 DEBUG EntityManagerFactory created
2023-07-07 14:03:15 DEBUG EntityManagerFactory created
2023-07-07 14:03:17 DEBUG EntityManagerFactory created
2023-07-07 14:03:18 DEBUG EntityManagerFactory created
2023-07-07 14:03:20 DEBUG EntityManagerFactory created
2023-07-07 14:03:21 DEBUG EntityManagerFactory created
2023-07-07 14:03:23 DEBUG EntityManagerFactory created
[35;1m2023-07-07 14:06:45 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 14:24:15 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 14:24:19 DEBUG H2 DataSource created
2023-07-07 14:24:20 DEBUG EntityManagerFactory created
2023-07-07 14:24:23 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 14:24:24 DEBUG JpaTransactionManager created
2023-07-07 14:51:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 14:51:51 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 14:52:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 14:52:04 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 14:57:35 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 14:57:38 DEBUG H2 DataSource created
2023-07-07 14:57:39 DEBUG EntityManagerFactory created
2023-07-07 14:57:42 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 14:57:43 DEBUG JpaTransactionManager created
2023-07-07 14:57:49 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 14:57:49 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-07 15:02:16 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 15:10:50 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 15:10:53 DEBUG H2 DataSource created
2023-07-07 15:10:53 DEBUG EntityManagerFactory created
2023-07-07 15:10:57 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 15:10:58 DEBUG JpaTransactionManager created
2023-07-07 15:58:22 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 16:23:38 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 16:24:54 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 16:24:57 DEBUG H2 DataSource created
2023-07-07 16:24:57 DEBUG EntityManagerFactory created
2023-07-07 16:25:01 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 16:25:02 DEBUG JpaTransactionManager created
2023-07-07 16:25:12 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 16:25:12 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-07 16:27:30 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-07 16:40:20 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 16:48:45 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-07 16:48:48 DEBUG H2 DataSource created
2023-07-07 16:48:49 DEBUG EntityManagerFactory created
2023-07-07 16:48:52 DEBUG Filter 'authTokenFilter' configured for use
2023-07-07 16:48:53 DEBUG JpaTransactionManager created
2023-07-07 16:49:02 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 16:49:03 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=3, name=mixed, description=all-in-one, price=55.0, duration=2, createDate=2023-03-23T16:00:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 16:49:12 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 16:49:12 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=4, name=android, description=not familiar, price=225.0, duration=2, createDate=2023-03-23T17:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-07 16:49:20 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-07 16:49:20 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-07 16:56:46 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 16:56:49 DEBUG H2 DataSource created
2023-07-07 16:56:49 DEBUG EntityManagerFactory created
[35;1m2023-07-07 17:00:47 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 17:00:49 DEBUG H2 DataSource created
2023-07-07 17:00:50 DEBUG EntityManagerFactory created
2023-07-07 17:01:02 DEBUG JpaTransactionManager created
[35;1m2023-07-07 17:02:20 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-07 17:02:22 DEBUG H2 DataSource created
2023-07-07 17:02:23 DEBUG EntityManagerFactory created
2023-07-07 17:02:35 DEBUG JpaTransactionManager created
[35;1m2023-07-09 09:06:49 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-09 09:06:52 DEBUG H2 DataSource created
2023-07-09 09:06:53 DEBUG EntityManagerFactory created
2023-07-09 09:07:12 DEBUG JpaTransactionManager created
[35;1m2023-07-09 09:07:39 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-09 09:07:41 DEBUG H2 DataSource created
2023-07-09 09:07:42 DEBUG EntityManagerFactory created
2023-07-09 09:07:55 DEBUG JpaTransactionManager created
[35;1m2023-07-10 08:52:25 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 08:52:27 DEBUG H2 DataSource created
2023-07-10 08:52:28 DEBUG EntityManagerFactory created
2023-07-10 08:52:41 DEBUG JpaTransactionManager created
[35;1m2023-07-10 09:06:23 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 09:06:26 DEBUG H2 DataSource created
2023-07-10 09:06:26 DEBUG EntityManagerFactory created
2023-07-10 09:06:38 DEBUG JpaTransactionManager created
2023-07-10 09:42:43 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 09:44:08 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 09:44:11 DEBUG H2 DataSource created
2023-07-10 09:44:12 DEBUG EntityManagerFactory created
2023-07-10 09:44:16 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 09:44:17 DEBUG JpaTransactionManager created
2023-07-10 09:44:45 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 09:44:45 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-10 09:51:44 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 09:51:46 DEBUG H2 DataSource created
2023-07-10 09:51:47 DEBUG EntityManagerFactory created
2023-07-10 10:42:28 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 10:42:32 DEBUG H2 DataSource created
2023-07-10 10:42:33 DEBUG EntityManagerFactory created
2023-07-10 10:42:37 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 10:42:38 DEBUG JpaTransactionManager created
2023-07-10 10:47:44 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 10:47:48 DEBUG H2 DataSource created
2023-07-10 10:47:49 DEBUG EntityManagerFactory created
2023-07-10 10:47:52 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 10:47:53 DEBUG JpaTransactionManager created
[35;1m2023-07-10 10:50:32 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 10:50:35 DEBUG H2 DataSource created
2023-07-10 10:50:35 DEBUG EntityManagerFactory created
2023-07-10 11:04:50 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 11:04:54 DEBUG H2 DataSource created
2023-07-10 11:04:55 DEBUG EntityManagerFactory created
2023-07-10 11:04:59 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 11:05:01 DEBUG JpaTransactionManager created
2023-07-10 11:05:32 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 11:05:32 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-10 11:08:03 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 11:08:05 DEBUG H2 DataSource created
2023-07-10 11:08:06 DEBUG EntityManagerFactory created
[35;1m2023-07-10 11:10:10 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 11:10:12 DEBUG H2 DataSource created
2023-07-10 11:10:13 DEBUG EntityManagerFactory created
[35;1m2023-07-10 13:10:53 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 13:10:58 DEBUG H2 DataSource created
2023-07-10 13:10:59 DEBUG EntityManagerFactory created
2023-07-10 13:28:46 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 13:28:49 DEBUG H2 DataSource created
2023-07-10 13:28:50 DEBUG EntityManagerFactory created
2023-07-10 13:28:53 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 13:28:54 DEBUG JpaTransactionManager created
[35;1m2023-07-10 13:40:49 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 13:40:52 DEBUG H2 DataSource created
2023-07-10 13:40:52 DEBUG EntityManagerFactory created
2023-07-10 13:46:01 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 13:46:42 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 13:46:45 DEBUG H2 DataSource created
2023-07-10 13:46:46 DEBUG EntityManagerFactory created
2023-07-10 13:46:49 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 13:46:50 DEBUG JpaTransactionManager created
2023-07-10 13:47:49 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 13:47:52 DEBUG H2 DataSource created
2023-07-10 13:47:52 DEBUG EntityManagerFactory created
2023-07-10 13:47:56 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 13:47:57 DEBUG JpaTransactionManager created
2023-07-10 13:48:12 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 13:48:12 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-10 13:53:29 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 13:53:31 DEBUG H2 DataSource created
2023-07-10 13:53:32 DEBUG EntityManagerFactory created
2023-07-10 14:02:23 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 14:02:57 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 14:03:00 DEBUG H2 DataSource created
2023-07-10 14:03:01 DEBUG EntityManagerFactory created
2023-07-10 14:03:04 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 14:03:05 DEBUG JpaTransactionManager created
2023-07-10 14:03:12 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 14:03:12 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-10 14:05:25 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 14:05:27 DEBUG H2 DataSource created
2023-07-10 14:05:28 DEBUG EntityManagerFactory created
[35;1m2023-07-10 14:07:16 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 14:13:55 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 14:13:58 DEBUG H2 DataSource created
2023-07-10 14:13:59 DEBUG EntityManagerFactory created
2023-07-10 14:14:02 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 14:14:03 DEBUG JpaTransactionManager created
2023-07-10 14:14:12 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 14:14:12 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-10 14:16:54 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 14:16:56 DEBUG H2 DataSource created
2023-07-10 14:16:57 DEBUG EntityManagerFactory created
2023-07-10 14:23:52 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 14:23:55 DEBUG H2 DataSource created
2023-07-10 14:23:56 DEBUG EntityManagerFactory created
2023-07-10 14:23:59 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 14:24:00 DEBUG JpaTransactionManager created
[35;1m2023-07-10 14:25:25 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 14:25:27 DEBUG H2 DataSource created
2023-07-10 14:25:27 DEBUG EntityManagerFactory created
2023-07-10 14:57:55 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 14:57:59 DEBUG H2 DataSource created
2023-07-10 14:57:59 DEBUG EntityManagerFactory created
2023-07-10 14:58:03 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 14:58:04 DEBUG JpaTransactionManager created
2023-07-10 14:58:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 14:58:38 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-10 15:03:15 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 15:03:18 DEBUG H2 DataSource created
2023-07-10 15:03:18 DEBUG EntityManagerFactory created
2023-07-10 15:05:06 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 15:05:09 DEBUG H2 DataSource created
2023-07-10 15:05:10 DEBUG EntityManagerFactory created
2023-07-10 15:05:15 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 15:05:16 DEBUG JpaTransactionManager created
2023-07-10 15:05:27 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 15:05:27 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-10 15:06:58 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 15:07:00 DEBUG H2 DataSource created
2023-07-10 15:07:01 DEBUG EntityManagerFactory created
[35;1m2023-07-10 15:43:47 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-10 15:43:50 DEBUG H2 DataSource created
2023-07-10 15:43:50 DEBUG EntityManagerFactory created
2023-07-10 15:49:15 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 15:49:18 DEBUG H2 DataSource created
2023-07-10 15:49:19 DEBUG EntityManagerFactory created
2023-07-10 15:49:22 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 15:49:24 DEBUG JpaTransactionManager created
2023-07-10 15:54:08 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 15:54:08 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-10 15:54:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-10 15:54:33 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-10 16:04:20 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-10 16:04:23 DEBUG H2 DataSource created
2023-07-10 16:04:24 DEBUG EntityManagerFactory created
2023-07-10 16:04:29 DEBUG Filter 'authTokenFilter' configured for use
2023-07-10 16:04:29 DEBUG JpaTransactionManager created
[35;1m2023-07-11 10:20:16 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-11 10:20:21 DEBUG H2 DataSource created
2023-07-11 10:20:22 DEBUG EntityManagerFactory created
2023-07-11 10:20:49 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 10:20:56 DEBUG H2 DataSource created
2023-07-11 10:20:56 DEBUG EntityManagerFactory created
2023-07-11 10:21:01 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 10:21:01 DEBUG JpaTransactionManager created
2023-07-11 10:28:48 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 10:28:53 DEBUG H2 DataSource created
2023-07-11 10:28:54 DEBUG EntityManagerFactory created
2023-07-11 10:29:00 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 10:29:01 DEBUG JpaTransactionManager created
2023-07-11 10:31:14 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 10:31:17 DEBUG H2 DataSource created
2023-07-11 10:31:18 DEBUG EntityManagerFactory created
2023-07-11 10:31:21 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 10:31:22 DEBUG JpaTransactionManager created
2023-07-11 10:40:58 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 10:41:01 DEBUG H2 DataSource created
2023-07-11 10:41:02 DEBUG EntityManagerFactory created
2023-07-11 10:41:05 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 10:41:05 DEBUG JpaTransactionManager created
2023-07-11 10:41:13 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-11 10:41:13 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-11 10:44:23 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-11 10:50:48 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 10:50:51 DEBUG H2 DataSource created
2023-07-11 10:50:52 DEBUG EntityManagerFactory created
2023-07-11 10:50:55 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 10:50:56 DEBUG JpaTransactionManager created
2023-07-11 10:51:12 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-11 10:51:12 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-11 10:53:32 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-11 11:41:34 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 11:41:40 DEBUG H2 DataSource created
2023-07-11 11:41:41 DEBUG EntityManagerFactory created
2023-07-11 11:41:45 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 11:41:45 DEBUG JpaTransactionManager created
2023-07-11 11:41:54 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-11 11:41:54 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-11 11:52:40 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-11 11:54:05 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-11 12:06:44 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-11 12:10:18 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-11 12:14:04 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 12:14:07 DEBUG H2 DataSource created
2023-07-11 12:14:07 DEBUG EntityManagerFactory created
2023-07-11 12:14:12 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 12:14:12 DEBUG JpaTransactionManager created
2023-07-11 12:14:35 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-11 12:14:35 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-11 12:16:29 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 12:16:32 DEBUG H2 DataSource created
2023-07-11 12:16:33 DEBUG EntityManagerFactory created
2023-07-11 12:16:37 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 12:16:37 DEBUG JpaTransactionManager created
2023-07-11 12:17:03 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-11 12:17:03 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
[35;1m2023-07-11 13:13:19 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-11 16:27:26 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m[35;1m2023-07-11 16:45:14 DEBUG Running with Spring Boot v1.0, Spring v1.0
[m2023-07-11 17:12:57 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-11 17:13:02 DEBUG H2 DataSource created
2023-07-11 17:13:02 DEBUG EntityManagerFactory created
2023-07-11 17:13:07 DEBUG Filter 'authTokenFilter' configured for use
2023-07-11 17:13:09 DEBUG JpaTransactionManager created
2023-07-11 17:13:16 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null)] converted to DTO: [GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]
2023-07-11 17:13:16 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=jvm, description=jvm based languages, price=255.0, duration=2, createDate=2023-03-23T15:58:05.284, lastUpdateDate=null, tags=[])]]
2023-07-13 11:06:09 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-13 11:06:15 DEBUG MySQL DataSource with HikariCP created
2023-07-13 11:06:17 DEBUG Schema creation script executed
2023-07-13 11:06:19 DEBUG Schema initialization script executed
2023-07-13 11:06:20 DEBUG EntityManagerFactory created
2023-07-13 11:06:24 DEBUG Filter 'authTokenFilter' configured for use
2023-07-13 11:06:24 DEBUG JpaTransactionManager created
2023-07-13 11:10:17 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-13 11:10:17 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-13 11:15:00 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-13 11:15:04 DEBUG MySQL DataSource with HikariCP created
2023-07-13 11:15:06 DEBUG Schema creation script executed
2023-07-13 11:15:08 DEBUG Schema initialization script executed
2023-07-13 11:15:08 DEBUG EntityManagerFactory created
2023-07-13 11:15:12 DEBUG Filter 'authTokenFilter' configured for use
2023-07-13 11:15:13 DEBUG JpaTransactionManager created
2023-07-13 11:15:22 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-13 11:15:22 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-13 11:15:33 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-13 11:15:33 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032)] converted to DTO: [GiftCertificateDTO(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012)] converted to DTO: [GiftCertificateDTO(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315)] converted to DTO: [GiftCertificateDTO(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026)] converted to DTO: [GiftCertificateDTO(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009)] converted to DTO: [GiftCertificateDTO(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410)] converted to DTO: [GiftCertificateDTO(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559)] converted to DTO: [GiftCertificateDTO(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397)] converted to DTO: [GiftCertificateDTO(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153)] converted to DTO: [GiftCertificateDTO(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008)] converted to DTO: [GiftCertificateDTO(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116)] converted to DTO: [GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350)] converted to DTO: [GiftCertificateDTO(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020)] converted to DTO: [GiftCertificateDTO(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889)] converted to DTO: [GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247)] converted to DTO: [GiftCertificateDTO(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779)] converted to DTO: [GiftCertificateDTO(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782)] converted to DTO: [GiftCertificateDTO(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447)] converted to DTO: [GiftCertificateDTO(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105)] converted to DTO: [GiftCertificateDTO(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548)] converted to DTO: [GiftCertificateDTO(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548, tags=[])]
2023-07-13 11:15:50 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=21, name=Jerrod1982, description=Quod et non ab debitis quos totam., price=3356.0, duration=3, createDate=2003-06-28T22:39:47.352, lastUpdateDate=2011-08-28T06:57:51.032, tags=[]), GiftCertificateDTO(id=22, name=Suarez82, description=Consectetur accusamus ut omnis ex aliquid rem., price=3619.0, duration=4, createDate=2002-09-04T19:22:12.753, lastUpdateDate=1996-12-01T20:55:45.012, tags=[]), GiftCertificateDTO(id=23, name=Abreu232, description=Sequi nesciunt repellat. Qui voluptas nesciunt? A repudiandae quaerat! Ut fuga laboriosam; optio sit optio; qui et ut. Fuga consequatur ut. Sunt officiis?, price=1544.0, duration=1, createDate=2012-11-08T18:28:12.534, lastUpdateDate=1980-04-14T05:27:39.315, tags=[]), GiftCertificateDTO(id=24, name=Shank212, description=Possimus veritatis aut pariatur sapiente error. Necessitatibus sed ipsa. Sed sint unde! Doloremque omnis saepe. Qui magnam voluptatem? Perferendis quia., price=2952.0, duration=1, createDate=2019-06-13T01:37:31.194, lastUpdateDate=2013-05-08T06:59:38.026, tags=[]), GiftCertificateDTO(id=25, name=Elise28, description=Nesciunt magnam iure error iste perspiciatis ut., price=753.0, duration=7, createDate=2020-11-15T00:42:55.391, lastUpdateDate=2002-08-28T17:05:07.009, tags=[]), GiftCertificateDTO(id=26, name=Alcala1977, description=Natus et quas. Modi accusamus unde. Nesciunt eaque in! Nesciunt dicta ipsa. Facilis amet enim! Sunt ut sed. Molestiae dolores consequatur! Aut quia rem., price=4391.0, duration=1, createDate=1986-11-29T14:53:27.250, lastUpdateDate=2004-10-08T23:23:20.410, tags=[]), GiftCertificateDTO(id=27, name=Abernathy6, description=Distinctio modi in. Vitae neque ut in. Rerum quisquam iusto et! Sunt unde nostrum adipisci voluptatem veritatis perspiciatis. Animi iste expedita. Et eum., price=4011.0, duration=3, createDate=1975-06-20T11:07:13.474, lastUpdateDate=1995-10-31T21:20:26.559, tags=[]), GiftCertificateDTO(id=28, name=Lindsey295, description=Voluptatem sit quod. Dolore et rerum! Aut sunt totam; assumenda nesciunt natus. Excepturi sit praesentium! Earum quia inventore; ipsa ullam sed. Sit!, price=3863.0, duration=3, createDate=1979-06-25T04:20:22.495, lastUpdateDate=1975-11-02T09:12:47.397, tags=[]), GiftCertificateDTO(id=29, name=Hubert2025, description=Odit hic sit. Rem dolor recusandae possimus dolorum eveniet officiis. Quisquam molestiae a quia consectetur. Culpa autem deserunt odit ut., price=4505.0, duration=2, createDate=2009-05-21T22:18:02.548, lastUpdateDate=1997-04-28T19:09:11.153, tags=[]), GiftCertificateDTO(id=30, name=Paris24, description=Iure sit excepturi fugit omnis natus adipisci. Natus consequatur minima eos ea necessitatibus sapiente., price=278.0, duration=8, createDate=2022-09-02T03:04:56.393, lastUpdateDate=1994-09-05T11:51:10.008, tags=[]), GiftCertificateDTO(id=31, name=Muncy1, description=Ullam praesentium consequuntur. Mollitia nisi debitis alias! Eligendi iusto eius atque ut? Possimus quasi praesentium rerum qui nobis illum., price=2885.0, duration=5, createDate=2017-10-11T09:36:39.448, lastUpdateDate=1984-09-24T08:43:10.116, tags=[]), GiftCertificateDTO(id=32, name=Jestine2015, description=Ea veritatis et vero amet qui nemo., price=3617.0, duration=8, createDate=2018-11-02T20:40:12.941, lastUpdateDate=1984-06-21T18:42:59.350, tags=[]), GiftCertificateDTO(id=33, name=Alexander3, description=Exercitationem aliquam incidunt. Quod quidem rem; quae voluptatem incidunt. Inventore et architecto. Eum dolorem necessitatibus! Necessitatibus qui molestias., price=2694.0, duration=9, createDate=1996-03-08T12:26:00.434, lastUpdateDate=1971-08-08T09:29:11.020, tags=[]), GiftCertificateDTO(id=34, name=Seymour1989, description=Quasi et quaerat consectetur veniam itaque non; eveniet quae nulla perspiciatis quas nobis iure. Est eveniet voluptatem mollitia! Est alias modi., price=4555.0, duration=7, createDate=1984-11-14T20:09:49.857, lastUpdateDate=1993-05-19T18:40:43.889, tags=[]), GiftCertificateDTO(id=35, name=Lorretta2028, description=Reprehenderit facilis ut iusto sed impedit. Maiores qui quidem! Molestias est officiis; qui eaque praesentium omnis? Aut id ut rerum dolorem enim voluptatem., price=3753.0, duration=5, createDate=2002-09-20T08:03:28.679, lastUpdateDate=2011-01-17T05:57:22.247, tags=[]), GiftCertificateDTO(id=36, name=Andre58, description=Alias molestiae omnis natus. Tenetur consequatur iusto natus. Autem molestiae architecto aut consequatur. Qui quis odio qui dolorum voluptatem., price=1652.0, duration=5, createDate=1991-10-12T05:16:12.004, lastUpdateDate=1994-01-07T02:28:42.779, tags=[]), GiftCertificateDTO(id=37, name=Carlson9, description=Soluta beatae omnis. Qui nobis dolor. Velit dolorem error! Rerum numquam et. Aliquid reprehenderit odio. Est libero omnis. Autem unde nemo! Voluptas qui et., price=2728.0, duration=5, createDate=2022-11-07T02:25:00.007, lastUpdateDate=1973-03-11T03:16:12.782, tags=[]), GiftCertificateDTO(id=38, name=Jefferies7, description=Blanditiis vel ex ducimus molestias dolorem iste., price=2473.0, duration=6, createDate=2008-12-28T12:02:04.743, lastUpdateDate=2020-08-26T21:40:49.447, tags=[]), GiftCertificateDTO(id=39, name=Verona3, description=Obcaecati nihil nam quo optio. Dolorum molestiae ut veritatis. Ut animi non ullam aperiam! Autem officiis quia illo vero officiis odio. Assumenda quisquam., price=3154.0, duration=6, createDate=2017-02-03T08:06:08.814, lastUpdateDate=1972-05-11T09:51:09.105, tags=[]), GiftCertificateDTO(id=40, name=Lanette688, description=Et quis aut. Ea neque repellat? Temporibus et quaerat. Sit facilis blanditiis! Perferendis quisquam saepe. Fuga animi voluptatem; unde ut quidem. Quam facere!, price=3252.0, duration=2, createDate=2000-12-25T05:49:10.034, lastUpdateDate=1981-09-15T15:11:52.548, tags=[])]]
2023-07-17 11:22:27 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 11:22:32 DEBUG MySQL DataSource with HikariCP created
2023-07-17 11:22:33 DEBUG Schema creation script executed
2023-07-17 11:22:36 DEBUG Schema initialization script executed
2023-07-17 11:22:36 DEBUG EntityManagerFactory created
2023-07-17 11:22:40 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 11:22:41 DEBUG JpaTransactionManager created
2023-07-17 11:22:51 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 11:22:51 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 11:23:09 DEBUG FIND_BY_TAGS [[Burleson579]]
2023-07-17 11:23:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 11:23:09 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-17 11:23:09 DEBUG [GiftCertificateService.findByTags()] GiftCertificate received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]], for tags:[[Burleson579]]
2023-07-17 11:23:09 DEBUG [GiftCertificateService.findByTags()] Total records for tags:[15]
2023-07-17 11:23:14 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-17 11:23:14 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-17 11:23:14 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]], for GiftCertificate.ID: [2]
2023-07-17 14:58:22 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 14:58:25 DEBUG MySQL DataSource with HikariCP created
2023-07-17 14:58:27 DEBUG Schema creation script executed
2023-07-17 14:58:29 DEBUG Schema initialization script executed
2023-07-17 14:58:29 DEBUG EntityManagerFactory created
2023-07-17 14:58:33 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 14:58:33 DEBUG JpaTransactionManager created
2023-07-17 14:59:32 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 14:59:36 DEBUG MySQL DataSource with HikariCP created
2023-07-17 14:59:37 DEBUG Schema creation script executed
2023-07-17 14:59:40 DEBUG Schema initialization script executed
2023-07-17 14:59:40 DEBUG EntityManagerFactory created
2023-07-17 14:59:43 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 14:59:43 DEBUG JpaTransactionManager created
2023-07-17 15:01:55 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:01:58 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:01:59 DEBUG Schema creation script executed
2023-07-17 15:02:02 DEBUG Schema initialization script executed
2023-07-17 15:02:02 DEBUG EntityManagerFactory created
2023-07-17 15:02:05 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:02:05 DEBUG JpaTransactionManager created
2023-07-17 15:02:40 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:02:43 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:02:45 DEBUG Schema creation script executed
2023-07-17 15:02:47 DEBUG Schema initialization script executed
2023-07-17 15:02:47 DEBUG EntityManagerFactory created
2023-07-17 15:02:50 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:02:51 DEBUG JpaTransactionManager created
2023-07-17 15:18:55 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:18:59 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:19:00 DEBUG Schema creation script executed
2023-07-17 15:19:02 DEBUG Schema initialization script executed
2023-07-17 15:19:02 DEBUG EntityManagerFactory created
2023-07-17 15:19:05 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:19:06 DEBUG JpaTransactionManager created
2023-07-17 15:19:31 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:19:34 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:19:35 DEBUG Schema creation script executed
2023-07-17 15:19:37 DEBUG Schema initialization script executed
2023-07-17 15:19:37 DEBUG EntityManagerFactory created
2023-07-17 15:19:40 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:19:41 DEBUG JpaTransactionManager created
2023-07-17 15:19:56 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 15:19:56 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 15:25:34 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:25:39 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:25:39 DEBUG Schema creation script executed
2023-07-17 15:25:41 DEBUG Schema initialization script executed
2023-07-17 15:25:41 DEBUG EntityManagerFactory created
2023-07-17 15:25:49 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:25:50 DEBUG JpaTransactionManager created
2023-07-17 15:25:55 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 15:25:55 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 15:31:25 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:31:28 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:31:29 DEBUG Schema creation script executed
2023-07-17 15:31:31 DEBUG Schema initialization script executed
2023-07-17 15:31:31 DEBUG EntityManagerFactory created
2023-07-17 15:31:34 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:31:35 DEBUG JpaTransactionManager created
2023-07-17 15:33:20 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:33:23 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:33:23 DEBUG Schema creation script executed
2023-07-17 15:33:25 DEBUG Schema initialization script executed
2023-07-17 15:33:25 DEBUG EntityManagerFactory created
2023-07-17 15:33:29 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:33:30 DEBUG JpaTransactionManager created
2023-07-17 15:34:05 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 15:34:05 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 15:36:05 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:36:08 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:36:08 DEBUG EntityManagerFactory created
2023-07-17 15:36:11 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:36:12 DEBUG JpaTransactionManager created
2023-07-17 15:36:20 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 15:36:20 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 15:38:49 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 15:38:55 DEBUG MySQL DataSource with HikariCP created
2023-07-17 15:38:55 DEBUG EntityManagerFactory created
2023-07-17 15:38:59 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 15:39:00 DEBUG JpaTransactionManager created
2023-07-17 15:39:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 15:39:11 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 18:06:25 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 18:06:28 DEBUG MySQL DataSource with HikariCP created
2023-07-17 18:06:28 DEBUG EntityManagerFactory created
2023-07-17 18:06:32 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 18:06:32 DEBUG JpaTransactionManager created
2023-07-17 18:07:23 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 18:07:27 DEBUG MySQL DataSource with HikariCP created
2023-07-17 18:07:27 DEBUG EntityManagerFactory created
2023-07-17 18:07:30 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 18:07:31 DEBUG JpaTransactionManager created
2023-07-17 18:07:40 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 18:07:40 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 18:10:17 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 18:10:22 DEBUG MySQL DataSource with HikariCP created
2023-07-17 18:10:22 DEBUG EntityManagerFactory created
2023-07-17 18:10:26 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 18:10:28 DEBUG JpaTransactionManager created
2023-07-17 18:10:31 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 18:10:31 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-17 18:10:36 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-17 18:10:36 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-07-17 18:23:17 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 18:23:21 DEBUG MySQL DataSource with HikariCP created
2023-07-17 18:23:21 DEBUG EntityManagerFactory created
2023-07-17 18:23:24 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 18:23:25 DEBUG JpaTransactionManager created
2023-07-17 18:24:11 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-17 18:24:11 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-07-17 18:24:16 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-17 18:24:16 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-17 18:24:16 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]], for GiftCertificate.ID: [2]
2023-07-17 18:26:24 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 18:26:28 DEBUG MySQL DataSource with HikariCP created
2023-07-17 18:26:28 DEBUG EntityManagerFactory created
2023-07-17 18:26:32 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 18:26:34 DEBUG JpaTransactionManager created
2023-07-17 18:27:00 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-17 18:27:00 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-17 18:27:00 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]], for GiftCertificate.ID: [2]
2023-07-17 18:57:57 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 18:58:01 DEBUG MySQL DataSource with HikariCP created
2023-07-17 18:58:01 DEBUG EntityManagerFactory created
2023-07-17 18:58:04 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 18:58:05 DEBUG JpaTransactionManager created
2023-07-17 18:58:43 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-17 18:58:43 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-17 18:58:43 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]], for GiftCertificate.ID: [2]
2023-07-17 19:04:31 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 19:04:34 DEBUG MySQL DataSource with HikariCP created
2023-07-17 19:04:35 DEBUG EntityManagerFactory created
2023-07-17 19:04:38 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 19:04:38 DEBUG JpaTransactionManager created
2023-07-17 19:05:31 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-17 19:05:31 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-17 19:05:31 DEBUG [TagService.findAllByCertificate()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]], for GiftCertificate.ID: [2]
2023-07-17 19:08:20 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-17 19:08:24 DEBUG MySQL DataSource with HikariCP created
2023-07-17 19:08:24 DEBUG EntityManagerFactory created
2023-07-17 19:08:28 DEBUG Filter 'authTokenFilter' configured for use
2023-07-17 19:08:29 DEBUG JpaTransactionManager created
2023-07-17 19:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-17 19:08:38 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]]
2023-07-18 10:22:44 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-18 10:28:22 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-18 10:34:30 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-18 10:34:38 DEBUG MySQL DataSource with HikariCP created
2023-07-18 10:34:38 DEBUG EntityManagerFactory created
2023-07-18 10:34:45 DEBUG Filter 'authTokenFilter' configured for use
2023-07-18 10:34:47 DEBUG JpaTransactionManager created
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-18 10:35:04 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-18 10:37:50 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-18 10:37:50 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)}
2023-07-18 10:37:50 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-07-18 10:37:50 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 10:37:51 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)]
2023-07-18 10:37:51 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODk2NjU4NzEsImV4cCI6MTY4OTc1MjI3MX0.Tu6YsrqJIDBvfcXcRY_mEwrdts-GopCffaAqKXmbtCE, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)] has been saved
2023-07-18 10:38:17 DEBUG User is not authenticated yet...
2023-07-18 10:38:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@msaill.com}
2023-07-18 10:38:24 DEBUG User is not authenticated yet...
2023-07-18 10:38:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 10:38:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)]]
2023-07-18 10:38:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 10:38:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 10:38:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)]]
2023-07-18 10:38:24 DEBUG [UserMappingService] User model: [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-18 10:38:24 DEBUG [UserService.findByEmail()] User received from database: [UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])], for eMail:[jBloch@mail.com]
2023-07-18 10:38:24 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-18 10:38:24 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])], for ID:[1]
2023-07-18 10:38:24 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-18 10:38:24 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-07-18 10:38:24 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-18 10:38:24 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])], for ID:[5]
2023-07-18 10:38:24 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)]
2023-07-18 10:38:24 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)]
2023-07-18 10:38:24 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)]
2023-07-18 10:38:24 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER)]
2023-07-18 10:38:24 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=2327.0, createDate=null, userDTO=UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=2327.0, createDate=null)]
2023-07-18 10:38:24 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=1001, price=2327.0, createDate=2023-07-18T07:38:24.491230400)]
2023-07-18 10:38:24 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1001, price=2327.0, createDate=2023-07-18T07:38:24.491230400)] converted to ReceiptDTO: [ReceiptDTO(id=1001, price=2327.0, createDate=2023-07-18T07:38:24.491230400, userDTO=null)]
2023-07-18 10:39:07 DEBUG User is not authenticated yet...
2023-07-18 10:39:07 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 10:39:07 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)]]
2023-07-18 10:39:07 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 10:39:10 DEBUG User is not authenticated yet...
2023-07-18 10:39:10 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 10:39:10 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)]]
2023-07-18 10:39:10 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$ovS/OpiYzSD1.GSTgpXFwuQM9hK/wZWb3Qf4l4A5tLB7l5F5areQy, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 10:39:17 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-18 10:39:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-18 10:39:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-18 10:39:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-18 10:39:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-18 10:39:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-18 10:39:17 DEBUG [AuthenticationService.signIn()] Token: [Token(id=2, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg5NjY1OTU3LCJleHAiOjE2ODk3NTIzNTd9.QWFyResxP70mXjDr0wIM81QQyRVxNYnjSxfN8voq26c, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-18 10:39:30 DEBUG User is not authenticated yet...
2023-07-18 10:39:30 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-18 10:39:30 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-18 10:39:30 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-18 10:39:31 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=python)] converted to Tag model: [Tag(id=null, name=python)]
2023-07-18 10:39:31 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=java)] converted to Tag model: [Tag(id=null, name=java)]
2023-07-18 10:39:31 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=go)] converted to Tag model: [Tag(id=null, name=go)]
2023-07-18 10:39:31 DEBUG [TagMappingService] TagDTO:[TagDTO(id=null, name=scala)] converted to Tag model: [Tag(id=null, name=scala)]
2023-07-18 10:39:31 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null, tags=[TagDTO(id=null, name=python), TagDTO(id=null, name=java), TagDTO(id=null, name=go), TagDTO(id=null, name=scala)])] converted to GiftCertificate model: [GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=null, lastUpdateDate=null)]
2023-07-18 10:39:31 DEBUG [GiftCertificateHibernateRepository.save()] GiftCertificate :[GiftCertificate(id=null, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-18T07:39:31.123474400, lastUpdateDate=2023-07-18T07:39:31.123474400)] has been saved.
2023-07-18 10:39:31 DEBUG [GiftCertificateService.save()] GiftCertificate saved :[big dataz].
2023-07-18 10:39:31 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10001, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-18T07:39:31.123474400, lastUpdateDate=2023-07-18T07:39:31.123474400)] converted to DTO: [GiftCertificateDTO(id=10001, name=big dataz, description=specific, price=55.0, duration=2, createDate=2023-07-18T07:39:31.123474400, lastUpdateDate=2023-07-18T07:39:31.123474400, tags=[])]
2023-07-18 12:08:07 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-18 12:08:11 DEBUG MySQL DataSource with HikariCP created
2023-07-18 12:08:13 DEBUG Schema creation script executed
2023-07-18 12:08:15 DEBUG Schema initialization script executed
2023-07-18 12:08:15 DEBUG EntityManagerFactory created
2023-07-18 12:08:19 DEBUG Filter 'authTokenFilter' configured for use
2023-07-18 12:08:21 DEBUG JpaTransactionManager created
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744)] converted to DTO: [GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091)] converted to DTO: [GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534)] converted to DTO: [GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004)] converted to DTO: [GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299)] converted to DTO: [GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536)] converted to DTO: [GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030)] converted to DTO: [GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568)] converted to DTO: [GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374)] converted to DTO: [GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008)] converted to DTO: [GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942)] converted to DTO: [GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007)] converted to DTO: [GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008)] converted to DTO: [GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422)] converted to DTO: [GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493)] converted to DTO: [GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452)] converted to DTO: [GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481)] converted to DTO: [GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]
2023-07-18 12:08:38 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[]), GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[]), GiftCertificateDTO(id=3, name=Quintin5, description=Qui tempora nisi similique laboriosam illum nesciunt. Unde similique omnis voluptatem sit nisi ipsum. Illum accusantium sit quia quidem; in et fuga., price=2505.0, duration=5, createDate=2010-04-08T00:39:35.625, lastUpdateDate=1990-01-29T19:14:40.744, tags=[]), GiftCertificateDTO(id=4, name=Kathern49, description=Neque amet ut. Natus quis ratione. Itaque tempore ut. Enim impedit magnam. Quo consectetur temporibus! Excepturi debitis perspiciatis. Quis et expedita!, price=631.0, duration=7, createDate=2022-01-30T22:23:34.160, lastUpdateDate=1981-05-23T00:31:19.091, tags=[]), GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[]), GiftCertificateDTO(id=6, name=Shenita2027, description=Unde ipsa sint fugit. Et tenetur error deserunt aspernatur sit error. Perspiciatis voluptas nobis dolor eos illum dolor!, price=3949.0, duration=2, createDate=2010-06-21T16:39:53.438, lastUpdateDate=2015-01-11T23:41:51.534, tags=[]), GiftCertificateDTO(id=7, name=Arnita2004, description=Et dolorem minus. Quasi non nesciunt! Minus alias suscipit. Laboriosam tenetur consectetur. Quia eaque enim! Minus nam vel. Voluptatum veniam fuga. Ipsum., price=1666.0, duration=10, createDate=2008-04-06T19:12:30.227, lastUpdateDate=1971-12-27T00:37:32.004, tags=[]), GiftCertificateDTO(id=8, name=Woodrow2009, description=Unde quia dolorem. Molestias fuga dolor. Laudantium commodi dolor. Qui dicta mollitia. Tempore qui ut. Quia facere nesciunt! Veniam possimus nihil; nihil., price=4746.0, duration=3, createDate=2015-02-15T11:26:04.706, lastUpdateDate=2018-09-30T03:13:10.299, tags=[]), GiftCertificateDTO(id=9, name=Chantel318, description=Aut et aut. Animi delectus tenetur! Cum omnis consequatur? Explicabo ut et! Facilis aliquam aspernatur. Qui labore facilis. Ad nesciunt pariatur! Nisi., price=63.0, duration=3, createDate=1984-06-05T11:16:46.710, lastUpdateDate=1976-12-26T10:23:37.536, tags=[]), GiftCertificateDTO(id=10, name=Aisha2010, description=Quas nam ut facilis. Omnis dicta aut non ut iste deserunt; et laboriosam corporis unde est voluptatem fugit., price=4042.0, duration=3, createDate=1999-05-12T22:45:56.948, lastUpdateDate=1979-04-15T18:21:23.030, tags=[]), GiftCertificateDTO(id=11, name=Christopher1976, description=Sit nihil autem. Ut velit repellat eaque non perspiciatis unde? Eos nostrum amet eum qui ea aut., price=3557.0, duration=9, createDate=1979-03-02T05:55:08.003, lastUpdateDate=1997-03-15T11:36:27.568, tags=[]), GiftCertificateDTO(id=12, name=Stephan1976, description=Corrupti aliquam ut enim blanditiis et officia., price=4378.0, duration=7, createDate=2009-12-14T12:10:39.183, lastUpdateDate=1979-02-21T19:42:49.374, tags=[]), GiftCertificateDTO(id=13, name=Brinson972, description=Nulla quas aut. Consequatur quis quia. Velit enim quidem! Et ab eaque. Voluptates ea sint. Magnam distinctio omnis. Corporis excepturi enim., price=4471.0, duration=9, createDate=2020-04-07T14:49:59.790, lastUpdateDate=1995-01-09T23:18:12.008, tags=[]), GiftCertificateDTO(id=14, name=Carpenter1994, description=Nesciunt magnam iste. Eos repudiandae delectus! Quia blanditiis molestiae. Modi sunt atque! Quas nulla non. Quia maxime et. Placeat fugiat eligendi? Aliquam., price=2843.0, duration=5, createDate=1990-12-27T11:39:59.077, lastUpdateDate=1973-09-25T15:09:25.942, tags=[]), GiftCertificateDTO(id=15, name=Doyle2, description=Voluptatibus omnis corrupti ipsam. Fugit corrupti molestiae odit cupiditate vero quo. Fuga et quos voluptatibus natus maxime. Enim quae et!, price=4748.0, duration=10, createDate=1985-02-17T06:48:01.638, lastUpdateDate=2011-05-09T21:16:34.007, tags=[]), GiftCertificateDTO(id=16, name=Johnston1952, description=Sit sed exercitationem. Sit quia doloremque. Perspiciatis est rerum! Neque fugit tempora? Sed repellat sit. Minima voluptas expedita. Ut beatae id. Quam!, price=935.0, duration=1, createDate=1978-08-19T08:53:18.405, lastUpdateDate=2015-02-13T10:48:50.008, tags=[]), GiftCertificateDTO(id=17, name=Booker6, description=In sed consequatur soluta sit voluptates ut. Hic error officiis. Tenetur culpa quidem numquam; sunt voluptatem optio accusantium? Asperiores magnam culpa., price=2159.0, duration=9, createDate=1980-01-03T23:13:44.653, lastUpdateDate=1979-12-24T22:38:58.422, tags=[]), GiftCertificateDTO(id=18, name=Carvalho72, description=Sit doloribus aspernatur consectetur reprehenderit. Ea voluptas enim. Omnis distinctio alias. Ut qui quasi ullam vitae voluptates adipisci., price=3016.0, duration=3, createDate=1975-05-07T06:48:31.904, lastUpdateDate=2009-04-04T19:33:04.493, tags=[]), GiftCertificateDTO(id=19, name=Aguilera1993, description=Quaerat doloremque sunt quo optio perspiciatis omnis. Qui alias ut consectetur reprehenderit rerum est!, price=1211.0, duration=8, createDate=1980-03-10T18:38:30.411, lastUpdateDate=2021-12-05T16:11:07.452, tags=[]), GiftCertificateDTO(id=20, name=Paris2022, description=Omnis numquam aut voluptatem dolor minima non. Quia vitae sed! Ut inventore et. Doloremque illo molestiae. Dolorum ut commodi. Et ut minima., price=2847.0, duration=7, createDate=2002-10-26T20:11:36.199, lastUpdateDate=1992-12-23T22:32:57.481, tags=[])]]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799)] converted to DTO: [GiftCertificateDTO(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157)] converted to DTO: [GiftCertificateDTO(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909)] converted to DTO: [GiftCertificateDTO(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948)] converted to DTO: [GiftCertificateDTO(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574)] converted to DTO: [GiftCertificateDTO(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064)] converted to DTO: [GiftCertificateDTO(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829)] converted to DTO: [GiftCertificateDTO(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044)] converted to DTO: [GiftCertificateDTO(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681)] converted to DTO: [GiftCertificateDTO(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647)] converted to DTO: [GiftCertificateDTO(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978)] converted to DTO: [GiftCertificateDTO(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624)] converted to DTO: [GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840)] converted to DTO: [GiftCertificateDTO(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065)] converted to DTO: [GiftCertificateDTO(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990)] converted to DTO: [GiftCertificateDTO(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327)] converted to DTO: [GiftCertificateDTO(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914)] converted to DTO: [GiftCertificateDTO(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219)] converted to DTO: [GiftCertificateDTO(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853)] converted to DTO: [GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639)] converted to DTO: [GiftCertificateDTO(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639, tags=[])]
2023-07-18 12:08:50 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799, tags=[]), GiftCertificateDTO(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157, tags=[]), GiftCertificateDTO(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909, tags=[]), GiftCertificateDTO(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948, tags=[]), GiftCertificateDTO(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574, tags=[]), GiftCertificateDTO(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064, tags=[]), GiftCertificateDTO(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829, tags=[]), GiftCertificateDTO(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044, tags=[]), GiftCertificateDTO(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681, tags=[]), GiftCertificateDTO(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647, tags=[]), GiftCertificateDTO(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978, tags=[]), GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[]), GiftCertificateDTO(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840, tags=[]), GiftCertificateDTO(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065, tags=[]), GiftCertificateDTO(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990, tags=[]), GiftCertificateDTO(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327, tags=[]), GiftCertificateDTO(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914, tags=[]), GiftCertificateDTO(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219, tags=[]), GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[]), GiftCertificateDTO(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639, tags=[])]]
2023-07-18 12:09:04 DEBUG [AuthController.registerUser()] Sign-Up request: [SignUpRequest(email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=123456789)}
2023-07-18 12:09:04 DEBUG [AuthenticationService.signUp()] User to be saved: [User(id=null, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)}
2023-07-18 12:09:04 DEBUG [UserJPARepository.isExistsByEmail()] Email for search: [jBloch@mail.com]
2023-07-18 12:09:04 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 12:09:05 DEBUG [AuthenticationService.signUp()] User has been saved, [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)]
2023-07-18 12:09:05 DEBUG [AuthenticationService.signUp()] Token: [Token(id=null, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqQmxvY2hAbWFpbC5jb20iLCJpYXQiOjE2ODk2NzEzNDUsImV4cCI6MTY4OTc1Nzc0NX0.sD4WXiPVDr5i7hId1JWzHhCaJUfbWoKS2JkrBn9MdyI, revoked=false, expired=false)] for user: [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)] has been saved
2023-07-18 12:09:17 DEBUG User is not authenticated yet...
2023-07-18 12:09:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 12:09:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)]]
2023-07-18 12:09:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 12:09:17 DEBUG [TagMappingService] Tag model: [Tag(id=1, name=Burleson579)] converted to TagDTO: [TagDTO(id=1, name=Burleson579)]
2023-07-18 12:09:17 DEBUG [TagMappingService] Tag model: [Tag(id=2, name=Devito2008)] converted to TagDTO: [TagDTO(id=2, name=Devito2008)]
2023-07-18 12:09:17 DEBUG [TagService.findAll()] Tags received from database: [[TagDTO(id=1, name=Burleson579), TagDTO(id=2, name=Devito2008)]]
2023-07-18 12:09:23 DEBUG User is not authenticated yet...
2023-07-18 12:09:24 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 12:09:24 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)]]
2023-07-18 12:09:24 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 12:09:27 DEBUG User is not authenticated yet...
2023-07-18 12:09:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 12:09:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)]]
2023-07-18 12:09:27 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 12:09:27 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 12:09:27 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)]]
2023-07-18 12:09:27 DEBUG [UserMappingService] User model: [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)] converted to UserDTO: [UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])]
2023-07-18 12:09:27 DEBUG [UserService.findByEmail()] User received from database: [UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])], for eMail:[jBloch@mail.com]
2023-07-18 12:09:27 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-18 12:09:27 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])], for ID:[1]
2023-07-18 12:09:27 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-18 12:09:27 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-07-18 12:09:27 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-18 12:09:27 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])], for ID:[5]
2023-07-18 12:09:27 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)]
2023-07-18 12:09:27 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)]
2023-07-18 12:09:27 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)]
2023-07-18 12:09:27 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[])] converted to User model: [User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER)]
2023-07-18 12:09:27 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=2327.0, createDate=null, userDTO=UserDTO(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=null, userRole=CUSTOMER, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=2327.0, createDate=null)]
2023-07-18 12:09:27 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=1001, price=2327.0, createDate=2023-07-18T09:09:27.604166100)]
2023-07-18 12:09:27 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1001, price=2327.0, createDate=2023-07-18T09:09:27.604166100)] converted to ReceiptDTO: [ReceiptDTO(id=1001, price=2327.0, createDate=2023-07-18T09:09:27.604166100, userDTO=null)]
2023-07-18 12:09:44 DEBUG User is not authenticated yet...
2023-07-18 12:09:44 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 12:09:44 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)]]
2023-07-18 12:09:44 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 12:09:44 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093, userDTO=null)]
2023-07-18 12:09:44 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447)] converted to ReceiptDTO: [ReceiptDTO(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447, userDTO=null)]
2023-07-18 12:09:44 DEBUG [ReceiptService.findAll()] Receipts received from database: [[ReceiptDTO(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093, userDTO=null), ReceiptDTO(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447, userDTO=null)]]
2023-07-18 12:34:14 DEBUG User is not authenticated yet...
2023-07-18 12:34:14 DEBUG [UserJPARepository.findByEmail()] Email for search: [jBloch@mail.com}
2023-07-18 12:34:14 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)]]
2023-07-18 12:34:14 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1001, email=jBloch@mail.com, firstName=Joshua, lastName=Bloch, password=$2a$10$RE/h/4ROb48BBw8CNKIhYeJNNAJb/R24OBxc0a1cH/.MgwvvBreh2, userRole=CUSTOMER)] for eMail:[jBloch@mail.com} has been received.
2023-07-18 12:34:14 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093)] converted to ReceiptDTO: [ReceiptDTO(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093, userDTO=null)]
2023-07-18 12:34:14 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447)] converted to ReceiptDTO: [ReceiptDTO(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447, userDTO=null)]
2023-07-18 12:34:14 DEBUG [ReceiptService.findAll()] Receipts received from database: [[ReceiptDTO(id=1, price=9228.0, createDate=1980-12-08T04:52:59.093, userDTO=null), ReceiptDTO(id=2, price=4214.0, createDate=1972-08-09T22:04:37.447, userDTO=null)]]
2023-07-18 12:49:46 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-18 12:49:51 DEBUG MySQL DataSource with HikariCP created
2023-07-18 12:49:52 DEBUG Schema creation script executed
2023-07-18 12:49:55 DEBUG Schema initialization script executed
2023-07-18 12:49:55 DEBUG EntityManagerFactory created
2023-07-18 12:50:00 DEBUG Filter 'authTokenFilter' configured for use
2023-07-18 12:50:01 DEBUG JpaTransactionManager created
2023-07-18 12:50:16 DEBUG [AuthController.registerUser()] Sign-In request: [AuthRequest(email=ebutchard0@ox.ac.uk, password=123456789)}
2023-07-18 12:50:16 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-18 12:50:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-18 12:50:17 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-18 12:50:17 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-18 12:50:17 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-18 12:50:18 DEBUG [AuthenticationService.signIn()] Token: [Token(id=1, jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlYnV0Y2hhcmQwQG94LmFjLnVrIiwiaWF0IjoxNjg5NjczODE3LCJleHAiOjE2ODk3NjAyMTd9.J2qq_4S_Nfj5-PLLP1okchUo6wiE6yvLuZOjzUmfA14, revoked=false, expired=false)] for user: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] has been saved
2023-07-18 12:50:28 DEBUG User is not authenticated yet...
2023-07-18 12:50:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-18 12:50:28 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-18 12:50:28 DEBUG [UserDetailsService.loadUserByUsername()] User:[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] for eMail:[ebutchard0@ox.ac.uk} has been received.
2023-07-18 12:50:28 DEBUG [UserJPARepository.findByEmail()] Email for search: [ebutchard0@ox.ac.uk}
2023-07-18 12:50:28 DEBUG [UserJPARepository.findByEmail()] Optional user result: [Optional[User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)]]
2023-07-18 12:50:28 DEBUG [UserMappingService] User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=$2a$10$CJSDqMFXSIpJ48bvn6h44.qnk/FsUl2IYBsuiwtdzdAvJCbJhERaW, userRole=ADMIN)] converted to UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])]
2023-07-18 12:50:28 DEBUG [UserService.findByEmail()] User received from database: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])], for eMail:[ebutchard0@ox.ac.uk]
2023-07-18 12:50:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)] converted to DTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])]
2023-07-18 12:50:28 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])], for ID:[1]
2023-07-18 12:50:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)] converted to DTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])]
2023-07-18 12:50:28 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])], for ID:[2]
2023-07-18 12:50:28 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)] converted to DTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])]
2023-07-18 12:50:28 DEBUG [GiftCertificateService.findById()] GiftCertificate received from database: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])], for ID:[5]
2023-07-18 12:50:28 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=2, name=Mollie1975, description=Quam odit provident dolor. Natus error velit consequatur hic vero ut! Est nemo molestiae adipisci qui quia ipsam., price=35.0, duration=1, createDate=1972-06-14T01:48:21.459, lastUpdateDate=2020-10-10T15:43:09.606)]
2023-07-18 12:50:28 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=5, name=Felisa221, description=Quo et consectetur. Omnis dolorem delectus quo corporis suscipit officiis; incidunt saepe vel nostrum ex et sed., price=1860.0, duration=1, createDate=2009-12-01T04:52:52.562, lastUpdateDate=1973-11-16T10:39:01.935)]
2023-07-18 12:50:28 DEBUG [GiftCertificateMappingService] GiftCertificateDTO: [GiftCertificateDTO(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912, tags=[])] converted to GiftCertificate model: [GiftCertificate(id=1, name=Letha241, description=Praesentium excepturi architecto ipsum possimus. Dolore molestiae omnis nihil. Aliquid perspiciatis qui. Ea sed nam; accusantium ipsam ut. Soluta., price=432.0, duration=9, createDate=2022-02-22T16:51:09.319, lastUpdateDate=1995-10-21T02:15:54.912)]
2023-07-18 12:50:28 DEBUG [UserMappingService] UserDTO: [UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[])] converted to User model: [User(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN)]
2023-07-18 12:50:28 DEBUG [ReceiptMappingService] ReceiptDTO: [ReceiptDTO(id=null, price=2327.0, createDate=null, userDTO=UserDTO(id=1, email=ebutchard0@ox.ac.uk, firstName=Eyde, lastName=Butchard, password=null, userRole=ADMIN, receipts=[]))] converted to Receipt model: [Receipt(id=null, price=2327.0, createDate=null)]
2023-07-18 12:50:28 DEBUG [ReceiptService.save()] Receipt saved: [Receipt(id=1001, price=2327.0, createDate=2023-07-18T09:50:28.695015300)]
2023-07-18 12:50:28 DEBUG [ReceiptMappingService] Receipt model:[Receipt(id=1001, price=2327.0, createDate=2023-07-18T09:50:28.695015300)] converted to ReceiptDTO: [ReceiptDTO(id=1001, price=2327.0, createDate=2023-07-18T09:50:28.695015300, userDTO=null)]
2023-07-18 16:07:08 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-18 16:07:14 DEBUG MySQL DataSource with HikariCP created
2023-07-18 16:07:16 DEBUG Schema creation script executed
2023-07-18 16:07:19 DEBUG Schema initialization script executed
2023-07-18 16:07:19 DEBUG EntityManagerFactory created
2023-07-18 16:07:24 DEBUG Filter 'authTokenFilter' configured for use
2023-07-18 16:07:26 DEBUG JpaTransactionManager created
2023-07-24 12:07:22 DEBUG Running with Spring Boot v3.1.1, Spring v6.0.10
2023-07-24 12:07:27 DEBUG MySQL DataSource with HikariCP created
2023-07-24 12:07:29 DEBUG Schema creation script executed
2023-07-24 12:07:31 DEBUG Schema initialization script executed
2023-07-24 12:07:31 DEBUG EntityManagerFactory created
2023-07-24 12:07:36 DEBUG Filter 'authTokenFilter' configured for use
2023-07-24 12:07:38 DEBUG JpaTransactionManager created
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799)] converted to DTO: [GiftCertificateDTO(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157)] converted to DTO: [GiftCertificateDTO(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909)] converted to DTO: [GiftCertificateDTO(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948)] converted to DTO: [GiftCertificateDTO(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574)] converted to DTO: [GiftCertificateDTO(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064)] converted to DTO: [GiftCertificateDTO(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829)] converted to DTO: [GiftCertificateDTO(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044)] converted to DTO: [GiftCertificateDTO(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681)] converted to DTO: [GiftCertificateDTO(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681, tags=[])]
2023-07-24 12:08:43 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647)] converted to DTO: [GiftCertificateDTO(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978)] converted to DTO: [GiftCertificateDTO(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624)] converted to DTO: [GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840)] converted to DTO: [GiftCertificateDTO(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065)] converted to DTO: [GiftCertificateDTO(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990)] converted to DTO: [GiftCertificateDTO(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327)] converted to DTO: [GiftCertificateDTO(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914)] converted to DTO: [GiftCertificateDTO(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219)] converted to DTO: [GiftCertificateDTO(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853)] converted to DTO: [GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateMappingService.mapToDTO()] GiftCertificate model: [GiftCertificate(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639)] converted to DTO: [GiftCertificateDTO(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639, tags=[])]
2023-07-24 12:08:44 DEBUG [GiftCertificateService.findAll()] GiftCertificates received from database: [[GiftCertificateDTO(id=41, name=Crystle2000, description=Exercitationem culpa nostrum nesciunt voluptate. Molestiae consectetur eligendi sit ut enim nobis. Hic amet adipisci. Mollitia quia dicta. Et quibusdam sed., price=2708.0, duration=7, createDate=1995-02-23T17:14:41.502, lastUpdateDate=2006-03-01T14:29:24.799, tags=[]), GiftCertificateDTO(id=42, name=Weston1954, description=Quia et soluta. Quis error ullam! Neque possimus voluptatem. Dolor enim omnis. Repellat aperiam quis; eligendi et laudantium; explicabo laborum aliquid., price=1318.0, duration=5, createDate=1998-04-12T15:49:23.280, lastUpdateDate=2005-07-23T05:18:56.157, tags=[]), GiftCertificateDTO(id=43, name=Abdul134, description=Voluptatem fugit tenetur omnis tenetur dolorum rerum; itaque dolor laudantium dolor dolore aut quisquam., price=141.0, duration=6, createDate=1983-03-14T08:28:24.089, lastUpdateDate=2009-06-17T03:00:10.909, tags=[]), GiftCertificateDTO(id=44, name=Brigida1989, description=Modi aut harum sint quia sint est., price=3167.0, duration=1, createDate=1987-06-29T04:55:29.556, lastUpdateDate=2022-06-25T09:58:03.948, tags=[]), GiftCertificateDTO(id=45, name=Christian1985, description=Assumenda voluptatibus iste et. Deleniti praesentium velit libero qui in rem. Similique tempora praesentium quas quis corporis rem., price=362.0, duration=8, createDate=1988-07-07T04:42:38.735, lastUpdateDate=1995-02-18T03:51:17.574, tags=[]), GiftCertificateDTO(id=46, name=Alberto1984, description=Architecto illo voluptatem. Delectus id corporis. Magni quisquam fugit! Exercitationem suscipit et. Ut dolore aut! Dolorum error distinctio? Maiores suscipit!, price=4434.0, duration=8, createDate=2021-10-30T02:03:30.979, lastUpdateDate=2010-08-11T08:45:07.064, tags=[]), GiftCertificateDTO(id=47, name=Ernesto599, description=Doloribus dicta corporis omnis accusamus vitae non. Magnam a hic similique fugiat quo voluptas., price=2390.0, duration=9, createDate=2004-09-03T12:31:52.228, lastUpdateDate=1989-12-18T07:32:34.829, tags=[]), GiftCertificateDTO(id=48, name=Rivka533, description=Omnis quas ut repudiandae dolorem sit et. Et corporis ipsam. Iste voluptas modi. Pariatur optio dolores. Iste nesciunt odit. Rerum ad ratione., price=567.0, duration=8, createDate=2007-03-03T09:50:24.004, lastUpdateDate=2014-03-11T10:53:14.044, tags=[]), GiftCertificateDTO(id=49, name=Opal1955, description=Est commodi aut. Voluptatem maiores quod. Quia eaque id. Quia ex dolores! Amet sit odio. Enim aut dolor; consequuntur illo molestias; natus velit voluptatem., price=2549.0, duration=5, createDate=1983-06-03T01:28:13.719, lastUpdateDate=2020-04-07T20:11:39.681, tags=[]), GiftCertificateDTO(id=50, name=Cornell6, description=Provident et voluptas; quia necessitatibus quia. Velit sit non! Illo voluptatem harum. Tempora sequi et? Quia eum voluptatem. Ea vero repellendus? Architecto., price=2966.0, duration=5, createDate=1998-12-08T23:25:27.140, lastUpdateDate=2004-05-10T06:37:45.647, tags=[]), GiftCertificateDTO(id=51, name=Antonietta1973, description=Asperiores rem qui. Id aperiam et ad aperiam corporis nulla; error aut ea dolor id maxime est., price=3932.0, duration=2, createDate=2002-06-17T13:15:40.247, lastUpdateDate=1973-03-22T12:01:24.978, tags=[]), GiftCertificateDTO(id=52, name=Marinda1990, description=Consequuntur laudantium qui magni. Qui omnis aut in quia ut numquam! Sed commodi deserunt ea omnis in molestias., price=4930.0, duration=9, createDate=1986-04-08T16:42:46.795, lastUpdateDate=2021-01-15T17:01:51.624, tags=[]), GiftCertificateDTO(id=53, name=Garland194, description=Sed aut magnam autem suscipit quia. Quae non molestias omnis quis? Qui laborum et expedita. Consequuntur sed et unde voluptatum nostrum., price=1165.0, duration=1, createDate=1981-12-11T20:23:21.381, lastUpdateDate=1981-07-13T20:24:08.840, tags=[]), GiftCertificateDTO(id=54, name=Abbie3, description=Iste voluptates doloremque; sed qui maiores. Nesciunt natus asperiores! Hic error molestias. Ipsam officia voluptatem. Alias neque enim. Iure unde placeat., price=2874.0, duration=7, createDate=1988-09-19T08:41:27.643, lastUpdateDate=1988-12-11T11:40:16.065, tags=[]), GiftCertificateDTO(id=55, name=Tandra1967, description=Quia architecto aliquid unde doloribus sed laudantium. Autem aspernatur et dolores ad. Minima corporis eius natus voluptates eum molestiae. Sit quidem., price=2335.0, duration=2, createDate=2015-07-23T13:49:15.415, lastUpdateDate=1988-02-09T04:41:15.990, tags=[]), GiftCertificateDTO(id=56, name=Collette2007, description=Consequuntur praesentium nihil dolore voluptatem natus. Autem quasi nam. Doloremque in sit architecto eveniet vitae et., price=1411.0, duration=8, createDate=1987-10-04T18:24:33.509, lastUpdateDate=2018-07-26T17:25:36.327, tags=[]), GiftCertificateDTO(id=57, name=Shirly2008, description=Voluptate excepturi aliquid voluptatum odit natus omnis., price=4796.0, duration=7, createDate=2020-05-07T07:50:59.005, lastUpdateDate=1984-05-14T14:19:17.914, tags=[]), GiftCertificateDTO(id=58, name=Abe1988, description=Excepturi rerum nisi. Voluptatem ea omnis voluptatem perspiciatis ipsam minima! Rem dolor iusto odio vel et perspiciatis., price=4935.0, duration=4, createDate=2009-07-16T18:27:00.453, lastUpdateDate=1992-11-04T10:06:12.219, tags=[]), GiftCertificateDTO(id=59, name=Tommie793, description=Ea ipsum fuga totam sunt voluptatibus fugiat. Et natus sit quisquam blanditiis libero esse., price=134.0, duration=3, createDate=2017-08-16T14:15:55.574, lastUpdateDate=2011-02-17T23:04:37.853, tags=[]), GiftCertificateDTO(id=60, name=Carden228, description=Omnis natus reiciendis et iusto qui cumque., price=3046.0, duration=1, createDate=1983-04-12T11:05:31.052, lastUpdateDate=1999-01-19T22:33:52.639, tags=[])]]
