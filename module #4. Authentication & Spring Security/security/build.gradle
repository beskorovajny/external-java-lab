plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.sonarqube" version "4.3.0.3225"

}

subprojects {
    buildscript {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.3.0.3225"
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'war'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    group = 'com.epam.esm'
    version = '1.0'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j2
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '3.1.1'
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '3.1.1'
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.1.1'
        // https://mvnrepository.com/artifact/org.springframework.data/spring-data-commons
        implementation group: 'org.springframework.data', name: 'spring-data-commons', version: '3.1.1'

        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'

    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
    }

    sonar {
        properties {
            property "sonar.projectKey", "rest-app"
            property "sonar.organization", "com.epam.esm"
            property "sonar.host.url", "http://localhost:9000"
            property "sonar.login", "admin"
            property "sonar.password", "nimda"
            property 'sonar.projectName', 'rest-app'
            property 'sonar.java.source', 17
            property 'sonar.java.coveragePlugin', 'jacoco'
            property 'encoding', 'UTF-8'
            property 'charSet', 'UTF-8'
            property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports"
            property "sonar.coverage.jacoco.xmlReportPath", "${project.buildDir}/reports/jacoco.xml"
            property "sonar.junit.reportPaths", "${project.buildDir}/test-results"
            property "sonar.verbose", true
            property "sonar.sources", "src/main"
            property "sonar.tests", "src/test"
        }
    }

    jacoco {
        toolVersion = "0.8.9"
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }

    test {
        useJUnitPlatform()
        jacoco {
            destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
            classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
        }

        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            /*xml.required = false
            html.required = false*/
            html.destination file("${buildDir}/reports/jacoco.html")
            xml.destination file("${buildDir}/reports/jacoco.xml")
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.15
                }
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn jacocoTestReport

    bootJar {
        enabled = false
        mainClass = 'com.epam.esm.api.StarterSecurityApplication'
    }

    bootWar {
        mainClass = 'com.epam.esm.api.StarterSecurityApplication'
    }
}

dependencies {
    implementation project(':repository-api')
    implementation project(':repository-jpa-impl')
    implementation project(':service-api')
    implementation project(':service-default-impl')
    implementation project(':security-api')
    implementation project(':security-jwt-impl')
    implementation project(':core')
    implementation project(':rest-app')
}

/*
bootJar {
    archiveBaseName = 'spring-mjc-app'
    archiveVersion = '0.1.0'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    mainClass = 'com.epam.esm.api.StarterSecurityApplication'

    manifest {
        attributes 'Implementation-Name': 'spring-mjc-app',
                'Implementation-Version': project.version,
                'Start-Class': 'com.epam.esm.api.StarterSecurityApplication'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
*/


springBoot {
    mainClass = 'com.epam.esm.api.StarterSecurityApplication'
}

